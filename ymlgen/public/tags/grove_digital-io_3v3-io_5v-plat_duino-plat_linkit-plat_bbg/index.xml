<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</title>
    <link>http://wiki.seeed.cc/tags/grove_digital-io_3v3-io_5v-plat_duino-plat_linkit-plat_bbg/index.xml</link>
    <description>Recent content on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wiki.seeed.cc/tags/grove_digital-io_3v3-io_5v-plat_duino-plat_linkit-plat_bbg/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grove - Chainable RGB LED</title>
      <link>http://wiki.seeed.cc/Grove-Chainable_RGB_LED/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Chainable_RGB_LED/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Chainable_RGB_LED/master/img/Chanbalelednb1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grove - Chainable RGB LED&lt;/strong&gt; is based on P9813 chip which is a full-color LED driver. It provides 3 constant-current drivers as well as modulated output of 256 shades of gray. It communicates with a MCU using 2-wire transmission (Data and Clock). This 2-wire transmission can be used to cascade additional &lt;strong&gt;Grove - Chainable RGB LED&lt;/strong&gt; modules. The built-in clock regeneration enhances the transmission distance. This Grove module is suitable for any colorful LED based projects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-Chainable-RGB-LED-p-850.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Operating Voltage: 5V&lt;/li&gt;
&lt;li&gt;Operating Current: 20mA&lt;/li&gt;
&lt;li&gt;Communication Protocol: Serial&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;When you get Grove - Chainble RGB LED, you may think how I can light up it. Now we will show you this demo: all colors of RGB cycles in an uniform way.&lt;/p&gt;

&lt;p&gt;To complete this demo, you can use one or more Grove - Chainable RGB LED. Note that the IN interface of one Grove - Chainable RGB LED should be connect to D7/D8 of &lt;a href=&#34;http://wiki.seeed.cc/Base_Shield_V2&#34; title=&#34;Grove - Base Shield&#34;&gt;Grove - Base Shield&lt;/a&gt; and its OUT interface connect to IN interface of another Grove - Chainable RGB LED, chainable more LED in this way.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download &lt;a href=&#34;https://github.com/pjpmarques/ChainableLED&#34;&gt;Chainable LED Library&lt;/a&gt; and install it to Arduino Library. There is the course about &lt;a href=&#34;http://wiki.seeed.cc/How_to_install_Arduino_Library&#34;&gt;how to install Arduino Library&lt;/a&gt; in wiki page.&lt;/li&gt;
&lt;li&gt;Open the example CycleThroughColors by the path:File-&amp;gt;Examples-&amp;gt;ChainableLED_master and upload it to Seeeduino.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    /* 
     * Example of using the ChainableRGB library for controlling a Grove RGB.
     * This code cycles through all the colors in an uniform way. This is accomplished using a HSB color space. 
     */
    #include &amp;lt;ChainableLED.h&amp;gt;

    #define NUM_LEDS  5

    ChainableLED leds(7, 8, NUM_LEDS);

    void setup()
    {
    }

    float hue = 0.0;
    boolean up = true;

    void loop()
    {
      for (byte i=0; i&amp;lt;NUM_LEDS; i++)
        leds.setColorHSB(i, hue, 1.0, 0.5);
        
      delay(50);
        
      if (up)
        hue+= 0.025;
      else
        hue-= 0.025;
        
      if (hue&amp;gt;=1.0 &amp;amp;&amp;amp; up)
        up = false;
      else if (hue&amp;lt;=0.0 &amp;amp;&amp;amp; !up)
        up = true;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can observe this scene: colors of two LED will gradient consistently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extended application:&lt;/strong&gt;
Based on &lt;a href=&#34;https://github.com/pjpmarques/ChainableLED&#34;&gt;Chainable LED Library&lt;/a&gt;, we have designed this demo: RGB color varies with the temperature measured by Grove - temperature. The RGB color vary from green to red when the temperature is from 25 to 32. The test code is shown below. Do it if you are interested in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // demo of temperature -&amp;gt; rgbLED
    // temperature form 25 - 32, rgbLed from green -&amp;gt; red
    // Grove-temperature plu to A0
    // LED plug to D7,D8

    #include &amp;lt;Streaming.h&amp;gt;
    #include &amp;lt;ChainableLED.h&amp;gt;

    #define TEMPUP 32
    #define TEMPDOWN 25

    ChainableLED leds(7, 8, 1); // connect to pin7 and pin8 , one led

    int getAnalog() // get value from A0
    {
        int sum = 0;
        for(int i=0; i&amp;lt;32; i++)
        {
            sum += analogRead(A0);
        }
        
        return sum&amp;gt;&amp;gt;5;
    }

    float getTemp() // get temperature
    {
        float temperature = 0.0;
        float resistance = 0.0;
        int B = 3975; //B value of the thermistor
        
        int a = getAnalog();
        
        resistance = (float)(1023-a)*10000/a; //get the resistance of the sensor;
        temperature = 1/(log(resistance/10000)/B+1/298.15)-273.15; //convert to temperature via datasheet ;
        return temperature;
    }

    void ledLight(int dta) // light led
    {

        dta = dta/4; // 0 - 255
        
        int colorR = dta;
        int colorG = 255-dta;
        int colorB = 0;

        leds.setColorRGB(0, colorR, colorG, colorB);
    }

    void setup()
    {
        Serial.begin(38400);
        cout &amp;lt;&amp;lt; &amp;quot;hello world !&amp;quot; &amp;lt;&amp;lt; endl;
    }

    void loop()
    {
        float temp = getTemp();
        int nTemp = temp*100;
        
        nTemp = nTemp &amp;gt; TEMPUP*100 ? TEMPUP*100 : (nTemp &amp;lt; TEMPDOWN*100 ? TEMPDOWN*100 : nTemp);
        nTemp = map(nTemp, TEMPDOWN*100, TEMPUP*100, 0, 1023);
        ledLight(nTemp);
        delay(100);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have got a raspberry pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket D7 by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To see the code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; nano grove_chainable_rgb_led.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import time
import grovepi

# Connect first LED in Chainable RGB LED chain to digital port D7
# In: CI,DI,VCC,GND
# Out: CO,DO,VCC,GND
pin = 7

# I have 10 LEDs connected in series with the first connected to the GrovePi and the last not connected
# First LED input socket connected to GrovePi, output socket connected to second LED input and so on
numleds = 1  

grovepi.pinMode(pin,&amp;quot;OUTPUT&amp;quot;)
time.sleep(1)

# Chainable RGB LED methods
# grovepi.storeColor(red, green, blue)
# grovepi.chainableRgbLed_init(pin, numLeds)
# grovepi.chainableRgbLed_test(pin, numLeds, testColor)
# grovepi.chainableRgbLed_pattern(pin, pattern, whichLed)
# grovepi.chainableRgbLed_modulo(pin, offset, divisor)
# grovepi.chainableRgbLed_setLevel(pin, level, reverse)

# test colors used in grovepi.chainableRgbLed_test()
testColorBlack = 0   # 0b000 #000000
testColorBlue = 1    # 0b001 #0000FF
testColorGreen = 2   # 0b010 #00FF00
testColorCyan = 3    # 0b011 #00FFFF
testColorRed = 4     # 0b100 #FF0000
testColorMagenta = 5 # 0b101 #FF00FF
testColorYellow = 6  # 0b110 #FFFF00
testColorWhite = 7   # 0b111 #FFFFFF

# patterns used in grovepi.chainableRgbLed_pattern()
thisLedOnly = 0
allLedsExceptThis = 1
thisLedAndInwards = 2
thisLedAndOutwards = 3

try:

    print &amp;quot;Test 1) Initialise&amp;quot;

    # init chain of leds
    grovepi.chainableRgbLed_init(pin, numleds)
    time.sleep(.5)

    # change color to green
    grovepi.storeColor(0,255,0)
    time.sleep(.5)

    # set led 1 to green
    grovepi.chainableRgbLed_pattern(pin, thisLedOnly, 0)
    time.sleep(.5)

    # change color to red
    grovepi.storeColor(255,0,0)
    time.sleep(.5)

    # set led 10 to red
    grovepi.chainableRgbLed_pattern(pin, thisLedOnly, 9)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 2a) Test Patterns - black&amp;quot;

    # test pattern 0 - black (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(1)


    print &amp;quot;Test 2b) Test Patterns - blue&amp;quot;

    # test pattern 1 blue
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlue)
    time.sleep(1)


    print &amp;quot;Test 2c) Test Patterns - green&amp;quot;

    # test pattern 2 green
    grovepi.chainableRgbLed_test(pin, numleds, testColorGreen)
    time.sleep(1)


    print &amp;quot;Test 2d) Test Patterns - cyan&amp;quot;

    # test pattern 3 cyan
    grovepi.chainableRgbLed_test(pin, numleds, testColorCyan)
    time.sleep(1)


    print &amp;quot;Test 2e) Test Patterns - red&amp;quot;

    # test pattern 4 red
    grovepi.chainableRgbLed_test(pin, numleds, testColorRed)
    time.sleep(1)


    print &amp;quot;Test 2f) Test Patterns - magenta&amp;quot;

    # test pattern 5 magenta
    grovepi.chainableRgbLed_test(pin, numleds, testColorMagenta)
    time.sleep(1)


    print &amp;quot;Test 2g) Test Patterns - yellow&amp;quot;

    # test pattern 6 yellow
    grovepi.chainableRgbLed_test(pin, numleds, testColorYellow)
    time.sleep(1)


    print &amp;quot;Test 2h) Test Patterns - white&amp;quot;

    # test pattern 7 white
    grovepi.chainableRgbLed_test(pin, numleds, testColorWhite)
    time.sleep(1)


    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 3a) Set using pattern - this led only&amp;quot;

    # change color to red
    grovepi.storeColor(255,0,0)
    time.sleep(.5)

    # set led 3 to red
    grovepi.chainableRgbLed_pattern(pin, thisLedOnly, 2)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 3b) Set using pattern - all leds except this&amp;quot;

    # change color to blue
    grovepi.storeColor(0,0,255)
    time.sleep(.5)

    # set all leds except for 3 to blue
    grovepi.chainableRgbLed_pattern(pin, allLedsExceptThis, 3)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 3c) Set using pattern - this led and inwards&amp;quot;

    # change color to green
    grovepi.storeColor(0,255,0)
    time.sleep(.5)

    # set leds 1-3 to green
    grovepi.chainableRgbLed_pattern(pin, thisLedAndInwards, 2)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 3d) Set using pattern - this led and outwards&amp;quot;

    # change color to green
    grovepi.storeColor(0,255,0)
    time.sleep(.5)

    # set leds 7-10 to green
    grovepi.chainableRgbLed_pattern(pin, thisLedAndOutwards, 6)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 4a) Set using modulo - all leds&amp;quot;

    # change color to black (fully off)
    grovepi.storeColor(0,0,0)
    time.sleep(.5)

    # set all leds black
    # offset 0 means start at first led
    # divisor 1 means every led
    grovepi.chainableRgbLed_modulo(pin, 0, 1)
    time.sleep(.5)

    # change color to white (fully on)
    grovepi.storeColor(255,255,255)
    time.sleep(.5)

    # set all leds white
    grovepi.chainableRgbLed_modulo(pin, 0, 1)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 4b) Set using modulo - every 2&amp;quot;

    # change color to red
    grovepi.storeColor(255,0,0)
    time.sleep(.5)

    # set every 2nd led to red
    grovepi.chainableRgbLed_modulo(pin, 0, 2)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)


    print &amp;quot;Test 4c) Set using modulo - every 2, offset 1&amp;quot;

    # change color to green
    grovepi.storeColor(0,255,0)
    time.sleep(.5)

    # set every 2nd led to green, offset 1
    grovepi.chainableRgbLed_modulo(pin, 1, 2)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 4d) Set using modulo - every 3, offset 0&amp;quot;

    # change color to red
    grovepi.storeColor(255,0,0)
    time.sleep(.5)

    # set every 3nd led to red
    grovepi.chainableRgbLed_modulo(pin, 0, 3)
    time.sleep(.5)

    # change color to green
    grovepi.storeColor(0,255,0)
    time.sleep(.5)

    # set every 3nd led to green, offset 1
    grovepi.chainableRgbLed_modulo(pin, 1, 3)
    time.sleep(.5)

    # change color to blue
    grovepi.storeColor(0,0,255)
    time.sleep(.5)

    # set every 3nd led to blue, offset 2
    grovepi.chainableRgbLed_modulo(pin, 2, 3)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 4e) Set using modulo - every 3, offset 1&amp;quot;

    # change color to yellow
    grovepi.storeColor(255,255,0)
    time.sleep(.5)

    # set every 4nd led to yellow
    grovepi.chainableRgbLed_modulo(pin, 1, 3)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)


    print &amp;quot;Test 4f) Set using modulo - every 3, offset 2&amp;quot;

    # change color to magenta
    grovepi.storeColor(255,0,255)
    time.sleep(.5)

    # set every 4nd led to magenta
    grovepi.chainableRgbLed_modulo(pin, 2, 3)
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 5a) Set level 6&amp;quot;

    # change color to green
    grovepi.storeColor(0,255,0)
    time.sleep(.5)

    # set leds 1-6 to green
    grovepi.write_i2c_block(0x04,[95,pin,6,0])
    time.sleep(.5)

    # pause so you can see what happened
    time.sleep(2)

    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    time.sleep(.5)


    print &amp;quot;Test 5b) Set level 7 - reverse&amp;quot;

    # change color to red
    grovepi.storeColor(255,0,0)
    time.sleep(.5)

    # set leds 4-10 to red
    grovepi.write_i2c_block(0x04,[95,pin,7,1])
    time.sleep(.5)


except KeyboardInterrupt:
    # reset (all off)
    grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)
    break
except IOError:
    print &amp;quot;Error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Notice that there&amp;rsquo;s something you have to concern of:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    pin = 7         #setting up the output pin
    numleds = 1     #how many leds you plug
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Also all methods you can see in grovepi.py is:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    storeColor(red, green, blue)
    chainableRgbLed_init(pin, numLeds)
    chainableRgbLed_test(pin, numLeds, testColor)
    chainableRgbLed_pattern(pin, pattern, whichLed)
    chainableRgbLed_modulo(pin, offset, divisor)
    chainableRgbLed_setLevel(pin, level, reverse)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Run the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo python grove_chainable_rgb_led.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.This demo may not work if your grovepi dosen&amp;rsquo;t have the newest firmware, update the firmware.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd yourpath/GrovePi/Firmware
    sudo ./firmware_update.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;with-beaglebone-green&#34;&gt;With Beaglebone Green&lt;/h3&gt;

&lt;p&gt;To begin editing programs that live on BBG, you can use the Cloud9 IDE.&lt;/p&gt;

&lt;p&gt;As a simple exercise to become familiar with Cloud9 IDE, creating a simple application to blink one of the 4 user programmable LEDs on the BeagleBone is a good start.&lt;/p&gt;

&lt;p&gt;If this is your first time to use Cloud9 IDE, please follow this &lt;a href=&#34;http://wiki.seeed.cc/BeagleBone_Green&#34;&gt;&lt;strong&gt;link&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step1:&lt;/strong&gt; Set the Grove - UART socket as a Grove - GPIO Socket, just follow this &lt;a href=&#34;http://www.seeedstudio.com/recipe/362-how-to-use-the-grove-uart-port-as-a-gpio-on-bbg.html&#34;&gt;&lt;strong&gt;link&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step2:&lt;/strong&gt; Click the &amp;ldquo;+&amp;rdquo; in the top-right to create a new file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Chainable_RGB_LED/master/img/C9-create-tab.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Chainable_RGB_LED/master/img/C9_newfile.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step3:&lt;/strong&gt; Copy and paste the following code into the new tab&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time
import Adafruit_BBIO.GPIO as GPIO
 
CLK_PIN = &amp;quot;P9_22&amp;quot;
DATA_PIN = &amp;quot;P9_21&amp;quot;
NUMBER_OF_LEDS = 1
 
class ChainableLED():
    def __init__(self, clk_pin, data_pin, number_of_leds):
        self.__clk_pin = clk_pin
        self.__data_pin = data_pin
        self.__number_of_leds = number_of_leds
 
        GPIO.setup(self.__clk_pin, GPIO.OUT)
        GPIO.setup(self.__data_pin, GPIO.OUT)
 
        for i in range(self.__number_of_leds):
            self.setColorRGB(i, 0, 0, 0)
 
    def clk(self):
        GPIO.output(self.__clk_pin, GPIO.LOW)
        time.sleep(0.00002)
        GPIO.output(self.__clk_pin, GPIO.HIGH)
        time.sleep(0.00002)
 
    def sendByte(self, b):
        &amp;quot;Send one bit at a time, starting with the MSB&amp;quot;
        for i in range(8):
            # If MSB is 1, write one and clock it, else write 0 and clock
            if (b &amp;amp; 0x80) != 0:
                GPIO.output(self.__data_pin, GPIO.HIGH)
            else:
                GPIO.output(self.__data_pin, GPIO.LOW)
            self.clk()
 
            # Advance to the next bit to send
            b = b &amp;lt;&amp;lt; 1
 
    def sendColor(self, red, green, blue):
        &amp;quot;Start by sending a byte with the format &#39;1 1 /B7 /B6 /G7 /G6 /R7 /R6&#39; &amp;quot;
        #prefix = B11000000
        prefix = 0xC0
        if (blue &amp;amp; 0x80) == 0:     
            #prefix |= B00100000
            prefix |= 0x20
        if (blue &amp;amp; 0x40) == 0:     
            #prefix |= B00010000
            prefix |= 0x10
        if (green &amp;amp; 0x80) == 0:    
            #prefix |= B00001000
            prefix |= 0x08
        if (green &amp;amp; 0x40) == 0:    
            #prefix |= B00000100
            prefix |= 0x04
        if (red &amp;amp; 0x80) == 0:      
            #prefix |= B00000010
            prefix |= 0x02
        if (red &amp;amp; 0x40) == 0:      
            #prefix |= B00000001
            prefix |= 0x01
        self.sendByte(prefix)
 
        # Now must send the 3 colors
        self.sendByte(blue)
        self.sendByte(green)
        self.sendByte(red)
 
    def setColorRGB(self, led, red, green, blue):
        # Send data frame prefix (32x &#39;0&#39;)
        self.sendByte(0x00)
        self.sendByte(0x00)
        self.sendByte(0x00)
        self.sendByte(0x00)
 
        # Send color data for each one of the leds
        for i in range(self.__number_of_leds):
            &#39;&#39;&#39;
            if i == led:
                _led_state[i*3 + _CL_RED] = red;
                _led_state[i*3 + _CL_GREEN] = green;
                _led_state[i*3 + _CL_BLUE] = blue;
            sendColor(_led_state[i*3 + _CL_RED], 
                      _led_state[i*3 + _CL_GREEN], 
                      _led_state[i*3 + _CL_BLUE]);
            &#39;&#39;&#39;
            self.sendColor(red, green, blue)
 
        # Terminate data frame (32x &amp;quot;0&amp;quot;)
        self.sendByte(0x00)
        self.sendByte(0x00)
        self.sendByte(0x00)
        self.sendByte(0x00)
 
 
# Note: Use P9_22(UART2_RXD) and P9_21(UART2_TXD) as GPIO.
# Connect the Grove - Chainable RGB LED to UART Grove port of Beaglebone Green.
if __name__ == &amp;quot;__main__&amp;quot;:
    rgb_led = ChainableLED(CLK_PIN, DATA_PIN, NUMBER_OF_LEDS)
 
    while True:
        # The first parameter: NUMBER_OF_LEDS - 1; Other parameters: the RGB values.
        rgb_led.setColorRGB(0, 255, 0, 0)
        time.sleep(2)
        rgb_led.setColorRGB(0, 0, 255, 0)
        time.sleep(2)
        rgb_led.setColorRGB(0, 0, 0, 255)
        time.sleep(2)
        rgb_led.setColorRGB(0, 0, 255, 255)
        time.sleep(2)
        rgb_led.setColorRGB(0, 255, 0, 255)
        time.sleep(2)
        rgb_led.setColorRGB(0, 255, 255, 0)
        time.sleep(2)
        rgb_led.setColorRGB(0, 255, 255, 255)
        time.sleep(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step4:&lt;/strong&gt; Save the file by clicking the disk icon and giving the file a name with the .py extension.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step5:&lt;/strong&gt; Connect Grove Chainable RGB LED to Grove UART socket on BBG.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step6:&lt;/strong&gt; Run the code. You&amp;rsquo;ll find the RGB LED is changing color every 2 seconds.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Chainable_RGB_LED/master/res/Chainable_RGB_LED_eagle_file.zip&#34;&gt;Chainable RGB LED eagle file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Chainable_RGB_LED/master/res/P9813_datasheet.pdf&#34;&gt;P9813 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pjpmarques/ChainableLED&#34;&gt;Chainable RGB LED Library for the P9813&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Chainable_RGB_LED&#34;&gt;Github repository for Chainable RGB LED Library (new)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Chainable_RGB_LED --&gt;
</description>
    </item>
    
  </channel>
</rss>