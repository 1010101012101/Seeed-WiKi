<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</title>
    <link>http://wiki.seeed.cc/tags/grove_digital-io_3v3-io_5v-plat_duino-plat_linkit-plat_pi-plat_bbg/index.xml</link>
    <description>Recent content on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wiki.seeed.cc/tags/grove_digital-io_3v3-io_5v-plat_duino-plat_linkit-plat_pi-plat_bbg/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grove - Collision Sensor</title>
      <link>http://wiki.seeed.cc/Grove-Collision_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Collision_Sensor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Collision_Sensor/master/img/Grove_–_Collision_Sensor_photo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - Collision Sensor can detect whether any collision movement or vibration happens. It will output a low pulse signal when vibration is detected. To make the output signal more reliable and neat, we added a necessary exterior circuit to reduce the noise impact. So, normal shaking will not cause any output. The sensor has a high sensitivity. You can use it to apply to your project, such as automatic wake-up and power-down for battery management.&lt;/p&gt;

&lt;p&gt;Its working voltage is 5V which makes it compatible with standard Arduino/Seeeduino 5V system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Collision-Sensor-p-1132.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Voltage: 3.3/5V&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Based on the output signal will change when a collision happens, we design this demo: each time the sensor detects collision, the LED will light up. Here the LED is as a managed device, and you can refer to the demo to control your device, such as bicycle light.&lt;/p&gt;

&lt;p&gt;The procedure is as follows:&lt;/p&gt;

&lt;p&gt;1.Connect the collision sensor to the Digital port 2 of Grove - Basic Shield using a Grove cable and connect an LED to Pin 13.&lt;/p&gt;

&lt;p&gt;2.Plug the Grove - Basic Shield into Arduino.&lt;/p&gt;

&lt;p&gt;3.Connect Arduino/Seeeduino to PC by using a USB cable.&lt;/p&gt;

&lt;p&gt;4.Copy and paste code below to a new Arduino sketch. And upload it to your Arduino.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Test Grove - Collision Sensor
#define LED 13 //the onboard LED of Arduino or Seeeduino
#define COLLISION_SENSOR 2//collision sensor is connected with D2 of Arduino

void setup()
{
    pins_init();
}

void loop()
{
    if(isTriggered())
    {
        turnOnLED();
        delay(2000);
    }
    else turnOffLED();
}

void pins_init()
{
    pinMode(LED,OUTPUT);
    turnOffLED();
    pinMode(COLLISION_SENSOR,INPUT);
}

boolean isTriggered()
{
    if(!digitalRead(COLLISION_SENSOR))
    {
        delay(50);
        if(!digitalRead(COLLISION_SENSOR))
        return true;//the collision sensor triggers
    }
    return false;
}

void turnOnLED()
{
    digitalWrite(LED,HIGH);//the LED is on
}

void turnOffLED()
{
    digitalWrite(LED,LOW);//the LED is off
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Now you can check the status of LED. The LED should light up every time you drum fingers on the table.&lt;/p&gt;

&lt;p&gt;You can adjust the sensor sensitivity by changing the function delay(50) in code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if(!digitalRead(COLLISION_SENSOR))
{
    return true;//the collision sensor triggers
}
return false;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have got a raspberry pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket D2 by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see the code&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;nano grove_collision_sensor.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import time
import grovepi

# Connect the Grove Collision Sensor to digital port D2
# SIG,NC,VCC,GND
collision_sensor = 2

grovepi.pinMode(collision_sensor,&amp;quot;INPUT&amp;quot;)

while True:
    try:
        print grovepi.digitalRead(collision_sensor)
        time.sleep(.5)

    except IOError:
        print &amp;quot;Error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Run the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo python grove_collision_sensor.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Collision_Sensor/master/res/Grove-Collision_Sensor_eagle_file.zip&#34;&gt;Grove - Collision Sensor Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Collision_Sensor/master/res/DataSheet-MVS0608_02-v2_1.pdf&#34;&gt;MVS0608.02 datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Collision_Sensor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - FM Receiver</title>
      <link>http://wiki.seeed.cc/Grove-FM_Receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-FM_Receiver/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-FM_Receiver/master/img/Grove_FM_Receiver_Photo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - FM Receiver is a wideband FM receiver module, this module is base on SX6119, it offers true single-chip voice FM receiver, which is built-in amplifier, VCO, filter and demodulator. The multifunction button provides greater convenience for users to control.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-FM-Receiver-p-1841.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grove interface&lt;/li&gt;
&lt;li&gt;FM receiver with a tuning range of 64 MHz to 108 MHz covering Eastern Europe (OIRT), Japan, Europe and US bands&lt;/li&gt;
&lt;li&gt;Lower power consumption&lt;/li&gt;
&lt;li&gt;Multifunction button&lt;/li&gt;
&lt;li&gt;LED Indicator&lt;/li&gt;
&lt;li&gt;Headsets interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-FM_Receiver/master/img/Grove-FM_v2.0_Top.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;①：Headsets interface:It can drive 16 ohm or 32 ohm earphone or audio。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;②：Multifunction button ：Change volume and select channel&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Center：Open FM/Close FM（Keeping press 1S）&lt;/li&gt;
&lt;li&gt;Up：volume add&lt;/li&gt;
&lt;li&gt;Down：volume sub&lt;/li&gt;
&lt;li&gt;Left：searching down&lt;/li&gt;
&lt;li&gt;Right：searching up&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;③：Grove Interface&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;④：LED Indicator&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FM Close：LED off&lt;/li&gt;
&lt;li&gt;FM Open：LED light&lt;/li&gt;
&lt;li&gt;FM Searching：LED flash&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Part list：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grove - USB Power&lt;/li&gt;
&lt;li&gt;Grove - FM Receiver&lt;/li&gt;
&lt;li&gt;Mini Cable&lt;/li&gt;
&lt;li&gt;Audio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-FM_Receiver/master/img/Grove-FM_Receiver_Photo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-FM_Receiver/master/res/Grove-FM_Receiver_v1.0_eagle.zip&#34;&gt;Grove - FM Receiver Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-FM_Receiver/master/res/Grove-FM_Receiver_v1.0_sch_pdf.pdf&#34;&gt;Schematic in pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-FM_Receiver/master/res/SX6119_收音IC_datasheet.pdf&#34;&gt;Datasheet of SX6119&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_FM_Receiver --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - GSR Sensor</title>
      <link>http://wiki.seeed.cc/Grove-GSR_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-GSR_Sensor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/img/GSR.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GSR, standing for galvanic skin response, is a method of measuring the electrical conductance of the skin. Strong emotion can cause stimulus to your sympathetic nervous system, resulting more sweat being secreted by the sweat glands. Grove – GSR allows you to spot such strong emotions by simple attaching two electrodes to two fingers on one hand, an interesting gear to create emotion related projects, like sleep quality monitor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-GSR-sensor-p-1614.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Input Voltage: 5V/3.3V&lt;/li&gt;
&lt;li&gt;Sensitivity adjustable via a potentiometer&lt;/li&gt;
&lt;li&gt;External measuring finger cots&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;connection&#34;&gt;Connection&lt;/h3&gt;

&lt;p&gt;Here we will show you how this Grove - GSR works via a simple demo. First of all, we need to prepare the below stuffs:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Seeeduino V4&lt;/th&gt;
&lt;th&gt;Grove - GSR&lt;/th&gt;
&lt;th&gt;Base Shield&lt;/th&gt;
&lt;th&gt;Grove-RGB LCD Backlight&lt;/th&gt;
&lt;th&gt;Grove-Buzzer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove_Light_Sensor/master/images/gs_1.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/img/Grove-GSR_s.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove_Light_Sensor/master/images/gs_4.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/img/Grove%20-%20LCD%20RGB%20Backlight_s.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/img/Grove-Button_s.jpg&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.seeedstudio.com/Seeeduino-V4.2-p-2517.html&#34;&gt;Get ONE Now&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-GSR-sensor-p-1614.html&#34;&gt;Get ONE Now&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.seeedstudio.com/Base-Shield-V2-p-1378.html&#34;&gt;Get ONE Now&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-LCD-RGB-Backlight-p-1643.html&#34;&gt;Get ONE Now&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-Buzzer-p-768.html&#34;&gt;Get ONE Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Connect the Grove-GSR to &lt;strong&gt;A2&lt;/strong&gt; on the Grove - Base Shield by using a Grove Universal 4 pin cable.&lt;/li&gt;
&lt;li&gt;Connect the Grove-Buzzer to &lt;strong&gt;D3&lt;/strong&gt; on the Grove - Base Shield by using a Grove Universal 4 pin cable.&lt;/li&gt;
&lt;li&gt;Connect the Grove-RGB LCD Backlight to &lt;strong&gt;I2C&lt;/strong&gt; on the Grove - Base Shield by using a Grove Universal 4 pin cable.&lt;/li&gt;
&lt;li&gt;Plug the base Shield into Seeeduino-V4.&lt;/li&gt;
&lt;li&gt;Connect Seeeduino-V4 to PC by using a USB cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/img/GSR_arduino_connection.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;!!!Note
    If you don&amp;rsquo;t have a Base Shield, don&amp;rsquo;t worry, the sensor can be connected to your Arduino directly. Please follow below tables to connect with Arduino.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Grove-GSR Sensor&lt;/th&gt;
&lt;th&gt;Arduino&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SIG&lt;/td&gt;
&lt;td&gt;A2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;No connection&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Grove-Buzzer&lt;/th&gt;
&lt;th&gt;Arduino&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SIG&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;No connection&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Grove - LCD RGB Backlight&lt;/th&gt;
&lt;th&gt;Arduino Uno&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SDA&lt;/td&gt;
&lt;td&gt;A4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SCL&lt;/td&gt;
&lt;td&gt;A5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As a reference the table below shows where I2C pins are located on various Arduino boards.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Board&lt;/th&gt;
&lt;th&gt;I2C  pins&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Uno, Ethernet&lt;/td&gt;
&lt;td&gt;A4 (SDA), A5 (SCL)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Mega2560&lt;/td&gt;
&lt;td&gt;20 (SDA), 21 (SCL)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Leonardo&lt;/td&gt;
&lt;td&gt;2 (SDA), 3 (SCL)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Due&lt;/td&gt;
&lt;td&gt;20 (SDA), 21 (SCL), SDA1, SCL1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;software&#34;&gt;Software&lt;/h3&gt;

&lt;p&gt;We need to download Grove_LCD_RGB_Backlight library and install to your Arduino IDE.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Please follow &lt;a href=&#34;http://wiki.seeed.cc/How_to_install_Arduino_Library/&#34;&gt;how to install an arduino library&lt;/a&gt; procedures to install LCD RGB Backlight library.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_LCD_RGB_Backlight/archive/master.zip&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove_LCD_RGB_Backlight/master/images/library.png&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy and paste the code below to a new Arduino sketch and upload it to Arduino.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Wire.h&amp;gt;
#include &amp;quot;rgb_lcd.h&amp;quot;

    const int BUZZER=3;
    const int GSR=A2;
    int threshold=0;
    int sensorValue;
    rgb_lcd lcd;

    void setup(){
      long sum=0;
      lcd.begin(16, 2);
      Serial.begin(9600);
      pinMode(BUZZER,OUTPUT);
      digitalWrite(BUZZER,LOW);
      delay(1000);

      for(int i=0;i&amp;lt;500;i++)
      {
      sensorValue=analogRead(GSR);
      sum += sensorValue;
      delay(5);
      }
      threshold = sum/500;
       Serial.print(&amp;quot;threshold =&amp;quot;);
       Serial.println(threshold);
      }

    void loop(){
      int temp;
      sensorValue=analogRead(GSR);
      Serial.print(&amp;quot;sensorValue=&amp;quot;);
      Serial.println(sensorValue);
      lcd.setCursor(0, 0);
      lcd.print(&amp;quot;GSR Value: &amp;quot;);
      lcd.print(sensorValue);
      temp = threshold - sensorValue;
      if(abs(temp)&amp;gt;50)
      {
        sensorValue=analogRead(GSR);
        temp = threshold - sensorValue;
        if(abs(temp)&amp;gt;50){
        digitalWrite(BUZZER,HIGH);
        Serial.println(&amp;quot;YES!&amp;quot;);
        delay(3000);
        digitalWrite(BUZZER,LOW);
        delay(1000);}
      }
      }

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Wear the finger stretch and relax, we can see data from  Grove_LCD_RGB_Backlight and serial port:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/img/GSR_Result_Data.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then take a deep breath. The buzzer should trigger now. And an obvious change in the output value should be observed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;There are several graphs which are created in excel by using GSR data. We can open the &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/res/GSR_sensor_data.xls&#34;&gt;GSR sensor data&lt;/a&gt; to see the detail data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deep Breath&lt;/strong&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/img/Reference_graphs1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hungry&lt;/strong&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/img/Reference_graphs3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Relax&lt;/strong&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/img/Reference_graphs2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;My Boss is Coming&lt;/strong&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/img/Reference_graphs4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[Eagle]&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/res/Grove-GSR_Eagle_File.zip&#34;&gt;Grove - GSR v1.0 Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[PDF]&lt;/strong&gt; &lt;a href=&#34;https://github.com/SeeedDocument/Grove-GSR_Sensor/blob/master/res/Grove%20-%20GSR%20v1.0.pdf&#34;&gt;Grove-GSR v1.0 Sch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[PDF]&lt;/strong&gt; &lt;a href=&#34;https://github.com/SeeedDocument/Grove-GSR_Sensor/raw/master/res/Grove%20-%20GSR%20v1.0%20PCB.pdf&#34;&gt;Grove-GSR v1.0 PCB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Datasheet]&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/res/Lm324.pdf&#34;&gt;LM324 datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Document]&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-GSR_Sensor/master/res/GSR_sensor_data.xls&#34; title=&#34;File:GSR sensor data.xls&#34;&gt;GSR sensor data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_GSR_Sensor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - MOSFET</title>
      <link>http://wiki.seeed.cc/Grove-MOSFET/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-MOSFET/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-MOSFET/master/img/Mosfet_01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove – MOSFET enables you to control higher voltage project, say 15VDC, with low voltage, say 5V, on microcontroller. MOSFET is also a kind of switch, but its switching frequency can reach up to 5MHz, much faster than normal mechanical relay. There are two screw terminals on the board. One for outer power source and the other for device you want to control. Grove – MOSFET will pass the power from one end to another when closed. But if outer power source is absent, your device can still draw power from microcontroller via the Grove interface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-MOSFET-p-1594.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Working voltage: 5V&lt;/li&gt;
&lt;li&gt;Vin: 5 ~ 15V&lt;/li&gt;
&lt;li&gt;MOSFET Model: CJQ4435&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-MOSFET/master/img/MOSFET_Interface_Function.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vin: Accepts 5V ~ 15V power of which current is less than 2A.&lt;/p&gt;

&lt;p&gt;Vout: Attach actuators here.&lt;/p&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Here we demonstrate how to use Grove - MOSFET to control a motor. We provide power for it with external power source, but if your controlled device needs current smaller than 300mA, Seeeduino can totally support it and no extra power source needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-MOSFET/master/img/Static_image.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // demo of Grove - MOSFET
    // use pin 6 to control a motor

    int motorPin = 6;

    void setup()
    {
        Serial.begin(38400);
        pinMode(motorPin, OUTPUT);
        Serial.println(&amp;quot;Grove - MOSFET Test Demo!&amp;quot;);
    }

    void loop()
    {
        motorOnThenOffWithSpeed();
        motorAcceleration();
    }

    void motorOnThenOffWithSpeed()
    {
        int onSpeed  = 200;                         // a number between 0 (stopped) and 255 (full speed)
        int onTime   = 2500;
        int offSpeed = 50;                          // a number between 0 (stopped) and 255 (full speed)
        int offTime  = 1000;
        analogWrite(motorPin, onSpeed);
        delay(onTime);
        analogWrite(motorPin, offSpeed);
        delay(offTime);
    }

    void motorAcceleration()
    {
        int delayTime = 50;
        for(int i=0; i&amp;lt;256; i++)
        {
            analogWrite(motorPin, i);
            delay(delayTime);
        }

        for(int i=255; i&amp;gt;=0; i--)
        {
            analogWrite(motorPin, i);
            delay(delayTime);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have a raspberry pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket D6 by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To see the code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nano grove_mosfet.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import time
import grovepi

# Connect the Grove MOSFET to analog port D6
# SIG,NC,VCC,GND
mosfet = 6

grovepi.pinMode(mosfet,&amp;quot;OUTPUT&amp;quot;)
time.sleep(1)

while True:
    try:
        # Full speed
        grovepi.analogWrite(mosfet,255)
        print &amp;quot;full speed&amp;quot;
        time.sleep(2)

        # Half speed
        grovepi.analogWrite(mosfet,128)
        print &amp;quot;half speed&amp;quot;
        time.sleep(2)

        # Off
        grovepi.analogWrite(mosfet,0)
        print &amp;quot;off&amp;quot;
        time.sleep(2)

    except KeyboardInterrupt:
        grovepi.analogWrite(mosfet,0)
        break
    except IOError:
        print &amp;quot;Error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.Run the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo python grove_mosfet.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-MOSFET/master/res/Grove-MOSFET_Eagle_File.zip&#34;&gt;Grove - MOSFET Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SeeedDocument/Grove-MOSFET/raw/master/res/Grove%20-%20MOSFET%20.pdf&#34;&gt;Grove - MOSFET Schematic PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-MOSFET/master/res/CJQ4435.pdf&#34;&gt;CJQ4435 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/MOSFET&#34;&gt;MOSFET Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_MOSFET --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Switch(P)</title>
      <link>http://wiki.seeed.cc/Grove-Switch-P/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Switch-P/</guid>
      <description>

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Switch-P/master/img/SwitchP.jpg&#34;&gt;&lt;/td&gt;
        &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Switch-P/master/img/GroveSwitchP_01.jpg&#34;&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This Grove – Switch is a mini SPDT slide, great for “ON/OFF” situations. It is such a reliable switch of great build quality that we adopt it on many of our boards. You should stock some for your Grove prototyping system.&lt;/p&gt;

&lt;p&gt;What does “P” mean? “P” is for “panel mount” in this product.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Switch(P)-p-1252.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grove Interface&lt;/li&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Basic Grove element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Below is a simple example showing how to use a switch to turn on/off an LED.The working principle and use just the same as the &lt;a href=&#34;http://wiki.seeed.cc/Grove-Button&#34;&gt;Grove-Button&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect the Grove-LED to the Digital 13 of Grove - Basic Shield and connect the Grove -Switch(P) to the Digital 2 of &lt;a href=&#34;http://wiki.seeed.cc/Base_Shield_V2&#34;&gt;Grove-Base Shield&lt;/a&gt; with two Grove cables.&lt;/li&gt;
&lt;li&gt;Plug the Grove - Base Shield into Arduino and connect Arduino to PC by using a USB cable.&lt;/li&gt;
&lt;li&gt;Copy and paste code below to a new Arduino sketch.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;// constants won&#39;t change. They&#39;re used here to
// set pin numbers:
const int switchPin = 2;     // the number of the pushbutton pin
const int ledPin =  13;      // the number of the LED pin

// variables will change:
int switchState = 0;         // variable for reading the pushbutton status

void setup() {
    // initialize the LED pin as an output:
    //pinMode(ledPin, OUTPUT);
    // initialize the switch pin as an input:
    Serial.begin(9600);
    pinMode(switchPin, INPUT);
}
void loop(){
    // read the state of the switch value:
    switchState = digitalRead(switchPin);

    if (switchState == HIGH) {
        // turn LED on:
        // digitalWrite(ledPin, HIGH);
        Serial.println(&amp;quot;switch high!&amp;quot;);
    }
    else {
        // turn LED off:
        // digitalWrite(ledPin, LOW);
        Serial.println(&amp;quot;switch low&amp;quot;);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After uploading the code, you can see the led will light up when the switch is at &lt;strong&gt;high&lt;/strong&gt; side.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Switch-P/master/res/Grove-Switch-P-Eagle_File.zip&#34;&gt;Grove - Switch(P) Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://easyeda.com/Seeed/Grove_SwitchP-434f7707edf74f3c8eb0c4748fdccc5f&#34;&gt;Schematic at Easyeda&lt;/a&gt;
&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Switch(P) --&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Touch Sensor</title>
      <link>http://wiki.seeed.cc/Grove-Touch_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Touch_Sensor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Touch_Sensor/master/img/Grove-Touch_Sensor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - Touch Sensor enables you to replace press with touch. It can detect the change in capacitance when a finger is near by. That means no matter your finger directly touches the pad or just stays close to the pad, Grove - Touch Sensor would outputs HIGH also.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Touch-Sensor-p-747.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Operating Voltage: 2.0 - 5.5V&lt;/li&gt;
&lt;li&gt;Operating Current(Vcc=3V):1.5 - 3.0μA&lt;/li&gt;
&lt;li&gt;Operating Current(VDD=3V):3.5 - 7.0μA&lt;/li&gt;
&lt;li&gt;Output Response Time: 60 - 220mS&lt;/li&gt;
&lt;li&gt;Used Chipset: TTP223-BA6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Option features&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AHLB&lt;/th&gt;
&lt;th&gt;TOG&lt;/th&gt;
&lt;th&gt;LPMB&lt;/th&gt;
&lt;th&gt;MOTB&lt;/th&gt;
&lt;th&gt;SLRFTB&lt;/th&gt;
&lt;th&gt;RST&lt;/th&gt;
&lt;th&gt;Q&lt;/th&gt;
&lt;th&gt;OPDO&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Output Active High / Low&lt;/td&gt;
&lt;td&gt;Toggle mode&lt;/td&gt;
&lt;td&gt;Power Mode&lt;/td&gt;
&lt;td&gt;Max. On Time&lt;/td&gt;
&lt;td&gt;Sampling length&lt;/td&gt;
&lt;td&gt;RESET PIN&lt;/td&gt;
&lt;td&gt;CMOS Output&lt;/td&gt;
&lt;td&gt;Open Drain Mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Active High&lt;/td&gt;
&lt;td&gt;Disabled&lt;/td&gt;
&lt;td&gt;LOW&lt;/td&gt;
&lt;td&gt;Infinite&lt;/td&gt;
&lt;td&gt;1.6 msec&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Present&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Touch_Sensor/master/img/Touch_LED.jpg&#34; alt=&#34;&#34; /&gt;
This demo is going to show you how to turn on/off an LED.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo Code:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const int TouchPin=9;
const int ledPin=12;

void setup() {
    pinMode(TouchPin, INPUT);
    pinMode(ledPin,OUTPUT);
}

void loop() {
    int sensorValue = digitalRead(TouchPin);
    if(sensorValue==1)
    {
        digitalWrite(ledPin,HIGH);
    }
    else
    {
        digitalWrite(ledPin,LOW);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You should have a raspberry pi and a grovepi or grovepi+.&lt;/li&gt;
&lt;li&gt;You should have completed configuring the development environment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket D4 by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see the code&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    nano grove_touch_sensor.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    import time
    import grovepi

    # Connect the Grove Touch Sensor to digital port D4
    # SIG,NC,VCC,GND
    touch_sensor = 4

    grovepi.pinMode(touch_sensor,&amp;quot;INPUT&amp;quot;)

    while True:
        try:
            print grovepi.digitalRead(touch_sensor)
            time.sleep(.5)

        except IOError:
            print &amp;quot;Error&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Run the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo python grove_touch_sensor.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Touch_Sensor/master/res/Touch_sensor_Eagle_File.zip&#34;&gt;Eagle Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Touch_Sensor/master/res/TTP223.pdf&#34;&gt;TTP223pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Touch_Sensor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Vibration Motor</title>
      <link>http://wiki.seeed.cc/Grove-Vibration_Motor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Vibration_Motor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Vibration_Motor/master/img/Gvib.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a mini vibration motor suitable as a non-audible indicator. When the input is HIGH, the motor will vibrate just like your cell phone on silent mode.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Vibration-Motor-p-839.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;version-tracker&#34;&gt;Version Tracker&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Revision&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Release&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;v0.9b&lt;/td&gt;
&lt;td&gt;Initial public release&lt;/td&gt;
&lt;td&gt;May 10, 2011&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;v1.0&lt;/td&gt;
&lt;td&gt;Directly uses an I/O port to drive Vibration Motor&lt;/td&gt;
&lt;td&gt;Nov 5, 2011&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;v1.2&lt;/td&gt;
&lt;td&gt;Transistor added, uses bigger current to drive Vibration Motor&lt;/td&gt;
&lt;td&gt;July 11, 2013&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grove compatible&lt;/li&gt;
&lt;li&gt;Non-audible&lt;/li&gt;
&lt;li&gt;Low power consumption&lt;/li&gt;
&lt;li&gt;High reliability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;80%&#34;&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34;&gt;
Item
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Min
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Typ
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Max
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Operating Voltage
&lt;/th&gt;
&lt;td&gt;
3.0V
&lt;/td&gt;
&lt;td&gt;
5.0V
&lt;/td&gt;
&lt;td&gt;
5.5V
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Control Mode
&lt;/th&gt;
&lt;td colspan=&#34;3&#34; rowspan=&#34;1&#34;&gt;
Logic Level
(When Logic HIGH, the motor is ON. When LOW, the motor is OFF.)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Rated speed
&lt;/th&gt;
&lt;td colspan=&#34;3&#34; rowspan=&#34;1&#34;&gt;
9000 rpm
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;To make it vibrate is just as easy as to turn on an LED. Here is an example showing how to turn on the vibration motor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Plug it onto the Digital port 9 of Grove - Base Shield using a Grove cable.&lt;/li&gt;
&lt;li&gt;Plug the Grove - Base Shield onto Arduino.
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Vibration_Motor/master/img/IMG_0506.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Connect Arduino to PC by using a USB cable.&lt;/li&gt;
&lt;li&gt;Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Use the demo code shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int MoPin = 9;    // vibrator Grove connected to digital pin 9

void setup()  {
    pinMode( MoPin, OUTPUT );
}

void loop()  {

    digitalWrite(MoPin, HIGH);
    delay(1000);

    digitalWrite(MoPin, LOW);
    delay(1000);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, feel the vibration of your motor!&lt;/p&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have a Raspberry Pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket D8 by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see the code
&lt;code&gt;
nano grove_vibration_motor.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;
```
import time
import grovepi&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;connect-the-grove-vibration-motor-to-digital-port-d8&#34;&gt;Connect the Grove Vibration Motor to digital port D8&lt;/h1&gt;

&lt;h1 id=&#34;sig-nc-vcc-gnd&#34;&gt;SIG,NC,VCC,GND&lt;/h1&gt;

&lt;p&gt;vibration_motor = 8&lt;/p&gt;

&lt;p&gt;grovepi.pinMode(vibration_motor,&amp;ldquo;OUTPUT&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;while True:
    try:
        # Start vibrating for 1 second
        grovepi.digitalWrite(vibration_motor,1)
        print &amp;lsquo;start&amp;rsquo;
        time.sleep(1)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Stop vibrating for 1 second, then repeat
    grovepi.digitalWrite(vibration_motor,0)
    print &#39;stop&#39;
    time.sleep(1)

except KeyboardInterrupt:
    grovepi.digitalWrite(vibration_motor,0)
    break
except IOError:
    print &amp;quot;Error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5.Run the demo.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sudo python grove_vibration_motor.py
```&lt;/p&gt;

&lt;p&gt;##Project&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Seeeduino_Lotus/master/img/gun.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Inspired by OVERWATCH, we have made a very cool Wooden Laser Gun toy for fun these day!&lt;/p&gt;

&lt;p&gt;The Wooden Laser Gun and the Gun Target are all based on an Arduino board called Seeeduino Lotus. The laser emitter on the Laser Gun is controlled to fire laser pulse to &amp;ldquo;activate&amp;rdquo; the Gun Target. And there are 3 light sensors on the Gun Target to detect the laser pulse. It seems very simple right? If you are interested in our project, please make one for yourself or your child! It&amp;rsquo;s worth to spend one day DIY it as a Xmas present.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.instructables.com/id/DIY-a-Wooden-Laser-Gun-As-a-Xmas-Present-for-Your-/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Seeed-WiKi/master/docs/images/make.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Vibration_Motor/master/res/Grove-Vibration_Motor_Eagle_Files.zip&#34;&gt;Grove - Vibration Motor Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Vibration_Motor/master/res/S9013.pdf&#34;&gt;S9013 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Vibration_Motor/master/res/ANDA-B1020_datasheet.pdf&#34;&gt;ANDA-B1020 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Vibration_Motor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Water Sensor</title>
      <link>http://wiki.seeed.cc/Grove-Water_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Water_Sensor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Water_Sensor/master/img/Grove-Water_Sensor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Water Sensor module is part of the Grove system. It indicates whether the sensor is dry, damp or completely immersed in water by measuring conductivity. The sensor traces have a weak pull-up resistor of 1 MΩ. The resistor will pull the sensor trace value high until a drop of water shorts the sensor trace to the grounded trace. Believe it or not this circuit will work with the digital I/O pins of your Arduino or you can use it with the analog pins to detect the amount of water induced contact between the grounded and sensor traces.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-Water-Sensor-p-748.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grove compatible interface&lt;/li&gt;
&lt;li&gt;Low power consumption&lt;/li&gt;
&lt;li&gt;2.0cm x 2.0cm Grove module&lt;/li&gt;
&lt;li&gt;High sensitivity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;applications-ideas&#34;&gt;Applications Ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rainfall detecting&lt;/li&gt;
&lt;li&gt;Liquid leakage&lt;/li&gt;
&lt;li&gt;Tank overflow detector&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition caution&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Caution&lt;/p&gt;
This device is for educational and hobby applications only. It is not intended to be used in applications where its malfunction could result in damage to property or human safety.
&lt;/div&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;80%&#34;&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34;&gt;
Item
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Min
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Typical
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Max
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Unit
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Working Voltage
&lt;/th&gt;
&lt;td&gt;
4.75
&lt;/td&gt;
&lt;td&gt;
5.0
&lt;/td&gt;
&lt;td&gt;
5.25
&lt;/td&gt;
&lt;td&gt;
V
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Current
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
&amp;lt;20
&lt;/td&gt;
&lt;td&gt;
mA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Working Temperature
&lt;/th&gt;
&lt;td&gt;
10
&lt;/td&gt;
&lt;td&gt;
-
&lt;/td&gt;
&lt;td&gt;
30
&lt;/td&gt;
&lt;td&gt;
℃
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Working Humidity (without condensation)
&lt;/th&gt;
&lt;td&gt;
10
&lt;/td&gt;
&lt;td&gt;
-
&lt;/td&gt;
&lt;td&gt;
90
&lt;/td&gt;
&lt;td&gt;
 %
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Connect the module to the Basic board using any of the digital pin. You can gain the value of the signal pin. When there is water on the bare conducting wires, the value is LOW. Otherwise, it will be HIGH.&lt;/p&gt;

&lt;p&gt;The following sketch demonstrates a simple application of using the Water sensor to control the buzzer. As the picture on the below indicates, the Water sensor is connected to digital port 8 of the &lt;strong&gt;Grove - Base Shield&lt;/strong&gt; and the Buzzer is connected to digital port 12. When there is water on the bare conducting wires, the SIG pin output a LOW voltage. Then the Buzzer sounds. The hardware installation is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Water_Sensor/master/img/Water_Buzzer.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then connect Arduino to PC by using a USB cable.&lt;/li&gt;
&lt;li&gt;Copy and paste code below to a new Arduino sketch.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/*macro definition of water sensor and the buzzer*/
#define WATER_SENSOR 8
#define BUZZER 12

void setup()
{
    pins_init();
}
void loop()
{
    if(isExposedToWater())
    soundAlarm();
}

void pins_init()
{
    pinMode(WATER_SENSOR, INPUT);
    pinMode(BUZZER, OUTPUT);
}

/************************************************************************/
/*Function: When the sensor is exposed to the water, the buzzer sounds  */
/*          for 2 seconds.                                              */
/************************************************************************/
void soundAlarm()
{
    for(uint8_t i = 0;i &amp;lt; 20;i ++)
    {
        digitalWrite(BUZZER, HIGH);
        delay(50);
        digitalWrite(BUZZER, LOW);
        delay(50);
    }
}

/************************************************************************/
/*Function: Determine whether the sensor is exposed to the water        */
/*Parameter:-void                                                       */
/*Return:   -boolean,if it is exposed to the water,it will return true. */
/************************************************************************/
boolean isExposedToWater()
{
    if(digitalRead(WATER_SENSOR) == LOW)
    return true;
    else return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Upload the code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The buzzer sounds when the sensor is damp or completely immersed in water. Have a try!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have a raspberry pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket D2 by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see the code
&lt;code&gt;
nano grove_water_sensor.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;
```
import time
import grovepi&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;connect-the-grove-water-sensor-to-digital-port-d2&#34;&gt;Connect the Grove Water Sensor to digital port D2&lt;/h1&gt;

&lt;h1 id=&#34;sig-nc-vcc-gnd&#34;&gt;SIG,NC,VCC,GND&lt;/h1&gt;

&lt;p&gt;water_sensor = 2&lt;/p&gt;

&lt;p&gt;grovepi.pinMode(water_sensor,&amp;ldquo;INPUT&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;while True:
    try:
        print grovepi.digitalRead(water_sensor)
        time.sleep(.5)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;except IOError:
    print &amp;quot;Error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
5.Run the demo.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sudo python grove_water_sensor.py
```&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Water_Sensor/master/res/Water_sensor.zip&#34;&gt;Water Sensor Eagle Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Water_Sensor&#34;&gt;Demo code for Water Sensor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Water_Sensor --&gt;
</description>
    </item>
    
  </channel>
</rss>