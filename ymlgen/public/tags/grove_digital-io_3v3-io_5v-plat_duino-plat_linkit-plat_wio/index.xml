<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</title>
    <link>http://wiki.seeed.cc/tags/grove_digital-io_3v3-io_5v-plat_duino-plat_linkit-plat_wio/index.xml</link>
    <description>Recent content on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wiki.seeed.cc/tags/grove_digital-io_3v3-io_5v-plat_duino-plat_linkit-plat_wio/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grove - Encoder</title>
      <link>http://wiki.seeed.cc/Grove-Encoder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Encoder/</guid>
      <description>

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/img/Encoder2.jpg&#34;&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/img/Encoder_back.jpg&#34;&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This module is an incremental rotary encoder. It encodes the rotation signal from the axis and output the signal by electronic pulse. The Grove – Encoder is one of the Grove series and has a standard Grove interface.
When you need to add a rotary knob to your project, for example a volume knob for a speaker, a selection panel or a digital input, this will be your first choice.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-Encoder-p-1352.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Incremental encoder.&lt;/li&gt;
&lt;li&gt;Grove Interface.&lt;/li&gt;
&lt;li&gt;360 degree rotary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;
Item
&lt;/th&gt;
&lt;th&gt;
Min
&lt;/th&gt;
&lt;th&gt;
Typical
&lt;/th&gt;
&lt;th&gt;
Max
&lt;/th&gt;
&lt;th&gt;
Unit
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;td width=&#34;150&#34;&gt;
Voltage
&lt;/td&gt;
&lt;td width=&#34;100&#34;&gt;
4.5
&lt;/td&gt;
&lt;td width=&#34;100&#34;&gt;
5
&lt;/td&gt;
&lt;td width=&#34;100&#34;&gt;
5.5
&lt;/td&gt;
&lt;td width=&#34;100&#34;&gt;
V
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;td&gt;
Current
&lt;/td&gt;
&lt;td&gt;
10
&lt;/td&gt;
&lt;td&gt;
20
&lt;/td&gt;
&lt;td&gt;
30
&lt;/td&gt;
&lt;td&gt;
mA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;td&gt;
Dimension
&lt;/td&gt;
&lt;td colspan=&#34;3&#34;&gt;
20x 20
&lt;/td&gt;
&lt;td&gt;
mm
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;td&gt;
Net Weight
&lt;/td&gt;
&lt;td colspan=&#34;3&#34;&gt;
12
&lt;/td&gt;
&lt;td&gt;
g
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;This Grove-Encoder is very easy to use with the &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/res/Encoder.zip&#34;&gt;Encoder Lib&lt;/a&gt; designed by seeedstudio. Simply connect this module to the D2 connector of Base Shield and you can start using. The following is a introduction of how to make a Circular LED bar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This Circular LED bar consists of an Encoder and a &lt;a href=&#34;http://wiki.seeed.cc/Grove-Circular_LED&#34;&gt;Grove-CircularLED&lt;/a&gt; module. Connect the two modules to Base shield as the following picture:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/img/Cirhard.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the project, the &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/res/TimerOne.zip&#34;&gt;TimeOne Lib&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/res/Encoder.zip&#34;&gt;Encoder Lib&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/res/CircularLED.zip&#34;&gt;CircularLED Library&lt;/a&gt; are needed. Download all the librarys and install them to your Arduino IDE.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart the Arduino IDE and open the example by the path: File-&amp;gt;Examples-&amp;gt;Encoder-&amp;gt;EncodeCircuiBar.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;CircularLED.h&amp;gt;
#include &amp;lt;Encoder.h&amp;gt;
#include &amp;lt;TimerOne.h&amp;gt;
CircularLED circularLED;
unsigned int LED[24];
int index_LED;
void setup()
{
  encoder.Timer_init();
}
void loop()
{
    if (encoder.rotate_flag ==1)
  {
    if (encoder.direct==1)
    {
      index_LED++;
      if (index_LED&amp;gt;23)
      index_LED=24;
      SenttocircularBar(index_LED);
    }
     else
     {
      index_LED--;
      if(index_LED&amp;lt;0)
      index_LED=0;
      SenttocircularBar(index_LED);
     }
    encoder.rotate_flag =0;
  }
}
void SenttocircularBar(int index)
{
  for (int i=0;i&amp;lt;24;i++)
  {
    if (i&amp;lt;index)
    {
      LED[i]=0xff;
    }
    else
    LED[i]=0;
  }
  circularLED.CircularLEDWrite(LED);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Upload it to your Arduino/Seeeduino. You can see:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/img/EncoderAndCircular_LED.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
It is able to generate another signal when it is being pressed down. However due to the limitation of the number of Grove signal cables, the module is made without output of this signal.
&lt;/div&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/res/Encoder_Spe.zip&#34;&gt;Encoder Spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.arduino.cc/playground/Main/RotaryEncoders&#34;&gt;Demo in Arduino forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/res/TimerOne.zip&#34;&gt;TimeOne Lib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/res/Encoder.zip&#34;&gt;Encoder Lib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Encoder/master/res/Grove-Encoder_eagle_files.zip&#34;&gt;Grove-Encoder Eagle files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Encoder --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Infrared Reflective Sensor</title>
      <link>http://wiki.seeed.cc/Grove-Infrared_Reflective_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Infrared_Reflective_Sensor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-1.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grove - Infrared Reflective Sensor&lt;/strong&gt; is used to detect the presence of an object within a specific range. The sensor consists of an IR LED and a photosensor (phototransistor) pair. The light emitted by the IR LED gets reflected by any object placed in front of the sensor and this reflection is detected by the photosensor(phototransistor). Any white (or lighter) colored surface reflects more than black (or darker) colored surface.&lt;/p&gt;

&lt;p&gt;When the reflected light is detected, it produces &lt;strong&gt;Digital HIGH&lt;/strong&gt; (or Binary &lt;strong&gt;1&lt;/strong&gt;) output on the &lt;strong&gt;SIG&lt;/strong&gt; pin. The on-board LED indicator will also glow. If no reflection is detected or if the object is too far from the sensor, the output on the &lt;strong&gt;SIG&lt;/strong&gt; pin stays at &lt;strong&gt;Digital LOW&lt;/strong&gt; (Binary &lt;strong&gt;0&lt;/strong&gt;). The on-board LED indicator will be off as well. The detectable range of this sensor is 4–16 mm. The module incorporates a Rail-to-Rail Operational Amplifier to amplify the output of phototransistor. There is a potentiometer which can be used to adjust the gain of the amplifier, that is, sensitivity of detection.&lt;/p&gt;

&lt;p&gt;With this sensor, you can build the following (but not limited to) applications: &lt;strong&gt;line following robots&lt;/strong&gt;, &lt;strong&gt;optical encoders&lt;/strong&gt; and &lt;strong&gt;object counting applications&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Infrared-Reflective-Sensor-p-1230.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;admonition caution&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Caution&lt;/p&gt;
This product is also mildly sensitive to non-IR radiations and hence any bright light on photosensor impairs or disturbs IR light detection.
&lt;/div&gt;

&lt;h2 id=&#34;version-tracker&#34;&gt;Version Tracker&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Product version&lt;/th&gt;
&lt;th&gt;Release date&lt;/th&gt;
&lt;th&gt;Support status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Versions older than v1.2&lt;/td&gt;
&lt;td&gt;June 2012‎&lt;/td&gt;
&lt;td&gt;Not supported&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Version 1.2(current version)&lt;/td&gt;
&lt;td&gt;April 2016&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grove compatible and easy to use&lt;/li&gt;
&lt;li&gt;Highly sensitive and reliable&lt;/li&gt;
&lt;li&gt;Small footprint&lt;/li&gt;
&lt;li&gt;Adjustable sensitivity for different occasions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Operating voltage(V)&lt;/td&gt;
&lt;td&gt;4.5–5.5V&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Operating current(mA)&lt;/td&gt;
&lt;td&gt;14.69–15.35 mA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Effective detectable distance&lt;/td&gt;
&lt;td&gt;0.5–4.5 cm&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Response time&lt;/td&gt;
&lt;td&gt;10 μs&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Phototransistor: Peak sensitivity wavelength&lt;/td&gt;
&lt;td&gt;800 nm&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IR LED: Peak light emitting wavelength&lt;/td&gt;
&lt;td&gt;940 nm&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Reflective photosensor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/res/RPR-220.pdf&#34;&gt;datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Output operational amplifiers&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/res/LMV358_datasheet.pdf&#34;&gt;datasheet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Weight&lt;/td&gt;
&lt;td&gt;4 g&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
If no version number is mentioned for a specific platform, it means this product supports all versions within this platform. But, you will need additional Grove Shield like Grove - Base shield v2 board.
&lt;/div&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Grove-Infrared_Reflective_Sensor_v1.2_hardware_overview_1200_z.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RPR220 Reflective photosensor&lt;/strong&gt;, Highly sensitive reflective photosensor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LMV358&lt;/strong&gt;, rail-to-rail operational amplifier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LED Indicator&lt;/strong&gt;, The LED will switch on when the received infrared light intensity exceeds a preset level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Light sensitivity adjustment potentiometer&lt;/strong&gt; , adjust the sensitivity of photosensor to light.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;package-includes&#34;&gt;&lt;strong&gt;Package includes&lt;/strong&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parts name&lt;/th&gt;
&lt;th&gt;Quantity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Grove - Infrared Reflective Sensor&lt;/td&gt;
&lt;td&gt;1 piece&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-Universal-4-Pin-Buckled-5cm-Cable-5-PCs-Pack-p-925.html?cPath=98_106_57&#34;&gt;Grove cable&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 piece&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Let us see how to implement few basic applications with this module:&lt;/p&gt;

&lt;h3 id=&#34;with-arduino&#34;&gt;With Arduino&lt;/h3&gt;

&lt;h4 id=&#34;materials-required&#34;&gt;Materials required&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Grove - Infrared Reflective Sensor × 1&lt;/li&gt;
&lt;li&gt;Arduino UNO (other compatible boards) × 1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-Universal-4-Pin-Buckled-5cm-Cable-5-PCs-Pack-p-925.html?cPath=98_106_57&#34;&gt;Grove cable&lt;/a&gt; × 1&lt;/li&gt;
&lt;li&gt;Grove - Base Shield × 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;line-following&#34;&gt;Line Following&lt;/h4&gt;

&lt;p&gt;This sensor can be used to help a robotic car follow a black line.&lt;/p&gt;

&lt;p&gt;1.Adjusting&lt;/p&gt;

&lt;p&gt;Place the sensor such that there is 12mm between reflective photosensor and white (or light) colored surface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-4.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2.Adjust the potentiometer with a screwdriver to change the sensitivity of reflective photosensor, until the LED indicator glows. As your rotate clockwise, the reflective photosensor will be more sensitive to light.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
Use a proper screw-driver to adjust the tiny potentiometer. Applying heavy pressure or frequent adjustments might damage the wiper of the potentiometer.
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-5.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3.By maintaining the vertical distance, move the sensor horizontally above the black line. The indicator LED must go off over the black line. If it is still on, adjust the potentiometer until it is off.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-6.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-7.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;rotary-speed-detection&#34;&gt;Rotary Speed Detection&lt;/h4&gt;

&lt;p&gt;Let us implement simple optical encoder to detect the speed of a motor&lt;/p&gt;

&lt;p&gt;1.Connect the Infrared Reflective Sensor to the D2 port of Grove - Base Shield like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-11.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2.Attach a round, white paper plate (with a black line marked on it) to the motor. Place the sensor near this rotatory encoder. Run the motor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-8.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-9.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3.Download the library &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/res/TimerOne-ArduinoLib.zip&#34;&gt;Arduino timer1 &lt;em&gt;library&lt;/em&gt;&lt;/a&gt; and add it into the libraries file of Arduino IDE. A &lt;a href=&#34;http://wiki.seeed.cc/Guide_to_use_demos_downloaded_from_Seeed&#39;s_Github&#34;&gt;guide&lt;/a&gt; about how to run our demo code.&lt;/p&gt;

&lt;p&gt;4.Upload the demo code to your Arduino/Seeeduino.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unsigned int counter=0;
void blink()
{
    counter++;
}
void timerIsr()
{
    Timer1.detachInterrupt();  //disable the timer1
    Serial.print(&amp;quot;The speed of the motor: &amp;quot;);
    Serial.print(counter,DEC);
    Serial.println(&amp;quot;round/s&amp;quot;);
    counter=0;
    Timer1.attachInterrupt( timerIsr );  //enable the timer1
}
void setup()
{
    Serial.begin(9600);
    Timer1.initialize(1000000); // set a timer of length 1sec
    attachInterrupt(0, blink, RISING);  //INT0
    Timer1.attachInterrupt( timerIsr ); // attach the service routine here
}
void loop()
{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Open the Serial Monitor to read the data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-10.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/img/Infrared_Reflective_Sensor-12.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;h4 id=&#34;material-required&#34;&gt;Material required&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi (other models also are fine) × 1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/GrovePi-p-1672.html?cPath=73&#34;&gt;Grovepi&lt;/a&gt; or &lt;a href=&#34;http://www.seeedstudio.com/depot/GrovePi-p-2241.html?cPath=122_154_158&#34;&gt;Grovepi+&lt;/a&gt; × 1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-Universal-4-Pin-Buckled-5cm-Cable-5-PCs-Pack-p-925.html?cPath=98_106_57&#34;&gt;Grove cable&lt;/a&gt; × 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hardware-connections-and-software-work&#34;&gt;Hardware Connections and Software Work&lt;/h4&gt;

&lt;p&gt;1.You should have a Raspberry Pi and a GrovePi or GrovePi+. In this demo, we use GrovePi.&lt;/p&gt;

&lt;p&gt;2.We assume you have built the development environment successfully. If not, follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection: Plug Grove - Infrared Reflective Sensor into port D4 on GrovePi with &lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-Universal-4-Pin-Buckled-5cm-Cable-5-PCs-Pack-p-925.html?cPath=98_106_57&#34;&gt;Grove cable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory, run the following command in a terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the command in a terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    nano grove\_infrared\_reflective\_sensor.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy and save the following code into it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time
import grovepi
 
# Connect the Grove Infrared Reflective Sensor to digital port D4
# SIG,NC,VCC,GND
sensor = 4
 
grovepi.pinMode(sensor,&amp;quot;INPUT&amp;quot;)
 
while True:
    try:
        # Sensor returns HIGH on a black surface and LOW on a white surface
        if grovepi.digitalRead(sensor) == 1:
            print &amp;quot;black surface detected&amp;quot;
        else:
            print &amp;quot;white surface detected&amp;quot;
 
        time.sleep(.5)
 
    except IOError:
        print &amp;quot;Error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.To run the demo, execute the following command in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo python grove\_infrared\_reflective\_sensor.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/res/Grove-Infrared_Reflective_Sensor_v1.0_SourceFile.zip&#34;&gt;Grove-Infrared Reflective Sensor Eagle Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/res/TimerOne-ArduinoLib.zip&#34;&gt;Arduino Timer1 Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/res/RPR220_datasheet.pdf&#34;&gt;RPR220 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/res/LMV358_datasheet.pdf&#34;&gt;Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Reflective_Sensor/master/res/Grove-Infrared_Reflective_Sensor_v1.0_SourceFile.zip&#34;&gt;Schematic file of version 1.0 for this product&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Infrared_Reflective_Sensor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - LED Bar</title>
      <link>http://wiki.seeed.cc/Grove-LED_Bar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-LED_Bar/</guid>
      <description>

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-LED_Bar/master/img/Grove-LED_Bar-1.jpg&#34;&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-LED_Bar/master/img/Grove-LED_Bar-2.jpg&#34;&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Grove – LED Bar is comprised of a 10 segment LED gauge bar and an MY9221 LED controlling chip. It can be used as an indicator for remaining battery life, voltage, water level, music volume or other values that require a gradient display. There are 10 LED bars in the LED bar graph: one red, one yellow, one light green, and seven green bars. Demo code is available to get you up and running quickly. It lights up the LEDs sequentially from red to green, so the entire bar graph is lit up in the end. Want to go further? Go ahead and code your own effect.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-LED-Bar-p-1178.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Input Voltage: 3.3V/5V&lt;/li&gt;
&lt;li&gt;Each LED segment can be controlled individually via code&lt;/li&gt;
&lt;li&gt;Intuitive display&lt;/li&gt;
&lt;li&gt;Flexible power option, supports 3-5.5DC&lt;/li&gt;
&lt;li&gt;Available demo code&lt;/li&gt;
&lt;li&gt;Suli-compatible Library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
More details about Suli-compatible Library, please refer to &lt;a href=&#34;http://wiki.seeed.cc/Suli&#34;&gt;Suli&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This is a simple demo which can you help you to start with Grove - LED Bar quickly.&lt;/p&gt;

&lt;p&gt;We need a &lt;a href=&#34;http://www.seeedstudio.com/depot/seeeduino-v30-atmega-328p-p-669.html?cPath=6_7&#34;&gt;Seeeduino V3.0&lt;/a&gt; and a &lt;strong&gt;Grove - Base Shield&lt;/strong&gt; as well.&lt;/p&gt;

&lt;h4 id=&#34;hardware-installation&#34;&gt;Hardware Installation&lt;/h4&gt;

&lt;p&gt;Plug the Grove - LED Bar onto the digital port 8 on Grove - Base Shield, and then plug the base shield onto Arduino.&lt;/p&gt;

&lt;h4 id=&#34;download-code-and-upload&#34;&gt;Download Code and Upload&lt;/h4&gt;

&lt;p&gt;You can download the library in github, click &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_LED_Bar&#34;&gt;here&lt;/a&gt;, then extract it to libraries folder of Arduino.&lt;/p&gt;

&lt;p&gt;Then open Arduino IDE, File -&amp;gt; examples -&amp;gt; LED_Bar -&amp;gt; Level, you can open the demo code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-LED_Bar/master/img/LED_BAR_IDE.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click Upload to Upload the code, if you have any problem about how to start Arduino, please click &lt;a href=&#34;http://wiki.seeed.cc/Getting_Started_with_Seeeduino&#34;&gt;here&lt;/a&gt; for some help.&lt;/p&gt;

&lt;h4 id=&#34;working-now&#34;&gt;Working Now&lt;/h4&gt;

&lt;p&gt;Your Grove - LED Bar is working now, it&amp;rsquo;s shine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-LED_Bar/master/img/LED_Bar_shining.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have got a raspberry pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket D3 by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To see the code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nano grove_ledbar.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import time
import grovepi
import random

# Connect the Grove LED Bar to digital port D5
# DI,DCKI,VCC,GND
ledbar = 5

grovepi.pinMode(ledbar,&amp;quot;OUTPUT&amp;quot;)
time.sleep(1)
i = 0

# LED Bar methods
# grovepi.ledBar_init(pin,orientation)
# grovepi.ledBar_orientation(pin,orientation)
# grovepi.ledBar_setLevel(pin,level)
# grovepi.ledBar_setLed(pin,led,state)
# grovepi.ledBar_toggleLed(pin,led)
# grovepi.ledBar_setBits(pin,state)
# grovepi.ledBar_getBits(pin)

while True:
    try:
        print &amp;quot;Test 1) Initialise - red to green&amp;quot;
        # ledbar_init(pin,orientation)
        # orientation: (0 = red to green, 1 = green to red)
        grovepi.ledBar_init(ledbar, 0)
        time.sleep(.5)


        print &amp;quot;Test 2) Set level&amp;quot;
        # ledbar_setLevel(pin,level)
        # level: (0-10)
        for i in range(0,11):
            grovepi.ledBar_setLevel(ledbar, i)
            time.sleep(.2)
        time.sleep(.3)

        grovepi.ledBar_setLevel(ledbar, 8)
        time.sleep(.5)

        grovepi.ledBar_setLevel(ledbar, 2)
        time.sleep(.5)

        grovepi.ledBar_setLevel(ledbar, 5)
        time.sleep(.5)


        print &amp;quot;Test 3) Switch on/off a single LED&amp;quot;
        # ledbar_setLed(pin,led,state)
        # led: which led (1-10)
        # state: off or on (0,1)
        grovepi.ledBar_setLed(ledbar, 10, 1)
        time.sleep(.5)

        grovepi.ledBar_setLed(ledbar, 9, 1)
        time.sleep(.5)

        grovepi.ledBar_setLed(ledbar, 8, 1)
        time.sleep(.5)

        grovepi.ledBar_setLed(ledbar, 1, 0)
        time.sleep(.5)

        grovepi.ledBar_setLed(ledbar, 2, 0)
        time.sleep(.5)

        grovepi.ledBar_setLed(ledbar, 3, 0)
        time.sleep(.5)


        print &amp;quot;Test 4) Toggle a single LED&amp;quot;
        # flip a single led - if it is currently on, it will become off and vice versa
        # ledbar_toggleLed(ledbar, led)
        grovepi.ledBar_toggleLed(ledbar, 1)
        time.sleep(.5)

        grovepi.ledBar_toggleLed(ledbar, 2)
        time.sleep(.5)

        grovepi.ledBar_toggleLed(ledbar, 9)
        time.sleep(.5)

        grovepi.ledBar_toggleLed(ledbar, 10)
        time.sleep(.5)


        print &amp;quot;Test 5) Set state - control all leds with 10 bits&amp;quot;
        # ledbar_setBits(ledbar, state)
        # state: (0-1023) or (0x00-0x3FF) or (0b0000000000-0b1111111111) or (int(&#39;0000000000&#39;,2)-int(&#39;1111111111&#39;,2))
        for i in range(0,32):
            grovepi.ledBar_setBits(ledbar, i)
            time.sleep(.2)
        time.sleep(.3)


        print &amp;quot;Test 6) Get current state&amp;quot;
        # state = ledbar_getBits(ledbar)
        # state: (0-1023) a bit for each of the 10 LEDs
        state = grovepi.ledBar_getBits(ledbar)
        print &amp;quot;with first 5 leds lit, the state should be 31 or 0x1F&amp;quot;
        print state

        # bitwise shift five bits to the left
        state = state &amp;lt;&amp;lt; 5
        # the state should now be 992 or 0x3E0
        # when saved the last 5 LEDs will be lit instead of the first 5 LEDs
        time.sleep(.5)


        print &amp;quot;Test 7) Set state - save the state we just modified&amp;quot;
        # ledbar_setBits(ledbar, state)
        # state: (0-1023) a bit for each of the 10 LEDs
        grovepi.ledBar_setBits(ledbar, state)
        time.sleep(.5)


        print &amp;quot;Test 8) Swap orientation - green to red - current state is preserved&amp;quot;
        # ledbar_orientation(pin,orientation)
        # orientation: (0 = red to green, 1 = green to red)
        # when you reverse the led bar orientation, all methods know how to handle the new LED index
        # green to red
        grovepi.ledBar_orientation(ledbar, 1)
        time.sleep(.5)

        # red to green
        grovepi.ledBar_orientation(ledbar, 0)
        time.sleep(.5)

        # green to red
        grovepi.ledBar_orientation(ledbar, 1)
        time.sleep(.5)


        print &amp;quot;Test 9) Set level, again&amp;quot;
        # ledbar_setLevel(pin,level)
        # level: (0-10)
        # note the red LED is now at index 10 instead of 1
        for i in range(0,11):
            grovepi.ledBar_setLevel(ledbar, i)
            time.sleep(.2)
        time.sleep(.3)


        print &amp;quot;Test 10) Set a single LED, again&amp;quot;
        # ledbar_setLed(pin,led,state)
        # led: which led (1-10)
        # state: off or on (0,1)
        grovepi.ledBar_setLed(ledbar, 1, 0)
        time.sleep(.5)

        grovepi.ledBar_setLed(ledbar, 3, 0)
        time.sleep(.5)

        grovepi.ledBar_setLed(ledbar, 5, 0)
        time.sleep(.5)


        print &amp;quot;Test 11) Toggle a single LED, again&amp;quot;
        # ledbar_toggleLed(ledbar, led)
        grovepi.ledBar_toggleLed(ledbar, 2)
        time.sleep(.5)

        grovepi.ledBar_toggleLed(ledbar, 4)
        time.sleep(.5)


        print &amp;quot;Test 12) Get state&amp;quot;
        # state = ledbar_getBits(ledbar)
        # state: (0-1023) a bit for each of the 10 LEDs
        state = grovepi.ledBar_getBits(ledbar)

        # the last 5 LEDs are lit, so the state should be 992 or 0x3E0

        # bitwise shift five bits to the right
        state = state &amp;gt;&amp;gt; 5
        # the state should now be 31 or 0x1F


        print &amp;quot;Test 13) Set state, again&amp;quot;
        # ledbar_setBits(ledbar, state)
        # state: (0-1023) a bit for each of the 10 LEDs
        grovepi.ledBar_setBits(ledbar, state)
        time.sleep(.5)


        print &amp;quot;Test 14) Step&amp;quot;
        # step through all 10 LEDs
        for i in range(0,11):
            grovepi.ledBar_setLevel(ledbar, i)
            time.sleep(.2)
        time.sleep(.3)


        print &amp;quot;Test 15) Bounce&amp;quot;
        # switch on the first two LEDs
        grovepi.ledBar_setLevel(ledbar, 2)

        # get the current state (which is 0x3)
        state = grovepi.ledBar_getBits(ledbar)

        # bounce to the right
        for i in range(0,9):
            # bit shift left and update
            state &amp;lt;&amp;lt;= 1;
            grovepi.ledBar_setBits(ledbar, state)
            time.sleep(.2)

        # bounce to the left
        for i in range(0,9):
            # bit shift right and update
            state &amp;gt;&amp;gt;= 1;
            grovepi.ledBar_setBits(ledbar, state)
            time.sleep(.2)
        time.sleep(.3)


        print &amp;quot;Test 16) Random&amp;quot;
        for i in range(0,21):
            state = random.randint(0,1023)
            grovepi.ledBar_setBits(ledbar, state)
            time.sleep(.2)
        time.sleep(.3)


        print &amp;quot;Test 17) Invert&amp;quot;
        # set every 2nd LED on - 341 or 0x155
        state = 341
        for i in range(0,5):
            grovepi.ledBar_setBits(ledbar, state)
            time.sleep(.2)

            # bitwise XOR all 10 LEDs on with the current state
            state = 0x3FF ^ state

            grovepi.ledBar_setBits(ledbar, state)
            time.sleep(.2)
        time.sleep(.3)


        print &amp;quot;Test 18) Walk through all possible combinations&amp;quot;
        for i in range(0,1024):
            grovepi.ledBar_setBits(ledbar, i)
            time.sleep(.1)
        time.sleep(.4)

    except KeyboardInterrupt:
        grovepi.ledBar_setBits(ledbar, 0)
        break
    except IOError:
        print &amp;quot;Error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.Run the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo python grove_ledbar.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.This demo may not work if your grovepi dosen&amp;rsquo;t have the newest firmware, update the firmware.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd yourpath/GrovePi/Firmware
    sudo ./firmware_update.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-LED_Bar/master/res/Grove-LED_Bar_v1.0.zip&#34;&gt;Grove - LED Bar Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_LED_Bar&#34;&gt;Grove - LED Bar Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/LED_Bar_Suli&#34;&gt;Suli-compatible Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-LED_Bar/master/res/MY9221_DS_1.0.pdf&#34;&gt;MY9221 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_LED_Bar --&gt;
</description>
    </item>
    
  </channel>
</rss>