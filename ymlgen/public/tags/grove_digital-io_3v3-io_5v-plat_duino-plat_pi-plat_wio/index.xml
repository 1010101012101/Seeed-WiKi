<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</title>
    <link>http://wiki.seeed.cc/tags/grove_digital-io_3v3-io_5v-plat_duino-plat_pi-plat_wio/index.xml</link>
    <description>Recent content on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wiki.seeed.cc/tags/grove_digital-io_3v3-io_5v-plat_duino-plat_pi-plat_wio/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grove - 4-Digit Display</title>
      <link>http://wiki.seeed.cc/Grove-4-Digit_Display/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-4-Digit_Display/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/grove-4digital-display-p-1198.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/Grove-4_digit_display.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grove - 4-Digit Display module is a 12-pin module. In this module, we utilise a TM1637 to scale down the number of controlling pins to 2. That is to say, it controls both the content and the luminance via only 2 digital pins of Arduino or Seeeduino. For projects that require alpha-numeric display, this can be a nice choice.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/grove-4digital-display-p-1198.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;4 digit red alpha-numeric display&lt;/li&gt;
&lt;li&gt;Grove compatible interface (3.3V/5V)&lt;/li&gt;
&lt;li&gt;8 adjustable luminance levels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;application-ideas&#34;&gt;Application Ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Time display&lt;/li&gt;
&lt;li&gt;Stopwatch&lt;/li&gt;
&lt;li&gt;Sensors&amp;rsquo; input display&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;80%&#34;&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34;&gt;
Item
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Min
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Typical
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Max
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Unit
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Voltage
&lt;/th&gt;
&lt;td&gt;
3.3
&lt;/td&gt;
&lt;td&gt;
5.0
&lt;/td&gt;
&lt;td&gt;
5.5
&lt;/td&gt;
&lt;td&gt;
VDC
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Current
&lt;/th&gt;
&lt;td&gt;
0.2
&lt;/td&gt;
&lt;td&gt;
27
&lt;/td&gt;
&lt;td&gt;
80
&lt;/td&gt;
&lt;td&gt;
mA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Dimensions
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
42x24x14
&lt;/td&gt;
&lt;td&gt;
mm
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Net Weight
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
7Â±1
&lt;/td&gt;
&lt;td&gt;
g
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/4-digit_display_interface.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grove interface&lt;/strong&gt; - Can be connected to digital port on Grove - Base Shield.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4 - digit display&lt;/strong&gt; - Common anode digital tube.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pin definition:&lt;/strong&gt; CLK DIO VCC GND&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;h3 id=&#34;with-ti-launchpad&#34;&gt;With TI LaunchPad&lt;/h3&gt;

&lt;p&gt;Displaying the Numbers (4-Digital-Display)&lt;/p&gt;

&lt;p&gt;This example demonstrates how to display some digital numbers using a Grove-4-Digital Display.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/4_digital_display.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * TM1637.cpp
 * A library for the 4 digit display
 */
#include &amp;quot;TM1637.h&amp;quot;
#define CLK 39 //pins definitions for TM1637 and can be changed to other ports
#define DIO 38
TM1637 tm1637(CLK,DIO);
void setup()
{
    tm1637.init();
    tm1637.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;
}
void loop()
{
    int8_t NumTab[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};//0~9,A,b,C,d,E,F
    int8_t ListDisp[4];
    unsigned char i = 0;
    unsigned char count = 0;
    delay(150);
    while(1)
    {
        i = count;
        count ++;
        if(count == sizeof(NumTab)) count = 0;
        for(unsigned char BitSelect = 0;BitSelect &amp;lt; 4;BitSelect ++)
        {
            ListDisp[BitSelect] = NumTab[i];
            i ++;
            if(i == sizeof(NumTab)) i = 0;
        }
        tm1637.display(0,ListDisp[0]);
        tm1637.display(1,ListDisp[1]);
        tm1637.display(2,ListDisp[2]);
        tm1637.display(3,ListDisp[3]);
        delay(300);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The module uses an LED drive chip - TM1637 to control the contents and change the luminance. Here we drive it to display time.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Connect the Grove socket marked &amp;ldquo;IN&amp;rdquo; on the LED Strip Driver and digital port 2 of the &lt;a href=&#34;http://www.seeedstudio.com/depot/grove-base-shield-p-754.html?cPath=132_134&#34;&gt;Grove - Base Shield&lt;/a&gt; with a Grove cable. You can change to the digital port as you like. But don&amp;rsquo;t forget to change the port number in the definition of the demo code at the same time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Plug onto Arduino/Seeeduino or plug &lt;a href=&#34;http://www.seeedstudio.com/depot/grove-mega-shield-p-934.html?cPath=132_134&#34;&gt;Grove - Mega Shield&lt;/a&gt; onto Arduino Mega.&lt;/p&gt;

&lt;p&gt;Seeeduino and Grove - 4-digit display:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/Seeeduino_and_4-digit_display.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Arduino Mega and Grove - 4-digit display:
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/Arduino_Mega_and_4-digit_display.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect Arduino/Seeeduino to PC via a USB cable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/res/DigitalTube.zip&#34;&gt;the 4-Digit Display library&lt;/a&gt; and &lt;a href=&#34;https://code.google.com/p/arduino-timerone/downloads/detail?name=TimerOne-v9.zip&amp;amp;can=2&amp;amp;q=&#34;&gt;TimerOne library&lt;/a&gt;. Unzip and put them in the libraries file of Arduino IDE by the path: ..\arduino-1.0\libraries.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart the Arduino IDE, open one demo code you like, for example ClockDisplay directly by the path:File -&amp;gt; Example -&amp;gt;DigitalTube-&amp;gt;ClockDisplay.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/Open_ClockDisplay.ino.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Upload the demo code and the clock will be ticking in a few seconds.&lt;/p&gt;

&lt;p&gt;You can see this:
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/Display_the_clock.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have got a raspberry pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket D5 by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To see the code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nano grove_4_digit_display.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import time
import grovepi

# Connect the Grove 4 Digit Display to digital port D5
# CLK,DIO,VCC,GND
display = 5
grovepi.pinMode(display,&amp;quot;OUTPUT&amp;quot;)

# If you have an analog sensor connect it to A0 so you can monitor it below
sensor = 0
grovepi.pinMode(sensor,&amp;quot;INPUT&amp;quot;)

time.sleep(.5)

# 4 Digit Display methods
# grovepi.fourDigit_init(pin)
# grovepi.fourDigit_number(pin,value,leading_zero)
# grovepi.fourDigit_brightness(pin,brightness)
# grovepi.fourDigit_digit(pin,segment,value)
# grovepi.fourDigit_segment(pin,segment,leds)
# grovepi.fourDigit_score(pin,left,right)
# grovepi.fourDigit_monitor(pin,analog,duration)
# grovepi.fourDigit_on(pin)
# grovepi.fourDigit_off(pin)

while True:
    try:
        print &amp;quot;Test 1) Initialise&amp;quot;
        grovepi.fourDigit_init(display)
        time.sleep(.5)

        print &amp;quot;Test 2) Set brightness&amp;quot;
        for i in range(0,8):
            grovepi.fourDigit_brightness(display,i)
            time.sleep(.2)
        time.sleep(.3)

        # set to lowest brightness level
        grovepi.fourDigit_brightness(display,0)
        time.sleep(.5)

        print &amp;quot;Test 3) Set number without leading zeros&amp;quot;
        leading_zero = 0
        grovepi.fourDigit_number(display,1,leading_zero)
        time.sleep(.5)
        grovepi.fourDigit_number(display,12,leading_zero)
        time.sleep(.5)
        grovepi.fourDigit_number(display,123,leading_zero)
        time.sleep(.5)
        grovepi.fourDigit_number(display,1234,leading_zero)
        time.sleep(.5)

        print &amp;quot;Test 4) Set number with leading zeros&amp;quot;
        leading_zero = 1
        grovepi.fourDigit_number(display,5,leading_zero)
        time.sleep(.5)
        grovepi.fourDigit_number(display,56,leading_zero)
        time.sleep(.5)
        grovepi.fourDigit_number(display,567,leading_zero)
        time.sleep(.5)
        grovepi.fourDigit_number(display,5678,leading_zero)
        time.sleep(.5)

        print &amp;quot;Test 5) Set individual digit&amp;quot;
        grovepi.fourDigit_digit(display,0,2)
        grovepi.fourDigit_digit(display,1,6)
        grovepi.fourDigit_digit(display,2,9)
        grovepi.fourDigit_digit(display,3,15) # 15 = F
        time.sleep(.5)

        print &amp;quot;Test 6) Set individual segment&amp;quot;
        grovepi.fourDigit_segment(display,0,118) # 118 = H
        grovepi.fourDigit_segment(display,1,121) # 121 = E
        grovepi.fourDigit_segment(display,2,118) # 118 = H
        grovepi.fourDigit_segment(display,3,121) # 121 = E
        time.sleep(.5)

        grovepi.fourDigit_segment(display,0,57) # 57 = C
        grovepi.fourDigit_segment(display,1,63) # 63 = O
        grovepi.fourDigit_segment(display,2,63) # 63 = O
        grovepi.fourDigit_segment(display,3,56) # 56 = L
        time.sleep(.5)

        print &amp;quot;Test 7) Set score&amp;quot;
        grovepi.fourDigit_score(display,0,0)
        time.sleep(.2)
        grovepi.fourDigit_score(display,1,0)
        time.sleep(.2)
        grovepi.fourDigit_score(display,1,1)
        time.sleep(.2)
        grovepi.fourDigit_score(display,1,2)
        time.sleep(.2)
        grovepi.fourDigit_score(display,1,3)
        time.sleep(.2)
        grovepi.fourDigit_score(display,1,4)
        time.sleep(.2)
        grovepi.fourDigit_score(display,1,5)
        time.sleep(.5)

        print &amp;quot;Test 8) Set time&amp;quot;
        grovepi.fourDigit_score(display,12,59)
        time.sleep(.5)

        print &amp;quot;Test 9) Monitor analog pin&amp;quot;
        seconds = 10
        grovepi.fourDigit_monitor(display,sensor,seconds)
        time.sleep(.5)

        print &amp;quot;Test 10) Switch all on&amp;quot;
        grovepi.fourDigit_on(display)
        time.sleep(.5)

        print &amp;quot;Test 11) Switch all off&amp;quot;
        grovepi.fourDigit_off(display)
        time.sleep(.5)

    except KeyboardInterrupt:
        grovepi.fourDigit_off(display)
        break
    except IOError:
        print &amp;quot;Error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.Run the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   sudo python grove_4_digit_display.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.This demo may not work if your grovepi doesn&amp;rsquo;t have the newest firmware, update the firmware.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd yourpath/GrovePi/Firmware
sudo ./firmware_update.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/res/Grove-4-Digit_Display_V1.0_eagle_files.zip&#34;&gt;Grove - 4-Digit Display V1.0 eagle files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/res/Grove_4-Digit_Display_V1.0.pdf&#34;&gt;Schematic in PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/res/DigitalTube.zip&#34;&gt;4-Digit Display library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/arduino-timerone/downloads/detail?name=TimerOne-v9.zip&amp;amp;can=2&amp;amp;q=&#34;&gt;TimerOne library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Four_Digit_Display_Suli&#34;&gt;Four-Digit Display Suli Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/res/TM1637_datasheet.pdf&#34;&gt;TM1637 datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related Projects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to make some awesome projects by 4-Digit Display, here&amp;rsquo;s one project for reference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Air Quality Box&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/recipe/index.php?controller=recipe&amp;amp;action=show&amp;amp;recipe_id=266&amp;amp;ref=product&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/556bcbf436c49.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this demo, we can see the air quality data on 4-Digit Display.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/recipe/index.php?controller=recipe&amp;amp;action=show&amp;amp;recipe_id=266&amp;amp;ref=product&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-4-Digit_Display/master/img/Wiki_makeitnow_logo.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_4-Digit_Display --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Infrared Emitter</title>
      <link>http://wiki.seeed.cc/Grove-Infrared_Emitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Infrared_Emitter/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Emitter/master/img/Grove-Infrared_Emitter.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Infrared Emitter is used to transmit infrared signals through an infrared LED, while there is an &lt;strong&gt;Infrared receiver&lt;/strong&gt; to get the signals on the other side. An infrared LED is like any other LED, with its color centered around 940nm. We can not only use the emitter to transmit data or commands, but also to emulate remotes to control your home appliance using an Arduino. The Infrared Emitter can transmit signals reliable up to 10 meters. Beyond 10 meters, the receiver may not get the signals.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Infrared-Emitter-p-993.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Voltage: 3.3-5V&lt;/li&gt;
&lt;li&gt;Distance:10m&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;p&gt;The Grove - Infrared Emitter can send data while Grove - Infrared Receiver will receive them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connect the Grove - Infrared Emitter to D3.&lt;/li&gt;
&lt;li&gt;Connect the Grove - Infrared Receiver to D2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Emitter/master/img/IR_SendRev.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;with-arduino-seeeduino&#34;&gt;With Arduino/Seeeduino&lt;/h2&gt;

&lt;h3 id=&#34;suggest-reading-for-starter&#34;&gt;Suggest Reading for Starter&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://wiki.seeed.cc/Download_Arduino_and_install_Arduino_driver&#34;&gt;Download Arduino and install Arduino driver&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://wiki.seeed.cc/Getting_Started_with_Seeeduino&#34;&gt;Getting Started with Seeeduino/Arduino&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;irsendrev-library&#34;&gt;IRSendRev Library&lt;/h3&gt;

&lt;p&gt;We have created a library to help you start playing quickly with the Seeeduino/Arduino, in this section we&amp;rsquo;ll show you how to set up the library.&lt;/p&gt;

&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Download the &lt;a href=&#34;https://github.com/Seeed-Studio/IRSendRev&#34;&gt;library code as a zip file&lt;/a&gt; from the IRSendRev github page.&lt;/li&gt;
&lt;li&gt;Unzip the downloaded file into your â¦/arduino/libraries.&lt;/li&gt;
&lt;li&gt;Rename the unzipped folder &amp;ldquo;IRSendRev&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Start the Arduino IDE (or restart if it is open).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;infrared-emitter-examples-applications&#34;&gt;Infrared Emitter Examples/Applications&lt;/h3&gt;

&lt;p&gt;These examples are going to show you how to use features of Grove - Infrared Emitter. You can use Grove - Infrared Emitter in combination with Grove - Infrared Receiver. Connect the IR send pins to D3 for this demo.&lt;/p&gt;

&lt;h4 id=&#34;receiver&#34;&gt;Receiver&lt;/h4&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
You need to have a &lt;span style=&#34;font-weight:bold&#34;&gt;Grove - Infrared Receiver&lt;/span&gt;. And upload this demo to the board with Infrared Receiver Grove.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Open File-&amp;gt;Examples-&amp;gt;IRSendRev-&amp;gt;example-&amp;gt;recv sketch for a complete example, or copy and paste code below to a new Arduino sketch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:
This example connect the IR receiver pins to D2 for this demo. You can see the remote control&amp;rsquo;s infrared data that received through a serial port terminal, then write the received infrared data into send.ino and upload to the board with Infrared Emitter Grove, so you can send the same data with remote control&amp;rsquo;s button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application&lt;/strong&gt;:
You can note the remote control&amp;rsquo;s infrared data down through Infrared Receiver, then send the same data through Infrared Emitter in some cases, such as open the fan switch when indoor temperature is greater than 26 degrees.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;IRSendRev.h&amp;gt;
Â 
#define BIT_LEN         0
#define BIT_START_H     1
#define BIT_START_L     2
#define BIT_DATA_H      3
#define BIT_DATA_L      4
#define BIT_DATA_LEN    5
#define BIT_DATA        6
Â 
const int pinRecv = 2;              // ir receiver connect to D2
Â 
void setup()
{
    Serial.begin(115200);
    IR.Init(pinRecv);
    Serial.println(&amp;quot;init over&amp;quot;);
}
Â 
unsigned char dta[20];
Â 
void loop()
{
    if(IR.IsDta())                  // get IR data
    {
        IR.Recv(dta);               // receive data to dta
Â 
        Serial.println(&amp;quot;+------------------------------------------------------+&amp;quot;);
        Serial.print(&amp;quot;LEN = &amp;quot;);
        Serial.println(dta[BIT_LEN]);
        Serial.print(&amp;quot;START_H: &amp;quot;);
        Serial.print(dta[BIT_START_H]);
        Serial.print(&amp;quot;\tSTART_L: &amp;quot;);
        Serial.println(dta[BIT_START_L]);
Â 
        Serial.print(&amp;quot;DATA_H: &amp;quot;);
        Serial.print(dta[BIT_DATA_H]);
        Serial.print(&amp;quot;\tDATA_L: &amp;quot;);
        Serial.println(dta[BIT_DATA_L]);
Â 
        Serial.print(&amp;quot;\r\nDATA_LEN = &amp;quot;);
        Serial.println(dta[BIT_DATA_LEN]);
Â 
        Serial.print(&amp;quot;DATA: &amp;quot;);
        for(int i=0; i&amp;lt;dta[BIT_DATA_LEN]; i++)
        {
            Serial.print(&amp;quot;0x&amp;quot;);
            Serial.print(dta[i+BIT_DATA], HEX);
            Serial.print(&amp;quot;\t&amp;quot;);
        }
        Serial.println();
Â 
        Serial.print(&amp;quot;DATA: &amp;quot;);
        for(int i=0; i&amp;lt;dta[BIT_DATA_LEN]; i++)
        {
            Serial.print(dta[i+BIT_DATA], DEC);
            Serial.print(&amp;quot;\t&amp;quot;);
        }
        Serial.println();
        Serial.println(&amp;quot;+------------------------------------------------------+\r\n\r\n&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Upload the code to the development board.&lt;/li&gt;
&lt;li&gt;Open the serial monitor window and wait for the input.&lt;/li&gt;
&lt;li&gt;Using IR remote control sending data&lt;font color=&#34;Blue&#34;&gt;(This example uses MIDEA Company&amp;rsquo;s IR remote control of fans, and press the open/close key.)&lt;/font&gt;.&lt;/li&gt;
&lt;li&gt;You can see the information below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Emitter/master/img/Dataï¼IR_remote_control_of_fans.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;emitter&#34;&gt;Emitter&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Open File-&amp;gt;Examples-&amp;gt;IRSendRev-&amp;gt;example-&amp;gt;send sketch for a complete example, or copy and paste code below to a new Arduino sketch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:
Connect the IR send pins to D3 for this demo. You can see the remote control&amp;rsquo;s infrared data that received through Infrared Receiver, such as the example above. Then write the received infrared data into this example and upload to the board with Infrared Emitter Grove, so you can send the same data with remote control&amp;rsquo;s button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application&lt;/strong&gt;:
You can note the remote control&amp;rsquo;s infrared data down through Infrared Receiver, then send the same data through Infrared Emitter in some cases, such as open the fan switch when indoor temperature is greater than 26 degrees.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
You must connect the IR send pins to D3 for this demo.
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;IRSendRev.h&amp;gt;
Â 
#define BIT_LEN         0
#define BIT_START_H     1
#define BIT_START_L     2
#define BIT_DATA_H      3
#define BIT_DATA_L      4
#define BIT_DATA_LEN    5
#define BIT_DATA        6
Â 
const int ir_freq = 38;                 // 38k
Â 
unsigned char dtaSend[20];
Â 
void dtaInit()
{
    dtaSend[BIT_LEN]        = 11;          // all data that needs to be sent
    dtaSend[BIT_START_H]    = 180;         // the logic high duration of &amp;quot;Start&amp;quot;
    dtaSend[BIT_START_L]    = 91;          // the logic low duration of &amp;quot;Start&amp;quot;
    dtaSend[BIT_DATA_H]     = 11;          // the logic &amp;quot;long&amp;quot; duration in the communication
    dtaSend[BIT_DATA_L]     = 33;          // the logic &amp;quot;short&amp;quot; duration in the communication
Â 
    dtaSend[BIT_DATA_LEN]   = 6;           // Number of data which will sent. If the number is other, you should increase or reduce dtaSend[BIT_DATA+x].
Â 
    dtaSend[BIT_DATA+0]     = 128;           // data that will sent
    dtaSend[BIT_DATA+1]     = 127;
    dtaSend[BIT_DATA+2]     = 192;
    dtaSend[BIT_DATA+3]     = 63;
    dtaSend[BIT_DATA+4]     = 192;
    dtaSend[BIT_DATA+5]     = 63;
}
Â 
void setup()
{
    dtaInit();
}
Â 
void loop()
{
    IR.Send(dtaSend, 38);
Â 
    delay(2000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Infrared_Emitter/master/res/Grove-Infrared_Emitter_eagle_files.zip&#34;&gt;Grove-Infrared Emitter eagle files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/IRSendRev&#34;&gt;IR Send and Receiver Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vishay.com/docs/81010/tsal6200.pdf&#34;&gt;TSAL6200 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Infrared_Emitter --&gt;
</description>
    </item>
    
  </channel>
</rss>