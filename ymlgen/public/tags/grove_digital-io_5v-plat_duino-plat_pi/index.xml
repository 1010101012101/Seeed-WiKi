<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grove_digital Io_5v Plat_duino Plat_pi on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</title>
    <link>http://wiki.seeed.cc/tags/grove_digital-io_5v-plat_duino-plat_pi/index.xml</link>
    <description>Recent content in Grove_digital Io_5v Plat_duino Plat_pi on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wiki.seeed.cc/tags/grove_digital-io_5v-plat_duino-plat_pi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grove - 125KHz RFID Reader</title>
      <link>http://wiki.seeed.cc/Grove-125KHz_RFID_Reader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-125KHz_RFID_Reader/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-125KHz_RFID_Reader/master/img/Grove-125KHz_RFID_Reader.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This Grove-125KHz RFID Reader is a module used to read uem4100 RFID card information with two output formats: Uart and Wiegand. It has a sensitivity with maximum 7cm sensing distance. There is also &lt;a href=&#34;http://www.seeedstudio.com/depot/electronic-brick-125khz-rfid-card-reader-p-702.html?cPath=52&#34;&gt;the electronic brick version&lt;/a&gt; of this module. It can help you with project like internet of thing and access control system.&lt;/p&gt;

&lt;p&gt;And you should use the module below while using RFID reader:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/rfid-tag-combo-125khz-5-pcs-p-700.html?cPath=19_24&#34;&gt;RFID tag combo (125khz)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/grove-125khz-rfid-reader-p-1008.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Voltage: 4.75-5.25V&lt;/li&gt;
&lt;li&gt;Working Frequency: 125 KHz&lt;/li&gt;
&lt;li&gt;Sensing Distance(Max): 70mm&lt;/li&gt;
&lt;li&gt;TTL Output: 9600 baudrate, 8 data bits, 1 stop bit, and no verify bit&lt;/li&gt;
&lt;li&gt;Wiegand Output: 26 bits Wiegand format, 1 even verify bit, 24 data bits, and 1 odd verify bit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;p&gt;Here we show how to read RFID information using the Grove - 125KHz RFID Reader. Connect Grove - 125KHz RFID Reader to UART of Grove - Base Shield.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-125KHz_RFID_Reader/master/img/RFID_reader.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;uart-mode-jumper-set-to-the-left-two-pins&#34;&gt;Uart Mode (Jumper set to the left two pins)&lt;/h3&gt;

&lt;p&gt;You would need to select the jumper to &amp;ldquo;U&amp;rdquo; to enter this mode, and the setting is: 9600bps, N, 8, 1, TTL output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/*
  link between the computer and the SoftSerial Shield
  at 9600 bps 8-N-1
  Computer is connected to Hardware UART
  SoftSerial Shield is connected to the Software UART:D2&amp;amp;D3
*/
 
#include &amp;lt;SoftwareSerial.h&amp;gt;
 
SoftwareSerial SoftSerial(2, 3);
unsigned char buffer[64];       // buffer array for data receive over serial port
int count = 0;                    // counter for buffer array
 
void setup()
{
    SoftSerial.begin(9600);     // the SoftSerial baud rate
    Serial.begin(9600);         // the Serial port of Arduino baud rate.
}
 
void loop()
{
    // if date is coming from software serial port ==&amp;gt; data is coming from SoftSerial shield
    if (SoftSerial.available())              
    {
        while(SoftSerial.available())               // reading data into char array
        {
            buffer[count++] = SoftSerial.read();      // writing data into array
            if(count == 64)break;
        }
        Serial.write(buffer, count);     // if no data transmission ends, write buffer to hardware serial port
        clearBufferArray();             // call clearBufferArray function to clear the stored data from the array
        count = 0;                      // set counter of while loop to zero
    }
    if (Serial.available())             // if data is available on hardware serial port ==&amp;gt; data is coming from PC or notebook
    SoftSerial.write(Serial.read());    // write it to the SoftSerial shield
}
void clearBufferArray()                 // function to clear buffer array
{
    // clear all index of array with command NULL
    for (int i=0; i&amp;lt;count; i++)
    {
        buffer[i]=NULL;
    }                  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the Serial Monitor, the card information can be displayed as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-125KHz_RFID_Reader/master/img/Read_Data_.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;wiegand-mode-jumper-set-to-the-right-two-pins&#34;&gt;Wiegand Mode (Jumper Set to the Right two Pins)&lt;/h3&gt;

&lt;p&gt;You would need to select the jumper to &amp;ldquo;W&amp;rdquo; to enter this mode.
The &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-125KHz_RFID_Reader/master/res/RFID_Wiegand_INT.zip&#34;&gt;Wiegand demo code&lt;/a&gt; for Seeeduino is designed to read Wiegand data in interrupt mode.&lt;/p&gt;

&lt;p&gt;In Wiegand Mode, output data is formatted with 26bits including 24bits card info and 2 bits parity.&lt;/p&gt;

&lt;p&gt;&lt;table border=&#34;1&#34;&gt;
&lt;tr style=&#34;font-weight:bold&#34;&gt;
&lt;td width=&#34;20&#34;&gt;
bit
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
0
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
1
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
2
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
3
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
4
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
5
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
6
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
7
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
8
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
9
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
10
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
11
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
12
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
13
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
14
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
15
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
16
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
17
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
18
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
19
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
20
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
21
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
22
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
23
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
24
&lt;/td&gt;
&lt;td width=&#34;20&#34;&gt;
25
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;font-size: 90%&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;td&#34;&gt;&lt;td&gt;&lt;/h2&gt;

&lt;p&gt;&lt;/td&gt;
&lt;td&gt;
PE
&lt;/td&gt;
&lt;td colspan=&#34;24&#34; rowspan=&#34;1&#34;&gt;
D
&lt;/td&gt;
&lt;td&gt;
P0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;font-size: 90%&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;td-1&#34;&gt;&lt;td&gt;&lt;/h2&gt;

&lt;p&gt;&lt;/td&gt;&lt;/p&gt;

&lt;h2 id=&#34;td-2&#34;&gt;&lt;td&gt;&lt;/h2&gt;

&lt;p&gt;&lt;/td&gt;
&lt;td colspan=&#34;12&#34; rowspan=&#34;1&#34;&gt;
E
&lt;/td&gt;
&lt;td colspan=&#34;12&#34; rowspan=&#34;1&#34;&gt;
0
&lt;/td&gt;&lt;/p&gt;

&lt;h2 id=&#34;td-3&#34;&gt;&lt;td&gt;&lt;/h2&gt;

&lt;p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;font-size: 90%&#34; align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;td-4&#34;&gt;&lt;td&gt;&lt;/h2&gt;

&lt;p&gt;&lt;/td&gt;&lt;/p&gt;

&lt;h2 id=&#34;td-5&#34;&gt;&lt;td&gt;&lt;/h2&gt;

&lt;p&gt;&lt;/td&gt;
&lt;td colspan=&#34;8&#34; rowspan=&#34;1&#34;&gt;
D2[7..0]
&lt;/td&gt;
&lt;td colspan=&#34;8&#34; rowspan=&#34;1&#34;&gt;
D1[7..0]
&lt;/td&gt;
&lt;td colspan=&#34;8&#34; rowspan=&#34;1&#34;&gt;
D0[7..0]
&lt;/td&gt;&lt;/p&gt;

&lt;h2 id=&#34;td-6&#34;&gt;&lt;td&gt;&lt;/h2&gt;

&lt;p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
-   PE is even bit, PO is odd bit;
-   E is the data bit which was involved in even, O is the data bit which was involved in odd;
-   DX[7..0] is the data bit which correspond to Mifare@ Standard &amp;amp; Light card read only ID;&lt;/p&gt;

&lt;h3 id=&#34;how-to-convert-the-output-to-card-number&#34;&gt;How to convert the output to Card Number&lt;/h3&gt;

&lt;p&gt;Take ID: 0009776930 for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Card Number ID: 0009776930 &amp;mdash;&amp;mdash;- Decimalism [Start Bit(00) + Card Number(8 numbers)]&lt;/li&gt;
&lt;li&gt;Output: 0700952F229F &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- Hex [[Start Bit(07h) + Card Number(8 numbers) + Checksum]&lt;/li&gt;
&lt;li&gt;The calculator for decimal and hex numbers is available online.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_125KHz_RFID_Reader --&gt;
</description>
    </item>
    
  </channel>
</rss>