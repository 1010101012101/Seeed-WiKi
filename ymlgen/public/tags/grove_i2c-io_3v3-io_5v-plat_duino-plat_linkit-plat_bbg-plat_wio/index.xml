<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</title>
    <link>http://wiki.seeed.cc/tags/grove_i2c-io_3v3-io_5v-plat_duino-plat_linkit-plat_bbg-plat_wio/index.xml</link>
    <description>Recent content on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wiki.seeed.cc/tags/grove_i2c-io_3v3-io_5v-plat_duino-plat_linkit-plat_bbg-plat_wio/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grove - 3-Axis Compass V1.0</title>
      <link>http://wiki.seeed.cc/Grove-3-Axis_Compass_V1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-3-Axis_Compass_V1/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Compass_V1.0/master/img/Grove-3-Axis_Compass_V1.0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This 3-axis digital compass features a low field magnetic sensing multi-chip module HMC5883L, which provides up to 1° to 2° heading accuracy. HMC5883L consists of high-resolution HMC118X series magneto-resistive sensors, as well as Honeywell developed ASIC containing amplification, automatic degaussing strap drivers, offset cancellation and 12 bit ADC. With peripheral power management circuit added, this is an easy to use and reliable compass module for low cost compassing and magnetometry.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-3-Axis-Digital-Compass-p-759.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Input Voltage: 3.3V, 5V&lt;/li&gt;
&lt;li&gt;Sleep Mode Current: 2.5uA&lt;/li&gt;
&lt;li&gt;Measurement Mode Current: 640uA&lt;/li&gt;
&lt;li&gt;High resolution&lt;/li&gt;
&lt;li&gt;Easy to control I2C interface&lt;/li&gt;
&lt;li&gt;Compatible with either 3.3V or 5.0V development platform&lt;/li&gt;
&lt;li&gt;Max 116Hz output rate&lt;/li&gt;
&lt;li&gt;High heading accuracy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This demo is going to show you how to read raw data, how to calibrate the data with your local magnetic declination angle and how to get heading angle.&lt;/p&gt;

&lt;p&gt;First off, before any action you are going to take, you need to prepare a parameter you are going to use in your demo. That&amp;rsquo;s your local magnetic declination.&lt;/p&gt;

&lt;p&gt;You can find it out in degree via &lt;a href=&#34;http://www.magnetic-declination.com/&#34;&gt;the magnetic declination webpage&lt;/a&gt;. For example, mine is -2°37’, which is -2.617 degree.&lt;/p&gt;

&lt;p&gt;Then transfer it from degree to radians, and there you get the &amp;ldquo;declinationAngle&amp;rdquo;. For example, in my case, declinationAngle = -2.617 * π / 180 = -0.0456752665 rad. Three significant figures are enough. So I would shorten it into -0.0456 rad. And this is the parameter you are going to replace the value of &amp;ldquo;declinationAngle&amp;rdquo; in the demo code with.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s start to run your compass.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Plug the 3-axis compass into the I2C port of Grove - Base Shield.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download the library file: &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Compass_V1.0/master/res/Digital_Compass.zip&#34;&gt;Digital Compass Library&lt;/a&gt;. Unzip it into the libraries file of Arduino IDE by the path: ..\arduino-1.0.1\libraries.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the demo by the path:File -&amp;gt;Example -&amp;gt;Digital Compass -&amp;gt;HMC5883L_Example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Compass_V1.0/master/img/Digital_Compass1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace the value of variable &amp;ldquo;declinitionAngle&amp;rdquo; with the one you&amp;rsquo;ve figured out already.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Upload the Code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the output result by opening the serial monitor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Compass_V1.0/master/img/Digital_Compass2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have got a raspberry pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket i2c-x(1~3) by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   cd yourpath/GrovePi/Software/Python/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see the code&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    nano grove_compass_lib.py       
    nano grove_compass_example.py    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    import grove_compass_lib
    c=grove_compass_lib.compass()
    while True:
            print &amp;quot;X:&amp;quot;,c.x,&amp;quot;Y:&amp;quot;,c.y,&amp;quot;X:&amp;quot;,c.z,&amp;quot;Heading:&amp;quot;,c.headingDegrees
            c.update()
            time.sleep(.1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Run the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo python grove_compass_example.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Compass_V1.0/master/res/Grove-3-Axis_Digital_Compass_Eagle_File.zip&#34;&gt;Grove-3-Axis Digital Compass Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Compass_V1.0/master/res/HMC5883.pdf&#34; title=&#34;File:HMC5883.pdf&#34;&gt;HMC5883.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Compass_V1.0/master/res/Digital_Compass.zip&#34;&gt;Digital Compass Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_3-Axis_Compass_V1.0 --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - 3-Axis Digital Gyro</title>
      <link>http://wiki.seeed.cc/Grove-3-Axis_Digital_Gyro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-3-Axis_Digital_Gyro/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Digital_Gyro/master/img/Grove-3-Axis_Digital_Gyro.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - 3-Axis Digital Gyro module based on ITG 3200. It is the world’s first single-chip, digital-output, 3-axis MEMS motion processing gyro optimised for gaming, 3D mice, and motion-based remote control applications for Internet connected Digital TVs and Set Top Boxes. The ITG-3200 features three 16-bit analog-to-digital converters (ADCs) for digitising the gyro outputs, a user-selectable internal low-pass filter bandwidth, and a Fast-Mode I2C (400kHz) interface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-3-Axis-Digital-Gyro-p-750.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Supply Voltage: 3.3V, 5V&lt;/li&gt;
&lt;li&gt;Operation Current: 6.5mA&lt;/li&gt;
&lt;li&gt;Standby current: 5μA&lt;/li&gt;
&lt;li&gt;Sensitivity: 14 LSBs per °/sec&lt;/li&gt;
&lt;li&gt;Full scale range: ±2000°/sec&lt;/li&gt;
&lt;li&gt;Acceleration: 10,000g for 0.3ms&lt;/li&gt;
&lt;li&gt;I2C Interface&lt;/li&gt;
&lt;li&gt;±2000°/s full scale range and 14.375 LSBs per °/s sensitivity&lt;/li&gt;
&lt;li&gt;Three integrated 16-bit ADCs&lt;/li&gt;
&lt;li&gt;On-chip temperature sensor&lt;/li&gt;
&lt;li&gt;Integrated amplifiers and low-pass filters&lt;/li&gt;
&lt;li&gt;Hermetically sealed for temp and humidity resistance&lt;/li&gt;
&lt;li&gt;RoHS and Green compliant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;p&gt;This demo will show you how to get data from this digital gyro, the data is in the unit of rad/s.&lt;/p&gt;

&lt;p&gt;Here we need a Grove - 3-Axis Digital Gyro and a Seeeduino V3.0.&lt;/p&gt;

&lt;h3 id=&#34;hardware-installation&#34;&gt;Hardware Installation&lt;/h3&gt;

&lt;p&gt;Hardware installation is very easy, because there&amp;rsquo;s an I2C Grove in Seeeduino,&lt;/p&gt;

&lt;p&gt;So, what we need to do is connect it to I2C Grove via a Grove cable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Digital_Gyro/master/img/Grove-3-Axis_Digital_Gyro_Hardware.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;download-code-and-upload&#34;&gt;Download Code and Upload&lt;/h3&gt;

&lt;p&gt;You can download the library in github, click &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_3_Axis_Digital_Gyro/&#34;&gt;here&lt;/a&gt;, then extract it to libraries folder of Arduino.&lt;/p&gt;

&lt;p&gt;Then open File -&amp;gt; examples -&amp;gt; Grove_3_Digital_Gyro -&amp;gt; ITG3200_gyro, you can open the demo code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Digital_Gyro/master/img/ITG3200_gyro_ArduinoIde.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click Upload to upload the code, if you have any problem about how to start Arduino, please click &lt;a href=&#34;http://wiki.seeed.cc/Getting_Started_with_Seeeduino&#34;&gt;here&lt;/a&gt; for some help.&lt;/p&gt;

&lt;h3 id=&#34;check-the-result&#34;&gt;Check the result&lt;/h3&gt;

&lt;p&gt;Now, you can open the serial monitor to check the result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Digital_Gyro/master/img/Grove-3-Axis_Digital_Gyro_SerialDta.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;The diagram below shows the orientations of the 3 axes. You can use it to understand the physical meanings of the result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Digital_Gyro/master/img/Gyro_Reference_1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Digital_Gyro/master/res/ITG-3200.pdf&#34;&gt;Datasheet of ITG-3200.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Digital_Gyro/master/res/Grove-3-Axis_Digital_Gyro_Eagle_File.zip&#34;&gt;Grove - 3-Axis Digital Gyro Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_3_Axis_Digital_Gyro&#34;&gt;Digital Gyro Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_3-Axis_Digital_Gyro --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Barometer Sensor (BMP180)</title>
      <link>http://wiki.seeed.cc/Grove-Barometer_Sensor-BMP180/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Barometer_Sensor-BMP180/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer_Sensor-BMP180/master/img/Barometer-BMP180-.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a Grove module for the Bosch BMP180 high-precision, low-power digital barometer. The BMP180 offers a pressure measuring range of 300 to 1100 hPa with an accuracy down to 0.02 hPa in advanced resolution mode. It’s based on piezo-resistive technology for high accuracy, ruggedness and long term stability. The chip only accepts 1.8V to 3.6V input voltage. However, with outer circuit added, this module becomes compatible with 3.3V and 5V. Therefore, it can be used on Arduino/Seeeduino or Seeeduino Stalker without modification.It is designed to be connected directly to a micro-controller via the I2C bus.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Barometer-Sensor-(BMP180)-p-1840.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Digital two wire (I2C) interface&lt;/li&gt;
&lt;li&gt;Wide barometric pressure range&lt;/li&gt;
&lt;li&gt;Flexible supply voltage range&lt;/li&gt;
&lt;li&gt;Ultra-low power consumption&lt;/li&gt;
&lt;li&gt;Low noise measurement&lt;/li&gt;
&lt;li&gt;Factory-calibrated&lt;/li&gt;
&lt;li&gt;-40 to +85°C operational range, ±2°C temperature accuracy&lt;/li&gt;
&lt;li&gt;I2C address: 0x77&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;application-ideas&#34;&gt;Application Ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Enhancement of GPS navigation&lt;/li&gt;
&lt;li&gt;Indoor and outdoor navigation&lt;/li&gt;
&lt;li&gt;Leisure and sports&lt;/li&gt;
&lt;li&gt;Weather forecast&lt;/li&gt;
&lt;li&gt;Vertical velocity indication (rise/sink speed)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;80%&#34;&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34;&gt;
Item
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Min
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Typical
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Max
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Unit
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Voltage
&lt;/th&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;td&gt;
5.5
&lt;/td&gt;
&lt;td&gt;
VDC
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Current
&lt;/th&gt;
&lt;td&gt;
1.1
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
20
&lt;/td&gt;
&lt;td&gt;
uA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Pressure Range
&lt;/th&gt;
&lt;td&gt;
300
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
1100
&lt;/td&gt;
&lt;td&gt;
hPa
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Faster I2C data transfer
&lt;/th&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
3.4
&lt;/td&gt;
&lt;td&gt;
MHZ
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Dimension
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
40.1*20.2*9.7
&lt;/td&gt;
&lt;td&gt;
mm
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Barometric condition is one of the criteria used to predict coming change in weather and deduce altitude above sea level. Here is a demo to show you how to read the barometric data from this Grove - Barometer Sensor (BMP180).&lt;/p&gt;

&lt;p&gt;1.Connect it to IIC port of Seeeduino or Grove - Base Shield via a Grove cable. And connect Arduino to PC via a USB cable.&lt;/p&gt;

&lt;p&gt;2.Download &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Barometer_Sensor&#34;&gt;the library&lt;/a&gt;(the barometer library is shared by Grove - Barometer Sensor (BMP180) and Grove - Barometer Sensor(BMP085));Unzip it into the libraries file of Arduino IDE by the path: ..\arduino-1.0.1\libraries.&lt;/p&gt;

&lt;p&gt;3.Create a new Arduino sketch and paste the codes below to it or open the code directly by the path:File -&amp;gt; Example -&amp;gt;Barometer_Sensor-&amp;gt;Barometer_Sensor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /* Barometer demo V1.0
    * Based largely on code by  Jim Lindblom
    * Get pressure, altitude, and temperature from the BMP085.
    * Serial.print it out at 9600 baud to serial monitor.
    *
    * By:http://www.seeedstudio.com
    */
    #include &amp;quot;Barometer.h&amp;quot;
    #include &amp;lt;Wire.h&amp;gt;
    float temperature;
    float pressure;
    float atm;
    float altitude;
    Barometer myBarometer;
    void setup(){
      Serial.begin(9600);
      myBarometer.init();
      
    }

    void loop()
    {
       temperature = myBarometer.bmp085GetTemperature(myBarometer.bmp085ReadUT()); //Get the temperature, bmp085ReadUT MUST be called first
       pressure = myBarometer.bmp085GetPressure(myBarometer.bmp085ReadUP());//Get the temperature
       altitude = myBarometer.calcAltitude(pressure); //Uncompensated calculation - in Meters 
       atm = pressure / 101325; 
      
      Serial.print(&amp;quot;Temperature: &amp;quot;);
      Serial.print(temperature, 2); //display 2 decimal places
      Serial.println(&amp;quot;deg C&amp;quot;);

      Serial.print(&amp;quot;Pressure: &amp;quot;);
      Serial.print(pressure, 0); //whole number only.
      Serial.println(&amp;quot; Pa&amp;quot;);

      Serial.print(&amp;quot;Ralated Atmosphere: &amp;quot;);
      Serial.println(atm, 4); //display 4 decimal places

      Serial.print(&amp;quot;Altitude: &amp;quot;);
      Serial.print(altitude, 2); //display 2 decimal places
      Serial.println(&amp;quot; m&amp;quot;);

      Serial.println();

      delay(1000); //wait a second and get values again.
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.Open the serial monitor to receive the sensor&amp;rsquo;s data including temperature, barometric pressure value, relative atmosphere pressure and altitude.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer_Sensor-BMP180/master/img/Barometer_Sensor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following is a reference graph plotting out the relationship between altitude above sea level and barometric pressure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer_Sensor-BMP180/master/img/Pressure_and_Altitude.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;with-raspberry-pi&#34;&gt;With Raspberry Pi&lt;/h3&gt;

&lt;p&gt;1.You should have got a raspberry pi and a grovepi or grovepi+.&lt;/p&gt;

&lt;p&gt;2.You should have completed configuring the development enviroment, otherwise follow &lt;a href=&#34;http://wiki.seeed.cc/GrovePiPlus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Connection&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plug the sensor to grovepi socket i2c-x(1~3) by using a grove cable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.Navigate to the demos&amp;rsquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   cd yourpath/GrovePi/Software/Python/grove_barometer/adafruit
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see the code&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    nano grove_i2c_barometic_sensor_example.py   # &amp;quot;Ctrl+x&amp;quot; to exit #
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/python

    import smbus
    import RPi.GPIO as GPIO
    #import grovepi
    from grove_i2c_barometic_sensor import BMP085

    # ===========================================================================
    # Example Code
    # ===========================================================================

    # Initialise the BMP085 and use STANDARD mode (default value)
    # bmp = BMP085(0x77, debug=True)
    bmp = BMP085(0x77, 1)

    # To specify a different operating mode, uncomment one of the following:
    # bmp = BMP085(0x77, 0)  # ULTRALOWPOWER Mode
    # bmp = BMP085(0x77, 1)  # STANDARD Mode
    # bmp = BMP085(0x77, 2)  # HIRES Mode
    # bmp = BMP085(0x77, 3)  # ULTRAHIRES Mode

    rev = GPIO.RPI_REVISION
    if rev == 2 or rev == 3:
        bus = smbus.SMBus(1)
    else:
        bus = smbus.SMBus(0)

    temp = bmp.readTemperature()

    # Read the current barometric pressure level
    pressure = bmp.readPressure()

    # To calculate altitude based on an estimated mean sea level pressure
    # (1013.25 hPa) call the function as follows, but this won&#39;t be very accurate
    # altitude = bmp.readAltitude()

    # To specify a more accurate altitude, enter the correct mean sea level
    # pressure level.  For example, if the current pressure level is 1023.50 hPa
    # enter 102350 since we include two decimal places in the integer value
    altitude = bmp.readAltitude(101560)

    print &amp;quot;Temperature: %.2f C&amp;quot; % temp
    print &amp;quot;Pressure:    %.2f hPa&amp;quot; % (pressure / 100.0)
    print &amp;quot;Altitude:    %.2f m&amp;quot; % altitude
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Run the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo python grove_i2c_barometic_sensor_example.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.Result&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer_Sensor-BMP180/master/img/Grovepi_barometer_sensor_00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer_Sensor-BMP180/master/res/Barometer_Sensor-BMP180-Eagle_File.zip&#34;&gt;Grove - Barometer Sensor(BMP180) Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Barometer_Sensor&#34;&gt;Barometer_Sensor Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer_Sensor-BMP180/master/res/BMP180.pdf&#34;&gt;BMP180 datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Barometer_Sensor_(BMP180) --&gt;
</description>
    </item>
    
  </channel>
</rss>