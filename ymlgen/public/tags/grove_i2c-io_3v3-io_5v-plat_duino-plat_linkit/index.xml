<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</title>
    <link>http://wiki.seeed.cc/tags/grove_i2c-io_3v3-io_5v-plat_duino-plat_linkit/index.xml</link>
    <description>Recent content on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wiki.seeed.cc/tags/grove_i2c-io_3v3-io_5v-plat_duino-plat_linkit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grove - 3-Axis Analog Accelerometer</title>
      <link>http://wiki.seeed.cc/Grove-3-Axis_Analog_Accelerometer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-3-Axis_Analog_Accelerometer/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/img/Grove-3-axis_Analog_Accelerometer_photo.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The ADXL335 is a small, thin, low power, complete 3-axis accelerometer with signal conditioned voltage outputs. The product measures acceleration with a minimum full-scale range of ±3 g.
The module was designed as breakout board because ADXL335&amp;rsquo;s signal is analog( more ports requested ). But the board outline is grove module that you can fix it conveniently like other groves. The sensor combined 3.3 and 5V power supply, can be used in standard Arduino device and Seeeduino Stalker. The following program code includes first-order filter which can make the output smoothly if the sensor was used in robot or toy car.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-3-Axis-Analog-Accelerometer-p-1086.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Wide power range DC3V to 5V&lt;/li&gt;
&lt;li&gt;Grove outline&lt;/li&gt;
&lt;li&gt;3 axis sensing&lt;/li&gt;
&lt;li&gt;Small, low-profile package: 4×4×1.45mm LFCSP&lt;/li&gt;
&lt;li&gt;Low power 350µA at 3V (typical)&lt;/li&gt;
&lt;li&gt;High sensitive&lt;/li&gt;
&lt;li&gt;10,000 g shock survival&lt;/li&gt;
&lt;li&gt;BW adjustment with a single capacitor per axis&lt;/li&gt;
&lt;li&gt;RoHS/WEEE lead-free compliant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;application-ideas&#34;&gt;Application Ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Motion Sensor&lt;/li&gt;
&lt;li&gt;Shock detector&lt;/li&gt;
&lt;li&gt;Vibration sensor&lt;/li&gt;
&lt;li&gt;Toy car&lt;/li&gt;
&lt;li&gt;Robot&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;before-usage&#34;&gt;Before usage&lt;/h2&gt;

&lt;p&gt;We suggest you to read those knowledge before using the Gas sensor, it&amp;rsquo;ll help you to learn more about Arduino and our products, and also it&amp;rsquo;ll let you to use open souse hardware more easier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.seeed.cc/Getting_Started_with_Seeeduino&#34;&gt;Getting Started with Arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.seeed.cc/Grove_System&#34;&gt;What is Grove system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.seeed.cc/Base_Shield_V2&#34;&gt;Why i need a Base shield?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After reading that you will know how to use Base shield with Grove products to work well with Arduino. Let&amp;rsquo;s start it !&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The sensor&amp;rsquo;s outline is breakout board, you can welding wire in the board or use jumper wire to connect the sensor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The VCC connect to power source（DC5V or DC3.3V）, GND to ground, X to Arduino analog port A0, Y to A1, Z to A2.
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/img/Grove-3-axis_analog_accelerometer_V1.0_hardware.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Download the &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/res/AnalogAccelerometer.zip&#34;&gt;3-Axis Analog Accelerometer Library&lt;/a&gt; and Unzip it into the libraries file of Arduino IDE by the path: ..\arduino-1.0.1\libraries.&lt;/li&gt;
&lt;li&gt;Regulate the sensor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sensor is analog device, you should regulate the sensor before combining it with your system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Open the Demo: Calibration and upload it to Arduino.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Open your serial monitor, make sure the sensor is connected. Follow the axis institutions printed on sensor&amp;rsquo;s board. First, make sure that Z-axis direction is straight up, please type any character if you are ready. Change the sensor position, repeat the above operation to obtain X-axis and Y-axis direction are straight up .&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/img/3-Axis_Analog_Accelerometer.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; You can get the values as shown above. Please modify the macro definitions with these results in ADXL335.h&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/img/Analog_Accelerometer_Code.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the calibration has been completed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Downloading the demo code: Measuring Acceleration, then open serial monitor, turn the sensor any angle, you can see the digital angle value sent from the accelerometer to the monitor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/img/3-Axis_Analog_Accelerometer1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/res/Grove-3-Axis_Analog_Accelerometer_Eagle_File.zip&#34;&gt;Grove - 3-Axis Analog Accelerometer Eagle File&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/res/AnalogAccelerometer.zip&#34;&gt;3-Axis Analog Accelerometer Library&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_3Axis_Analog_Accelerometer&#34;&gt;github repository for 3-Axis Analog Accelerometer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-3-Axis_Analog_Accelerometer/master/res/ADXL335_datasheet.pdf&#34;&gt;ADXL335 datasheet.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_3-Axis_Analog_Accelerometer --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Barometer (High-Accuracy)</title>
      <link>http://wiki.seeed.cc/Grove-Barometer-High-Accuracy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Barometer-High-Accuracy/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer-High-Accuracy/master/img/Grove-Barometer-High-Accuracy.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This Grove - Barometer (High-Accuracy) Sensor features a HP206C high-accuracy chip to detect barometric pressure ,Altimeter and temperature. It can widely measure pressure ranging from 300mbar~1200mbar, with a super high accuracy of 0.01mbar(0.1m) in ultra-high resolution mode.The chip only accepts 1.8V to 3.6V input voltage. However, with outer circuit added, this module becomes compatible with 3.3V and 5V. Therefore, it can be used on Arduino/Seeeduino or Seeeduino Stalker without modification.It is designed to be connected directly to a micro-controller via the I2C bus.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Barometer-(High-Accuracy)-p-1865.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Digital two wire (I2C) interface&lt;/li&gt;
&lt;li&gt;Command-based Reading, Compensated (Optional)&lt;/li&gt;
&lt;li&gt;Programmable Events and Interrupt Controls&lt;/li&gt;
&lt;li&gt;Full Data Compensation&lt;/li&gt;
&lt;li&gt;Wide barometric pressure range&lt;/li&gt;
&lt;li&gt;Flexible supply voltage range&lt;/li&gt;
&lt;li&gt;Ultra-low power consumption&lt;/li&gt;
&lt;li&gt;Altitude Resolution down to 0.01 meter&lt;/li&gt;
&lt;li&gt;Temperature measurement included&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;application-ideas&#34;&gt;Application Ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;High Precision Mobile Altimeter / Barometer&lt;/li&gt;
&lt;li&gt;Industrial Pressure and Temperature Sensor System&lt;/li&gt;
&lt;li&gt;Automotive Systems&lt;/li&gt;
&lt;li&gt;Personal Electronics Altimetry&lt;/li&gt;
&lt;li&gt;Adventure and Sports watches&lt;/li&gt;
&lt;li&gt;Medical Gas Control System&lt;/li&gt;
&lt;li&gt;Weather Station Equipment&lt;/li&gt;
&lt;li&gt;Indoor Navigation and Map Assist&lt;/li&gt;
&lt;li&gt;Heating, Ventilation, Air Conditioning&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;80%&#34;&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34;&gt;
Item
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Min
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Typical
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Max
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Unit
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Voltage
&lt;/th&gt;
&lt;td&gt;
3.3
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;td&gt;
5.5
&lt;/td&gt;
&lt;td&gt;
VDC
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Current
&lt;/th&gt;
&lt;td&gt;
635
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
1100
&lt;/td&gt;
&lt;td&gt;
uA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Pressure Range
&lt;/th&gt;
&lt;td&gt;
300
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
1200
&lt;/td&gt;
&lt;td&gt;
hPa
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Faster I2C data transfer
&lt;/th&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
10
&lt;/td&gt;
&lt;td&gt;
MHz
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Dimension
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
20.4*41.8*9.7
&lt;/td&gt;
&lt;td&gt;
mm
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Weight
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
/
&lt;/td&gt;
&lt;td&gt;
g
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino-arduino-arduino&#34;&gt;With &lt;a href=&#34;http://wiki.seeed.cc/Arduino&#34; title=&#34;Arduino&#34;&gt;Arduino&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Barometric condition is one of the criteria used to predict coming change in weather and deduce altitude above sea level. Here is a demo to show you how to read the barometric data from this Grove - Barometer Sensor.&lt;/p&gt;

&lt;p&gt;1.Connect it to I2C port of Seeeduino or Grove - Base Shield via a Grove cable. And connect Arduino to PC via a USB cable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer-High-Accuracy/master/img/Grove-Barometer_Sensor_hard.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2.Download the library &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Barometer_HP20x&#34;&gt;Grove_Barometer_HP20x&lt;/a&gt;;Unzip it into the libraries file of Arduino IDE by the path: ..\arduino-1.0.1\libraries.&lt;/p&gt;

&lt;p&gt;3.Create a new Arduino sketch and paste the codes below to it or open the code directly by the path:File -&amp;gt; Example -&amp;gt;Barometer_Sensor-&amp;gt;Barometer_Sensor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
* Demo name  ?: HP20x_dev demo
* Usage      ?: I2C PRECISION BAROMETER AND ALTIMETER [HP206C hopeRF]
* Author     ?: Oliver Wang from Seeed Studio
* Version    ?: V0.1
* Change log ?: Add kalman filter 2014/04/04
*/

#include &amp;lt;HP20x_dev.h&amp;gt;
#include &amp;lt;KalmanFilter.h&amp;gt;

#include &amp;quot;Arduino.h&amp;quot;
#include &amp;quot;Wire.h&amp;quot;

unsigned char ret = 0;

    /* Instance */
KalmanFilter t_filter;    //temperature filter
KalmanFilter p_filter;    //pressure filter
KalmanFilter a_filter;    //altitude filter


void setup()
{
    Serial.begin(9600);        // start serial for output

    Serial.println(&amp;quot;****HP20x_dev demo by seeed studio****\n&amp;quot;);
    Serial.println(&amp;quot;Calculation formula: H = [8.5(101325-P)]/100 \n&amp;quot;);
      /* Power up,delay 150ms,until voltage is stable */
    delay(150);
      /* Reset HP20x_dev */
    HP20x.begin();
    delay(100);

      /* Determine HP20x_dev is available or not */
    ret = HP20x.isAvailable();
    if(OK_HP20X_DEV == ret)
    {
        Serial.println(&amp;quot;HP20x_dev is available.\n&amp;quot;);
    }
    else
    {
        Serial.println(&amp;quot;HP20x_dev isn&#39;t available.\n&amp;quot;);
    }

}


void loop()
{
    char display[40];
    if(OK_HP20X_DEV == ret)
    {
        Serial.println(&amp;quot;------------------\n&amp;quot;);
        long Temper = HP20x.ReadTemperature();
        Serial.println(&amp;quot;Temper:&amp;quot;);
        float t = Temper/100.0;
        Serial.print(t);
        Serial.println(&amp;quot;C.\n&amp;quot;);
        Serial.println(&amp;quot;Filter:&amp;quot;);
        Serial.print(t_filter.Filter(t));
        Serial.println(&amp;quot;C.\n&amp;quot;);

        long Pressure = HP20x.ReadPressure();
        Serial.println(&amp;quot;Pressure:&amp;quot;);
        t = Pressure/100.0;
        Serial.print(t);
        Serial.println(&amp;quot;hPa.\n&amp;quot;);
        Serial.println(&amp;quot;Filter:&amp;quot;);
        Serial.print(p_filter.Filter(t));
        Serial.println(&amp;quot;hPa\n&amp;quot;);

        long Altitude = HP20x.ReadAltitude();
        Serial.println(&amp;quot;Altitude:&amp;quot;);
        t = Altitude/100.0;
        Serial.print(t);
        Serial.println(&amp;quot;m.\n&amp;quot;);
        Serial.println(&amp;quot;Filter:&amp;quot;);
        Serial.print(a_filter.Filter(t));
        Serial.println(&amp;quot;m.\n&amp;quot;);
        Serial.println(&amp;quot;------------------\n&amp;quot;);
        delay(1000);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.Open the serial monitor to receive the sensor&amp;rsquo;s data including temperature, barometric pressure value, relative atmosphere pressure and altitude.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer-High-Accuracy/master/img/Barometer_Sensor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following is a reference graph plotting out the relationship between altitude above sea level and barometric pressure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer-High-Accuracy/master/img/Pressure_and_Altitude.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer-High-Accuracy/master/res/Grove_Barometer_High-Accuracy_v1.0_sch_pcb.zip&#34;&gt;Grove_Barometer_High-Accuracy_v1.0_sch_pcb Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Barometer-High-Accuracy/master/res/HP206C_Datasheet.pdf&#34;&gt;HP206C Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Barometer_HP20x&#34;&gt;Github repository for Grove_Barometer_HP20x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Barometer_(High-Accuracy) --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Digital Infrared Temperature Sensor</title>
      <link>http://wiki.seeed.cc/Grove-Digital_Infrared_Temperature_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Digital_Infrared_Temperature_Sensor/</guid>
      <description>

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Digital_Infrared_Temperature_Sensor/master/img/Grove－Digital_Infrared_Temperature_Sensor_1.jpg&#34;&gt;&lt;/td&gt;
        &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Digital_Infrared_Temperature_Sensor/master/img/Grove－Digital_Infrared_Temperature_Sensor_2.jpg&#34;&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The Digital Infrared temperature sensor is a non-contact temperature measurement module which bases on MLX90615.Both the IR sensitive thermopile detector chip and the signal conditioning chip are integrated in the same package.This module communicates with Arduino using SMBus,up to 127 sensors can be read via common 2 wires.Thanks to the module&amp;rsquo;s low noise amplifier, 16-bit ADC and powerful DSP unit, it can achieved a high accuracy of 1℃ over wide temperature rage and a high measurement resolution of 0.02℃.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-Digital-Infrared-Temperature-Sensor-p-2385.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;50%&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Item
&lt;/th&gt;
&lt;th&gt;
Min
&lt;/th&gt;
&lt;th&gt;
Typical
&lt;/th&gt;
&lt;th&gt;
Max
&lt;/th&gt;
&lt;th&gt;
Unit
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Voltage
&lt;/th&gt;
&lt;td&gt;
2.6
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
3.4
&lt;/td&gt;
&lt;td&gt;
V
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Current
&lt;/th&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
1.4
&lt;/td&gt;
&lt;td&gt;
1.5
&lt;/td&gt;
&lt;td&gt;
mA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Ambient Temperature Range
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
-40 - 85
&lt;/td&gt;
&lt;td&gt;
℃
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Object Temperature Range
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
-40 - 115
&lt;/td&gt;
&lt;td&gt;
℃
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Dimension
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
 20x40x9.6
&lt;/td&gt;
&lt;td&gt;
mm
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Digital_Infrared_Temperature_Sensor/master/img/Grove－Digital_Infrared_Temperature_Sensor_4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin Number&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Function Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Signal ground&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;Positive Power Supply Input Terminal(3.3V or 5V)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;SDA&lt;/td&gt;
&lt;td&gt;in/out&lt;/td&gt;
&lt;td&gt;I2C data input/output&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;SCL&lt;/td&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;I2C CLK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;We will provide an example here to show you how to use this sensor to measure the temperature of the target which is in front of the sensor,and print the result on the serial monitor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connect this module to seeeduino using &lt;a href=&#34;http://wiki.seeed.cc/Base_Shield_V2&#34; title=&#34;Grove - Base Shield&#34;&gt;Grove - Base Shield&lt;/a&gt; port D2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Digital_Infrared_Temperature_Sensor/master/img/Digital_Infrared_Temperature_Sensor4.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;software-part&#34;&gt;Software Part&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download the library and demo code &lt;a href=&#34;https://github.com/Seeed-Studio/Digital_Infrared_Temperature_Sensor_MLX90615&#34;&gt;Digital_Infrared_Temperature_Sensor_MLX90615&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unzip it into the libraries file of Arduino IDE by the path: ..\arduino-1.0.5\libraries.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the demo code directly by the path:File -&amp;gt; Examples -&amp;gt;Digital_Infrared_Temperature_Sensor_MLX90615-&amp;gt;MLX90615Soft.&lt;/p&gt;

&lt;p&gt;You can see :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Digital_Infrared_Temperature_Sensor/master/img/MLX90615_demo_code.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Since the sensor is factory calibrated with the digital SMBus compatible interface enabled,but the library is based on a soft i2c library,so you can use any digital pins on any AVR chip to drive the SDA and SCL lines.We use D2 as the SCL pin and D3 as the SDA pin in this demo code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Upload the code into Arduino.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start up the Serial Monitor.&lt;/p&gt;

&lt;p&gt;You can see :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Digital_Infrared_Temperature_Sensor/master/img/Digital_Infrared_Temperature_Sensor_Serial_Monitor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, you can measure the temperature with this sensor.Ambient temperature is the MLX90615 package temperature and Object temperature is the object target temperature.According to our experiment,when you place the sensor in the normal indoor temperature,and ensure that there is nothing source of heat in front of the sensor&amp;rsquo;s 1M scope.The Object temperature will approximately equal to Ambient temperature.When measuring the Object temperature,you should ensure the object is as close as possible whit the sensor,but do not touch the surface of the sensor,we recommend the distance is less than 3cm. Wish you have a fun try.&lt;/p&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Digital_Infrared_Temperature_Sensor/master/res/Grove_Digital_Infrared_Temperature_Sensor_v1.0_eagle_file.zip&#34; title=&#34;File:Grove Digital Infrared Temperature Sensor v1.0 eagle file.zip&#34;&gt;Grove Digital Infrared Temperature Sensor v1.0 eagle file.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Digital_Infrared_Temperature_Sensor/master/res/MLX90615.pdf&#34; title=&#34;File:MLX90615.pdf&#34;&gt;MLX90615.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Digital_Infrared_Temperature_Sensor_MLX90615&#34;&gt;Demo Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Digital_Infrared_Temperature_Sensor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Haptic Motor</title>
      <link>http://wiki.seeed.cc/Grove-Haptic_Motor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Haptic_Motor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Haptic_Motor/master/img/Grove_Haptic_Motor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - Haptic motor is a grove module integrated with &lt;a href=&#34;http://www.ti.com/product/DRV2605L&#34;&gt;DRV2605L&lt;/a&gt; which will give your project more feelings. This motor is specially designed for various effects, such as ramping the vibration level up and down, for wearables and other IoT devices. Right now we have developed an easy-to-use library which simulate 123 kinds in total of vibrating modes and this will make your prototyping quicker. Also, you can develop more advanced functions with driver DRV2605L which will improve actuator performance in terms of acceleration consistency, start time, and break time and is accessible through a shared I2C compatible bus or PWM input signal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove%C2%A0%C2%A0Haptic%C2%A0Motor-p-2546.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;More vibration effects.&lt;/li&gt;
&lt;li&gt;Quicken your project prototyping process.&lt;/li&gt;
&lt;li&gt;Easy-to-use library with 123 kinds of vibrating modes.&lt;/li&gt;
&lt;li&gt;Powerful driver to implanting more advanced functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Operating voltage&lt;/td&gt;
&lt;td&gt;3.3~5.0 V&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ripples (at maximum power)&lt;/td&gt;
&lt;td&gt;50~100 mV&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Max power&lt;/td&gt;
&lt;td&gt;750 mW&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I2C speed&lt;/td&gt;
&lt;td&gt;100 kHz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Vibration effects&lt;/td&gt;
&lt;td&gt;123 types&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Driver&lt;/td&gt;
&lt;td&gt;DRV2605L&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;I&lt;sup&gt;2&lt;/sup&gt;C&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Default I&lt;sup&gt;2&lt;/sup&gt;C Address&lt;/td&gt;
&lt;td&gt;0x5A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;application-ideas&#34;&gt;Application ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mobile phone, tablets.&lt;/li&gt;
&lt;li&gt;Wearable devices.&lt;/li&gt;
&lt;li&gt;Remote controls, touch-enabled devices.&lt;/li&gt;
&lt;li&gt;Industrial human-machine interfaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Front view:&lt;/strong&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Haptic_Motor/master/img/Grove_Haptic_Motor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rear view:&lt;/strong&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Haptic_Motor/master/img/Grove_Haptic_Motor_back.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
This section only shows you how to build a basic development environment. You can build a development environment for your project with following guides:
&lt;/div&gt;

&lt;h3 id=&#34;build-ide&#34;&gt;Build IDE&lt;/h3&gt;

&lt;p&gt;Refer to following guides to building an appropriate IDE:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.seeed.cc/Seeeduino_v4.2#Getting_Started_on_Windows&#34;&gt;Getting Started on Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.seeed.cc/Seeeduino_v4.2#Getting_Started_on_Mac_OS_X&#34;&gt;Getting Started on Mac OS X&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
Arduino board will also be fine if you happen to have no Seeeduino board because &lt;a href=&#34;http://wiki.seeed.cc/Seeeduino_v4.2&#34;&gt;Seeeduino&lt;/a&gt; is compatible with Arduino.
&lt;/div&gt;

&lt;h3 id=&#34;hardware-connection&#34;&gt;Hardware connection&lt;/h3&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Notes&lt;/p&gt;
&lt;p&gt;a. Make sure you have built a development environment successful through previous steps.&lt;/p&gt;
&lt;p&gt;b.Make sure your board has selected Arduino Uno and COM port right chosen. Connect to I&lt;sup&gt;2&lt;/sup&gt;C interface on Seeeduino board and Haptic motor with grove wire.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Haptic_Motor/master/img/Grove_haptic_motor_connection.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;download-sample-code&#34;&gt;Download sample code&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You can download &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Haptic_Motor&#34;&gt;sample code&lt;/a&gt; and library or header files.&lt;/li&gt;
&lt;li&gt;Click a button named &amp;ldquo;Download Zip&amp;rdquo; at &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Haptic_Motor&#34;&gt;Github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Decompress the downloaded ZIP file.&lt;/li&gt;
&lt;li&gt;Remove the &amp;ldquo;-master&amp;rdquo; twice in decompressed file name.&lt;/li&gt;
&lt;li&gt;Copy the folder Grove_Haptic_Motor into your library folder (In default, it is same with Sketchbook Location which can be found by clicking File &amp;gt; Preference).Under Windows, it will likely be called &amp;ldquo;My Documents\Arduino\libraries&amp;rdquo;. For Mac users, it will likely be called &amp;ldquo;Documents/Arduino/libraries&amp;rdquo;. On Linux, it will be the &amp;ldquo;libraries&amp;rdquo; folder in your sketchbook.&lt;/li&gt;
&lt;li&gt;Copy file &lt;strong&gt;drv2605.cpp&lt;/strong&gt; and file &lt;strong&gt;drv2605.h&lt;/strong&gt; to its parent directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;load-sample-code&#34;&gt;Load sample code&lt;/h3&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
In this case we use &lt;a href=&#34;http://wiki.seeed.cc/Seeeduino_v4.2&#34;&gt;Seeeduino 4.2&lt;/a&gt; as experiment board which is a compatible board with Arduino.
&lt;/div&gt;

&lt;div class=&#34;admonition tip&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Tip&lt;/p&gt;
You can use &lt;a href=&#34;http://wiki.seeed.cc/Base_Shield_V2&#34;&gt;Base shield v2&lt;/a&gt; as expansion board which will make your connection of modules simple.
&lt;/div&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Warning&lt;/p&gt;
Never touch driver DRV2605L which may cause damage to it when it is powered.
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Haptic_Motor/master/img/Grove_Haptic_Motor_cautions.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure haptic motor and main control board well connected.&lt;/li&gt;
&lt;li&gt;Load your sample code drv2605.ino under example file of decompressed file.&lt;/li&gt;
&lt;li&gt;Flash your code to your main control board by click Project-&amp;gt;Upload(CTRL+U).&lt;/li&gt;
&lt;li&gt;After uploading, you now get haptic motor vibrate at a smooth style.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Schematic files in &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Haptic_Motor/master/res/Grove_Haptic_Motor_v0.9_Eagle.zip&#34;&gt;Eagle format&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Haptic_Motor/master/res/Grove_Haptic_Motor_v0.9_SCH.pdf&#34;&gt;PDF format&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ti.com/product/DRV2605L&#34;&gt;More about drive circuit DRV2605L&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Haptic_Motor&#34;&gt;Git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Haptic_Motor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - I2C Color Sensor</title>
      <link>http://wiki.seeed.cc/Grove-I2C_Color_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-I2C_Color_Sensor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Grove-I2C-Color-Sensor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This module is based on the color sensor TCS3414CS with digital output I2C. Based on the 8*2 array of filtered photodiodes and 16-bit analog-to-digital converters, you can measure the color chromaticity of ambient light or the color of objects. Of the 16 photodiodes, 4 have red filters, 4 have green filters, 4 have blue filters and 4 have no filter(clear). With the synchronization input pin, an external pulsed light source can provide precise synchronous conversion control.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/grove-i2c-color-sensor-p-854.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grove compatible interface&lt;/li&gt;
&lt;li&gt;16-Bit digital output with I2C&lt;/li&gt;
&lt;li&gt;SYNC Input Synchronizes Integration Cycle to Modulated Light Sources&lt;/li&gt;
&lt;li&gt;Operating temperature range -40°C to 85°C&lt;/li&gt;
&lt;li&gt;Programmable interrupt function with User-Defined Upper and lower threshold settings&lt;/li&gt;
&lt;li&gt;RoHS Compliant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Value/Range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PCB Size&lt;/td&gt;
&lt;td&gt;2.0 cm * 4.0 cm&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;2.0mm pitch pin header&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td&gt;3.3 - 6.0 V&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I2C Speed&lt;/td&gt;
&lt;td&gt;400 kHz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Following documents help in getting the user started with Grove.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/document/pdf/Preface.pdf&#34;&gt;Preface - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/document/pdf/Introduction%20to%20Grove.pdf&#34;&gt;to Grove&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware-connections&#34;&gt;Hardware Connections&lt;/h3&gt;

&lt;p&gt;Grove products have an eco system and all have the same connector which can plug onto the &lt;a href=&#34;http://wiki.seeed.cc/Base_Shield_V2&#34;&gt;Grove Base Shield&lt;/a&gt;. Connect this module to the I2C port of Base Shield. However, you can also connect Grove - I2C Color Sensor to Arduino without Base Shield by jumper wires.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arduino UNO&lt;/th&gt;
&lt;th&gt;Grove - I2C Color Sensor&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SDA&lt;/td&gt;
&lt;td&gt;SDA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SCL&lt;/td&gt;
&lt;td&gt;SCL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;software-installation&#34;&gt;Software Installation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.seeed.cc/Download_Arduino_and_install_Arduino_driver&#34;&gt;Download Arduino and install Arduino driver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.seeed.cc/Getting_Started_with_Seeeduino&#34;&gt;Getting Started with Seeeduino/Arduino&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;demos&#34;&gt;Demos&lt;/h2&gt;

&lt;p&gt;This module can be used to detect the color of light source or the color of objects. When used to detect the color of the light source, the led switch should be turned off, and the light source should shine the sensor directly. When used to detect the color of things, the led should be on and you should put the object on the top of the enclosure closely. The theory of sensing the color of objects is Reflective Sensing Theory. Like the picture below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Reflcect.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;color-sensor-library&#34;&gt;Color Sensor Library&lt;/h3&gt;

&lt;p&gt;We have created a library to help you start playing quickly with the Seeeduino/Arduino, in this section we&amp;rsquo;ll show you how to set up the library.&lt;/p&gt;

&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Download the &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_I2C_Color_Sensor&#34;&gt;library code as a zip file&lt;/a&gt; from the Grove_I2C_Color_Sensor github page.&lt;/li&gt;
&lt;li&gt;Unzip the downloaded file into your …/arduino/libraries.&lt;/li&gt;
&lt;li&gt;Rename the unzipped folder &amp;ldquo;Color_Sensor&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Start the Arduino IDE (or restart if it is open).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;description-of-function&#34;&gt;Description of function&lt;/h4&gt;

&lt;p&gt;This is the most important/useful function in the library, we invite you to look at the .h and .cpp files yourself to see all the functions available.&lt;/p&gt;

&lt;h5 id=&#34;read-rgb-data-through-the-library-function&#34;&gt;Read RGB data through the library function&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;readRGB(int *red, int *green, int *blue)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;red:&lt;/strong&gt; The variable address to save R.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;green:&lt;/strong&gt; The variable address to save G.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blue:&lt;/strong&gt; The variable address to save B.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;void loop()
{
    int red, green, blue;
    GroveColorSensor colorSensor;
    colorSensor.ledStatus = 1;            // When turn on the color sensor LED, ledStatus = 1; When turn off the color sensor LED, ledStatus = 0.
    while(1)
    {
        colorSensor.readRGB(&amp;amp;red, &amp;amp;green, &amp;amp;blue);    //Read RGB values to variables.
        delay(300);
        Serial.print(&amp;quot;The RGB value are: RGB( &amp;quot;);
        Serial.print(red,DEC);
        Serial.print(&amp;quot;, &amp;quot;);
        Serial.print(green,DEC);
        Serial.print(&amp;quot;, &amp;quot;);
        Serial.print(blue,DEC);
        Serial.println(&amp;quot; )&amp;quot;);
        colorSensor.clearInterrupt();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;color-sensor-examples-applications&#34;&gt;Color Sensor Examples/Applications&lt;/h3&gt;

&lt;p&gt;This example shows how to use features of Grove - I2C Color Sensor and display the detected color with a &lt;a href=&#34;http://wiki.seeed.cc/Grove-Chainable_RGB_LED&#34;&gt;Chainable RGB LED Grove&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
If you haven&#39;t downloaded  &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Chainable_RGB_LED&#34;&gt;Grove-Chainable RGB LED library&lt;/a&gt; to your Arduino IDE before, please download and set up the library first.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Open File-&amp;gt;Examples-&amp;gt;Color_Sensor-&amp;gt;example-&amp;gt;ColorSensorWithRGB-LED sketch for a complete example, or copy and paste code below to a new Arduino sketch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This example can measure the color chromaticity of ambient light or the color of objects, and via Chainable RGB LED Grove, display the detected color.&lt;/p&gt;

&lt;p&gt;You also can use other display modules to display the detected color by Grove - I2C Color Sensor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Wire.h&amp;gt;
#include &amp;lt;GroveColorSensor.h&amp;gt;
#include &amp;lt;ChainableLED.h&amp;gt;
 
#define CLK_PIN   7
#define DATA_PIN  8
#define NUM_LEDS  1            //The number of Chainable RGB LED
 
ChainableLED leds(CLK_PIN, DATA_PIN, NUM_LEDS);
 
void setup()
{
    Serial.begin(9600);
    Wire.begin();
}
 
void loop()
{
    int red, green, blue;
    GroveColorSensor colorSensor;
    colorSensor.ledStatus = 1;            // When turn on the color sensor LED, ledStatus = 1; When turn off the color sensor LED, ledStatus = 0.
    while(1)
    {
        colorSensor.readRGB(&amp;amp;red, &amp;amp;green, &amp;amp;blue);    //Read RGB values to variables.
        delay(300);
        Serial.print(&amp;quot;The RGB value are: RGB( &amp;quot;);
        Serial.print(red,DEC);
        Serial.print(&amp;quot;, &amp;quot;);
        Serial.print(green,DEC);
        Serial.print(&amp;quot;, &amp;quot;);
        Serial.print(blue,DEC);
        Serial.println(&amp;quot; )&amp;quot;);
        colorSensor.clearInterrupt();
        for(int i = 0; i&amp;lt;NUM_LEDS; i++)
        {
            leds.setColorRGB(i, red, green, blue);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Upload the code to the development board.&lt;/li&gt;
&lt;li&gt;Then Grove_-_Chainable_RGB_LED would display the color which is detected.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-reference&#34;&gt;Other Reference&lt;/h2&gt;

&lt;p&gt;This module is based on the color sensor TCS3414CS. The TCS3414CS digital color sensor returns data from four channels: red&amp;reg;, green(G), blue(B) and clear&amp;copy;(non-filtered). The response from the red, green and blue channels (RGB) can be used to determine a particular source’s chromaticity coordinates (x, y). These standards are set by the Commission Internationale de l’Eclairage (CIE). The CIE is the main international organization concerned with color and color measurement.In order to acquire the color of a given object using TCS3414CS, we must first map the sensor response (RGB) to the CIE tristimulus values (XYZ). It is then necessary to calculate the chromaticity coordinates (x, y).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Coordinates_transform.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Chromaticity Calculation Process Overview&lt;/p&gt;

&lt;p&gt;The equations to do the transformation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Equations.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Transformation Equations&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we get coordinates (x, y), please reference the below figure so as to get the recommended color.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Chromaticity_Diagram.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_I2C_Color_Sensor&#34;&gt;Library Grove - I2C Color Sensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/res/Twig-I2C_Color_sensor_v0.9b_eagle_files.zip&#34;&gt;Grove-I2C Color Sensor Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/res/TCS3404_TCS3414-A.pdf&#34;&gt;TCS3414-A Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/li&gt;&lt;/p&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_I2C_Color_Sensor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - I2C FM Receiver</title>
      <link>http://wiki.seeed.cc/Grove-I2C_FM_Receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-I2C_FM_Receiver/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_FM_Receiver/master/img/Grove-I2C_FM_Receiver_Photo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - I2C FM Receiver is a wideband FM receiver module, this module is based on RDA5807M. The RDA5807M series is the newest generation single-chip broadcast FM stereo radio tuner with fully integrated synthesizer. The RDA5807M series has a powerful low-IF digital audio processor. The Grove - I2C FM Receiver has a headset jack, so it can connect to earphones or audio.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-I2C-FM-Receiver-p-1953.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;version-tracker&#34;&gt;Version Tracker&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Revision&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Release date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Grove - I2C FM Receiver v1.0&lt;/td&gt;
&lt;td&gt;Initial public release&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Grove - I2C FM Receiver v1.1&lt;/td&gt;
&lt;td&gt;Fixed bug - DFM for J3&lt;/td&gt;
&lt;td&gt;Dec 2, 2011&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grove interface&lt;/li&gt;
&lt;li&gt;Supports worldwide frequency band: 50 - 115MHz&lt;/li&gt;
&lt;li&gt;Support RDS/RBDS&lt;/li&gt;
&lt;li&gt;Lower power consumption&lt;/li&gt;
&lt;li&gt;Headset interface&lt;/li&gt;
&lt;li&gt;Digital auto gain control&lt;/li&gt;
&lt;li&gt;Input voltage: 3.3V - 5V&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;We can change channel by Grove - Button and adjust volume by Grove - Rotary&lt;/p&gt;

&lt;h3 id=&#34;hardware-installation&#34;&gt;Hardware Installation&lt;/h3&gt;

&lt;p&gt;Part list：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seeeduino Lotus&lt;/li&gt;
&lt;li&gt;Grove - I2C FM Receiver&lt;/li&gt;
&lt;li&gt;Grove - Button&lt;/li&gt;
&lt;li&gt;Grove - Rotary&lt;/li&gt;
&lt;li&gt;Earphone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_FM_Receiver/master/img/Grove-I2C_FM_Receiver_Usage.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;software-part&#34;&gt;Software Part&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download the code &lt;a href=&#34;https://github.com/Seeed-Studio/I2C_FM_Receiver&#34;&gt;I2C FM Receiver&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unzip it into the libraries file of Arduino IDE by the path: ..\arduino-1.0.5\libraries.&lt;/li&gt;
&lt;li&gt;Open the code directly from the path: File -&amp;gt; Example -&amp;gt; I2C_FM_Receiver.&lt;/li&gt;
&lt;li&gt;Upload the code. Note that you should select the correct board type and COM port.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see Center Frequency:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_FM_Receiver/master/img/Grove-I2C_FM_Receiver_com.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_FM_Receiver/master/res/Grove_I2C_FM_Receiver_v1.0.zip&#34;&gt;Grove - I2C FM Receiver v1.0 Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_FM_Receiver/master/res/Grove_I2C_FM_Receiver_v1.1_PDF.pdf&#34;&gt;v1.0 Schematic in pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_FM_Receiver/master/res/RDA5807M_datasheet_v1.1.pdf&#34;&gt;Datasheet of RDA5807M&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_FM_Receiver/master/res/Grove_I2C_FM_Receiver_v1.1_Eagle.zip&#34;&gt;Grove - I2C FM Receiver v1.1 Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_I2C_FM_Receiver --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - I2C Touch Sensor</title>
      <link>http://wiki.seeed.cc/Grove-I2C_Touch_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-I2C_Touch_Sensor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Touch_Sensor/master/img/Grove-I2C-Touch-Sensor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The I2C Touch Sensor is based on the Proximity Capacitive Touch Sensor Controller from FreeScale - MPR121. It detects the touch or proximity of human fingers. This sensor includes a Touch Sensor controller and 4 finger feelers. One can insert the connectors of feelers into base of Sensor controller, and start sensing the touch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-I2C-Touch-Sensor-p-840.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Value/Range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Operating voltage&lt;/td&gt;
&lt;td&gt;3~5.5V&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Standby Mode Current&lt;/td&gt;
&lt;td&gt;2μA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Touch Channels&lt;/td&gt;
&lt;td&gt;12 (Including 4 with Touch feelers)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Communicating Protocol&lt;/td&gt;
&lt;td&gt;I2C&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I2C Address&lt;/td&gt;
&lt;td&gt;0x5A - 0x5D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Touch_Sensor/master/img/DSC_0030.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are 12 electrodes CH0-CH11. CH0-CH3 are connected to 4 Touch feelers.&lt;/p&gt;

&lt;p&gt;The CH4-CH11 are for customer expanding the function. If you need more, you can make the feelers by yourself.&lt;/p&gt;

&lt;p&gt;The wires of feelers are twisted to reduce the impact of environment. The black(ground) wire can be cut off if high sensitivity is needed.&lt;/p&gt;

&lt;p&gt;The INT pin has to be led out if customers want to use the interrupt pin of MPR121.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;h3 id=&#34;grove-help&#34;&gt;&lt;strong&gt;Grove - Help&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Following documents help in getting the user started with Grove.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/document/pdf/Preface.pdf&#34;&gt;Preface - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/document/pdf/Introduction%20to%20Grove.pdf&#34;&gt;to Grove&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
Since each electrode needs to be auto-configured by the MPR121 during power up and there is no power reset on the touch sensor controller, everytime you insert or remove a feeler, you need to reset the power of Seeeduino.
&lt;/div&gt;

&lt;p&gt;The feelers can also feel the human being fingers with something between, that&amp;rsquo;s to say, you do not need to touch the feelers with your fingers indeed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Touch_Sensor/master/img/DSC_0026.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Touch_Sensor/master/img/DSC_0027.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With a paperboard about 3 mm thick, the feeler can feel the touch of fingers, makes it a good solution for many applications.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_I2C_Touch_Sensor&#34;&gt;I2C Touch Sensor Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Touch_Sensor/master/res/I2C_Touch_Sensor_eagle_files-v1.1-.zip&#34;&gt;I2C Touch Sensor eagle files(v1.1).zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Touch_Sensor/master/res/Grove-I2C_Color_sensor_v1.2.pdf&#34;&gt;I2C Touch Sensor PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.seeed.cc/How_to_detect_finger_touch?&#34;&gt;How to detect finger touch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Touch_Sensor/master/res/Freescale_Semiconductor;MPR121QR2.pdf&#34;&gt;I2C Touch Sensor Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_I2C_Touch_Sensor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Mini I2C Motor Driver v1.0</title>
      <link>http://wiki.seeed.cc/Grove-Mini_I2C_Motor_Driver_v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Mini_I2C_Motor_Driver_v1/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Mini_I2C_motor_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This Grove - MIni I2C motor driver includes two DRV8830. The DRV8830 provides an integrated motor driver solution for battery-powered toys, printers, and other low-voltage or battery-powered motion control applications. The module has two H-bridge drivers, and can drive two DC motors or two winding of stepper motors, as well as other loads like solenoids.It requires an onboard 5V voltage regulator which can power the I2C bus. All driver lines are diode protected from back EMF.It features two LEDs for fault indicator and four LEDs to indicate which direction each motor is running. GROVE system plug and I2C interface enables you to daisy-chain the driver with many other devices.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove%C2%A0-%C2%A0I2C%C2%A0Mini%C2%A0Motor%C2%A0Driver-p-2508.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Without external power supply&lt;/li&gt;
&lt;li&gt;Two leds for fault indicator&lt;/li&gt;
&lt;li&gt;Default maximum drive current 200 mA&lt;/li&gt;
&lt;li&gt;Grove compatible&lt;/li&gt;
&lt;li&gt;I2C interface&lt;/li&gt;
&lt;li&gt;Motor&amp;rsquo;s speed and direction can control&lt;/li&gt;
&lt;li&gt;Number of channels: 2&lt;/li&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;application-ideas&#34;&gt;Application Ideas&lt;/h2&gt;

&lt;p&gt;This motor driver can be used to drive any brushed electronic motor as long as it doesn&amp;rsquo;t consume more than 1A at 5v.
Two motors can be driven simultaneously while set to a different speed and direction.
The speed can be set fully proportional and is controlled by I2C command.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Battery-Powered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Printers&lt;/li&gt;
&lt;li&gt;Toys&lt;/li&gt;
&lt;li&gt;Robotics&lt;/li&gt;
&lt;li&gt;Cameras&lt;/li&gt;
&lt;li&gt;Phones&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Small Actuators, Pumps, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some projects for your reference.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Make a Mini Toy Car&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Make a Steampunk Style Award&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Mini_toy_car.jpg&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Seeed_award2015.jpg&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.seeed.cc/project_detail.html?id=392&#34;&gt;Make it NOW!&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.seeed.cc/project_detail.html?id=1131&#34;&gt;Make it NOW!&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;80%&#34;&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34;&gt;
Item
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Min
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Typical
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Max
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Unit
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Working Voltage
&lt;/th&gt;
&lt;td&gt;
2.75
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;td&gt;
6.8
&lt;/td&gt;
&lt;td&gt;
VDC
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Max Output Current per channel
&lt;/th&gt;
&lt;td&gt;
0.2(default)
&lt;/td&gt;
&lt;td&gt;
-
&lt;/td&gt;
&lt;td&gt;
1
&lt;/td&gt;
&lt;td&gt;
A
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Input/output voltage on I2C bus
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
3.3/5
&lt;/td&gt;
&lt;td&gt;
V
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Communication protocol
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
I2C
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Default I2C Address
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
0xC0, 0xC4
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Mini_motor_driver.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Grove Interface&lt;/strong&gt; - Grove products have a eco system and all have a same connector which can plug onto the &lt;strong&gt;Base Shield&lt;/strong&gt;. Connect this module to the I&lt;sup&gt;2&lt;/sup&gt;C port of Base Shield, and then it can work well with Arduino. However, you can also connect Grove - Mini I2C Motor Driver to Arduino without Base Shield by jumper wires.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th width=&#34;150&#34;&gt;
Arduino UNO
&lt;/th&gt;
&lt;th width=&#34;150&#34;&gt;
Base Shield
&lt;/th&gt;
&lt;th width=&#34;150&#34;&gt;
Grove - Mini I2C Motor Driver
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;td&gt;
5V
&lt;/td&gt;
&lt;td rowspan=&#34;4&#34;&gt;
I2C port
&lt;/td&gt;
&lt;td&gt;
VCC
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;td&gt;
GND
&lt;/td&gt;
&lt;td&gt;
GND
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;td&gt;
SDA
&lt;/td&gt;
&lt;td&gt;
SDA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;td&gt;
SCL
&lt;/td&gt;
&lt;td&gt;
SCL
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CH1 fault indicator&lt;/strong&gt; - Channel 1 fault indicator.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CH2 fault indicator&lt;/strong&gt; - Channel 2 fault indicator.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Direction indicator&lt;/strong&gt; - Motor direction indicator.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CH1 Output Connector&lt;/strong&gt; - Motor 1 connector.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CH2 Output Connector&lt;/strong&gt; - Motor 2 connector.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware-function&#34;&gt;Hardware function&lt;/h2&gt;

&lt;h3 id=&#34;change-default-maximum-drive-current&#34;&gt;Change Default maximum drive current&lt;/h3&gt;

&lt;p&gt;The default maximum drive current of each channel is 200mA, see the front picture of the board&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/QQ20150817-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Each channel (CH1,CH2) has been added a resistor, and each value of resistor (R5,R12) is 1 Ω, so the maximum drive current is 200mA according to the following equation&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Mini_I2C_motor_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Meantime, each channel provides a reserved solderable pad (R6 for CH1, R13 for CH2), so you can solder a resistor onto the board to change the resistor value of each channel. Following is the new equation if adding resistor to the board&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Mini_I2C_motor_8.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Mini_I2C_motor_9.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;div class=&#34;admonition caution&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Caution&lt;/p&gt;
Maximum working current of each channel must be less than 1A. So the minimum value of resistor soldered to the reserved pad should not less than 0.2 Ω.
&lt;/div&gt;

&lt;h3 id=&#34;change-default-i-sup-2-sup-c-address&#34;&gt;Change Default I&lt;sup&gt;2&lt;/sup&gt;C Address&lt;/h3&gt;

&lt;p&gt;The I&lt;sup&gt;2&lt;/sup&gt;C address of each channel is changeable. Please take a look at the back side of the board, you will find there are 4 jumper pads; A0_CH1 and A1_CH1 are for channel 1, A0_CH2 and A1_CH2 are for channel 2, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Address_mini_i2c_motor_driver.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;You can solder or unsolder each jumper to change the I2C address:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 - You need a solder iron, just solder two sides of the jumper together&lt;/li&gt;
&lt;li&gt;0 - You need a solder iron, just unsolder two sides of the jumper.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Mini_I2C_motor_12.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
The library of Grove - Mini I2C Motor driver is dependent on the default address.
&lt;/div&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Now, let us begin to use the Grove - Mini I2C Motor Driver.&lt;/p&gt;

&lt;h3 id=&#34;preparations&#34;&gt;Preparations&lt;/h3&gt;

&lt;p&gt;Now we are making a demo for Grove - Mini I2C Motor Driver v1.0 which require following modules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 * DC Motor 2V-6V&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Seeeduino-Lite-p-1487.html&#34;&gt;Seeeduino Lite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Seeeduino Lite is compatible with Arduino.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using an Arduino UNO or any others Arduino compatible boards that with out a Grove connect,&lt;/p&gt;

&lt;p&gt;You will need a &lt;a href=&#34;http://www.seeedstudio.com/depot/base-shield-v13-p-1378.html?cPath=132_134&#34;&gt;Grove Base Shield&lt;/a&gt; to connect the Grove easily.&lt;/p&gt;

&lt;p&gt;If this is your first time using Arduino or Seeeduino, Please put hand on &lt;a href=&#34;http://wiki.seeed.cc/Getting_Started_with_Seeeduino&#34;&gt;here&lt;/a&gt; to start your Arduino journey.&lt;/p&gt;

&lt;h3 id=&#34;hardware-installation&#34;&gt;Hardware Installation&lt;/h3&gt;

&lt;p&gt;Grove - Mini I2C Motor Driver got one Grove socket for connecting two modules above.
They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 * DC Motor 2V-6V - connnect to CH1 &amp;amp; CH2 Output connector.&lt;/li&gt;
&lt;li&gt;Seeeduino Lite&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connect Seeeduino&amp;rsquo;s Grove I2C Interface to Mini Motor Driver&amp;rsquo;s Grove Interface as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Mini_motor_driver_demo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;software-work&#34;&gt;Software Work&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://https://www.arduino.cc/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/img/Arduino_mini_i2c_motor_driver.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Grove - Mini I2C Motor Driver can control motor which is based on the chip DRV8830. The DRV8830 is not just a dual motor driver, it is a dual H-bridge. An h-bridge is basically a specific setup of transistors that allow you to switch direction of current. You can use your Arduino to make them spin at any speed.&lt;/p&gt;

&lt;p&gt;Because the module has 2 H-bridges, you can not only make a robot go forwards and backwards, but also turn around by having each wheel spin in a different direction.&lt;/p&gt;

&lt;p&gt;Connect Seeeduino to computer use a micro USB cable.&lt;/p&gt;

&lt;p&gt;Now, let us use the Grove - Mini I2C Motor Driver to control two DC motors rotating in the positive or opposite direction.&lt;/p&gt;

&lt;p&gt;Given below is an example program to be used with an Arduino. The code for this is very basic, but you can also change it and do it your own way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/****************************************************************
Example code demonstrating the use of the Arduino Library for
the SparkFun MiniMoto board, which uses the TI DRV8830 IC for I2C
low-voltage DC motor control.
 
This code is beerware; if you use it, please buy me (or any other
SparkFun employee) a cold beverage next time you run into one of
us at the local.
 
17 Sep 2013- Mike Hord, SparkFun Electronics
 
Code developed in Arduino 1.0.5, on a Fio classic board.
 
**Updated for Arduino 1.6.4 5/2015**
****************************************************************/
 
#include &amp;lt;SparkFunMiniMoto.h&amp;gt;  // Include the MiniMoto library
 
// Create two MiniMoto instances, with different address settings.
MiniMoto motor0(0xC4); // A1 = 1, A0 = clear
MiniMoto motor1(0xC0); // A1 = 1, A0 = 1 (default)
 
#define FAULTn  16     // Pin used for fault detection.
 
// Nothing terribly special in the setup() function- prep the
//  serial port, print a little greeting, and set up our fault
//  pin as an input.
void setup()
{
    Serial.begin(9600);
    Serial.println(&amp;quot;Hello, world!&amp;quot;);
    pinMode(FAULTn, INPUT);
}
 
// The loop() function just spins the motors one way, then the
//  other, while constantly monitoring for any fault conditions
//  to occur. If a fault does occur, it will be reported over
//  the serial port, and then operation continues.
void loop()
{
    Serial.println(&amp;quot;Forward!&amp;quot;);
    motor0.drive(100);
    motor1.drive(100);
    delayUntil(1000);
    Serial.println(&amp;quot;Stop!&amp;quot;);
    motor0.stop();
    motor1.stop();
    delay(1000);
    Serial.println(&amp;quot;Reverse!&amp;quot;);
    motor0.drive(-100);
    motor1.drive(-100);
    delayUntil(1000);
    Serial.println(&amp;quot;Brake!&amp;quot;);
    motor0.brake();
    motor1.brake();
    delay(1000);
}
 
// delayUntil() is a little function to run the motor either for
//  a designated time OR until a fault occurs. Note that this is
//  a very simple demonstration; ideally, an interrupt would be
//  used to service faults rather than blocking the application
//  during motion and polling for faults.
void delayUntil(unsigned long elapsedTime)
{
    // See the &amp;quot;BlinkWithoutDelay&amp;quot; example for more details on how
    //  and why this loop works the way it does.
    unsigned long startTime = millis();
    while (startTime + elapsedTime &amp;gt; millis())
    {
        // If FAULTn goes low, a fault condition *may* exist. To be
        //  sure, we&#39;ll need to check the FAULT bit.
        if (digitalRead(FAULTn) == LOW)
        {
            // We&#39;re going to check both motors; the logic is the same
            //  for each...
            byte result = motor0.getFault();
            // If result masked by FAULT is non-zero, we&#39;ve got a fault
            //  condition, and we should report it.
            if (result &amp;amp; FAULT)
            {
                Serial.print(&amp;quot;Motor 0 fault: &amp;quot;);
                if (result &amp;amp; OCP) Serial.println(&amp;quot;Chip overcurrent!&amp;quot;);
                if (result &amp;amp; ILIMIT) Serial.println(&amp;quot;Load current limit!&amp;quot;);
                if (result &amp;amp; UVLO) Serial.println(&amp;quot;Undervoltage!&amp;quot;);
                if (result &amp;amp; OTS) Serial.println(&amp;quot;Over temp!&amp;quot;);
                break; // We want to break out of the motion immediately,
                //  so we can stop motion in response to our fault.
            }
            result = motor1.getFault();
            if (result &amp;amp; FAULT)
            {
                Serial.print(&amp;quot;Motor 1 fault: &amp;quot;);
                if (result &amp;amp; OCP) Serial.println(&amp;quot;Chip overcurrent!&amp;quot;);
                if (result &amp;amp; ILIMIT) Serial.println(&amp;quot;Load current limit!&amp;quot;);
                if (result &amp;amp; UVLO) Serial.println(&amp;quot;Undervoltage!&amp;quot;);
                if (result &amp;amp; OTS) Serial.println(&amp;quot;Over temp!&amp;quot;);
                break;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now click Upload(CTRL+U) to burn testing code. Please refer to &lt;a href=&#34;http://wiki.seeed.cc/Arduino_Common_Error&#34; title=&#34;Arduino Common Error&#34;&gt;here&lt;/a&gt; for any error prompt and you can also add comment on &lt;a href=&#34;http://www.seeed.cc&#34;&gt;community&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;review-results&#34;&gt;Review Results&lt;/h3&gt;

&lt;p&gt;After upload is complete, the motors will rotate in the positive or opposite direction in cycle.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/res/DRV8830.pdf&#34;&gt;DRV8830 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/res/Grove-Mini_I2C_Motor_Driver_v1.0_SCH_PCB.rar&#34;&gt;Grove - Mini I2C Motor Driver_Eagle_File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Mini_I2C_Motor_Driver_v1.0/master/res/Grove-Mini_I2C_Motor_Driver_v1.0_SCH.pdf&#34;&gt;Grove - Mini I2C Motor Driver Schematic Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Drv8830_Motor_Driver&#34;&gt;Grove - Mini I2C Motor Driver Source Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Mini_I2C_Motor_Driver_v1.0 --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - NFC</title>
      <link>http://wiki.seeed.cc/Grove-NFC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-NFC/</guid>
      <description>

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-NFC/master/img/Grove-NFC_01.jpg&#34;&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-NFC/master/img/Grove-NFC_02.jpg&#34;&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Near Field Communication (NFC) is a set of short-range wireless technologies. It is behind daily applications such as access control system and mobile payment system.
Grove NFC features a highly integrated transceiver module PN532 which handles contactless communication at 13.56MHz. You can read and write a 13.56MHz tag with this module or implement point to point data exchange with two NFCs. Grove NFC is designed to use I2C or UART communication protocols, and UART is the default mode. In addition, we assign an independent PCB antenna which can easily stretch out of any enclosure you use, leaving more room for you to design the exterior of your project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-NFC-p-1804.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Working Voltage: 3.3V&lt;/li&gt;
&lt;li&gt;Working Current:

&lt;ul&gt;
&lt;li&gt;Static Mode: 73mA&lt;/li&gt;
&lt;li&gt;Write/Read Mode: 83mA&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Support host interface: I2C, UART(default).&lt;/li&gt;
&lt;li&gt;Serve for contactless communication at 13.56MHz.&lt;/li&gt;
&lt;li&gt;Support ISO14443 Type A and Type B protocols.&lt;/li&gt;
&lt;li&gt;Max operating distance for detecting NFC tags is 28mm depending on current antenna size.&lt;/li&gt;
&lt;li&gt;Support P2P communication.&lt;/li&gt;
&lt;li&gt;Dimensions: 25.43mm x 20.35mm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;get-started&#34;&gt;Get Started&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&#34;https://github.com/Seeed-Studio/PN532&#34;&gt;PN532 library&lt;/a&gt; and put 4 folders(PN532, PN532_SPI, PN532_I2C and PN532_HSU) into Arduino&amp;rsquo;s libraries.&lt;/li&gt;
&lt;li&gt;Download &lt;a href=&#34;https://github.com/Seeed-Studio/Grove-NFC-libraries-Part&#34;&gt;[1]&lt;/a&gt;, put it into Arduino&amp;rsquo;s library and rename it to NDEF.&lt;/li&gt;
&lt;li&gt;Open Arduino IDE. If Arduino IDE is already opened, restart it.&lt;/li&gt;
&lt;li&gt;In Arduino IDE, click menus: File -&amp;gt; Example -&amp;gt; NDEF -&amp;gt; ReadTag&lt;/li&gt;
&lt;li&gt;&lt;em&gt;We used I2C interface in the libraries of NDEF, so please cut off the connection between P1 and UART via a little knife, and solder P1 and I2C together.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-NFC/master/img/NFC_cutAndsolder.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;div class=&#34;admonition caution&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Caution&lt;/p&gt;
Debug for Grove - NFC v1.0 : There is a bug while using I2C communication, please use jumper wires to follow those connection
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arduino/Arduino Mega&lt;/th&gt;
&lt;th&gt;Grove - NFC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SCL&lt;/td&gt;
&lt;td&gt;RX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SDA&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can still use UART interface without cutting any connection, Seeeduino Mega(Arduino Mega) or Seeeduino lite(Arduino Leonardo) are preferred. Following is the modified program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;PN532_HSU.h&amp;quot;
#include &amp;quot;PN532.h&amp;quot;
#include &amp;quot;NfcAdapter.h&amp;quot;
 
PN532_HSU interface(Serial1);
NfcAdapter nfc = NfcAdapter(interface);
 
void setup(void) {
    Serial.begin(115200);
    Serial.println(&amp;quot;NDEF Reader&amp;quot;);
    nfc.begin();
}
 
void loop(void) {
    Serial.println(&amp;quot;\nScan a NFC tag\n&amp;quot;);
    if (nfc.tagPresent())
    {
        NfcTag tag = nfc.read();
        tag.print();
    }
    delay(5000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
If using it with Seeeduino or Arduino UNO, the only way to get the return message is setting it to I&lt;sup&gt;2&lt;/sup&gt;C interface bus. While using it with Mega or Leonardo, you can use UART interface bus. Ensure PN532 library and Don&#39;s NDEF libraries are downloaded for Arduino library. And you might test the example &lt;span style=&#34;font-weight:bold&#34;&gt;ReadTag.ino&lt;/span&gt; under folder &lt;span style=&#34;font-weight:bold&#34;&gt;example&lt;/span&gt;. Delete code Line 1 to Line 10 (line &lt;span style=&#34;font-weight:bold&#34;&gt;\#else ......&lt;/span&gt; and the above lines to top).
&lt;/div&gt;

&lt;p&gt;Cut following connections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TP1 to UART&lt;/li&gt;
&lt;li&gt;TP2 to RX&lt;/li&gt;
&lt;li&gt;TP3 to TX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solder following connections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TP1 to I2C&lt;/li&gt;
&lt;li&gt;TP2 to SCL&lt;/li&gt;
&lt;li&gt;TP3 to SDA&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-NFC/master/res/Grove-NFC.zip&#34;&gt;Grove - NFC v1.0 EAGLE (schematic and board) files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-NFC/master/res/Grove-NFC_v1.1.zip&#34;&gt;Grove - NFC v1.1 EAGLE (schematic and board) files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-NFC/master/res/PN532.pdf&#34;&gt;PN532 Datasheet PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_NFC --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Temperature&amp;Humidity Sensor (HDC1000)</title>
      <link>http://wiki.seeed.cc/Grove-TemperatureAndHumidity_Sensor-HDC1000/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-TemperatureAndHumidity_Sensor-HDC1000/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/img/Grove-TemperatureAndHumidity_Sensor-HDC1000-p1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - Temperature&amp;amp;Humidity Sensor (HDC1000) utilizes a HDC1000 sensor.HDC1000 was designed by Texas Instruments.It is a digital humidity sensor with integrated temperature sensor that provides excellent measurement accuracy at very low power.The device measures humidity based on a novel capacitive sensor.The humidity and temperature sensors are factory calibrated.The innovative WLCSP (Wafer Level Chip Scale Package) simplifies board design with the use of an ultra-compact package. The sensing element of the HDC1000 is placed on the bottom part of the device, which makes the HDC1000 more robust against dirt, dust, and other environmental contaminants. The HDC1000 is functional within the full –40°C to +125°C temperature range,and 0-100% RH range.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-TemperatureHumidity-Sensor-HDC1000-p-2535.html?cPath=25_125&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grove connector compatible&lt;/li&gt;
&lt;li&gt;IIC Interface&lt;/li&gt;
&lt;li&gt;Low Power&lt;/li&gt;
&lt;li&gt;Wide operating voltage range&lt;/li&gt;
&lt;li&gt;I2C Serial Bus Address Configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;800&#34;&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34;&gt;
Item
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Min
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Typical
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Max
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Unit
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Supply Voltage
&lt;/th&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;td&gt;
VDC
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Working Current
&lt;/th&gt;
&lt;td&gt;
0.12
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
90
&lt;/td&gt;
&lt;td&gt;
uA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Relative Humidity Accuracy (Typ)
&lt;/th&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
±3
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
 %RH
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Relative Humidity Operating Range (Typ)
&lt;/th&gt;
&lt;td&gt;
0
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
100
&lt;/td&gt;
&lt;td&gt;
 %RH
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Temperature Accuracy
&lt;/th&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
±0.2
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
℃
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Temperature Range
&lt;/th&gt;
&lt;td&gt;
-40
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
125
&lt;/td&gt;
&lt;td&gt;
℃
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Operating Temperature Range
&lt;/th&gt;
&lt;td&gt;
-20
&lt;/td&gt;
&lt;td&gt;
/
&lt;/td&gt;
&lt;td&gt;
85
&lt;/td&gt;
&lt;td&gt;
℃
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&#34;center&#34;&gt;
&lt;th scope=&#34;row&#34;&gt;
Dimension
&lt;/th&gt;
&lt;td colspan=&#34;3&#34;&gt;
40*20
&lt;/td&gt;
&lt;td&gt;
mm
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/img/Grove-TemperatureAndHumidity_Sensor-HDC1000-p3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grove connector.&lt;/li&gt;
&lt;li&gt;Ready：Ready for a conversion.&lt;/li&gt;
&lt;li&gt;Default address: 0x40.&lt;/li&gt;
&lt;li&gt;ADDR0, ADDR1: I2C Serial Bus Address Configuration(0x40,0x41,0x42,0x43)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;get-started&#34;&gt;Get Started&lt;/h2&gt;

&lt;h3 id=&#34;with-arduino&#34;&gt;With Arduino&lt;/h3&gt;

&lt;p&gt;Here is how to use Grove - Temperature&amp;amp;Humidity Sensor (HDC1000) with Seeeduino Lotus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hardware Installation&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Part lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seeeduino Lotus v1.0 or other Microcontroller development board that combination of Seeeduino&lt;/li&gt;
&lt;li&gt;Grove - Temperature&amp;amp;Humidity Sensor (HDC1000).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hardware linking is very easy.Grove - Temperature&amp;amp;Humidity Sensor (HDC1000) communicate over I2C. Connecting Grove - Temperature&amp;amp;Humidity Sensor (HDC1000) and Seeeduino Lotus v1.0 by Grove cable, as shown below.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/img/Grove-TemperatureAndHumidity_Sensor-HDC1000-p2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software Part&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To download the demo code in github, click &lt;a href=&#34;https://github.com/Seeed-Studio/HDC1000&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To install Arduino Library, please click &lt;a href=&#34;http://wiki.seeed.cc/How_to_install_Arduino_Library&#34; title=&#34;How to install Arduino Library&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open the HDC1000 example sketch&lt;/li&gt;
&lt;li&gt;In the Tools -&amp;gt; Board menu, select right board and serial port.&lt;/li&gt;
&lt;li&gt;Upload demo code to Seeeduino Lotus v1.0.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;We can get the temperature and relative humidity information from the serial terminal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/img/Grove-TemperatureAndHumidity_Sensor-HDC1000-p4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;with-launchpad&#34;&gt;With Launchpad&lt;/h3&gt;

&lt;h4 id=&#34;material-required&#34;&gt;Material required&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;TI MSP430FR4133 LaunchPad] × 1&lt;/li&gt;
&lt;li&gt;USB cable(type A to mini type-b) × 1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-4-pin-Female-Jumper-to-Grove-4-pin-Conversion-Cable-5-PCs-per-PAck-p-1020.html&#34;&gt;Grove - 4 pin Female Jumper to Grove 4 pin Conversion Cable&lt;/a&gt; × 1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Grove-TemperatureHumidity-Sensor-HDC1000-p-2535.html?cPath=25_125&#34;&gt;Grove - Temperature&amp;amp;Humidity Sensor (HDC1000)&lt;/a&gt; × 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hardware-connections&#34;&gt;Hardware connections&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/img/Grove-TemperatureAndHumidity_Sensor-HDC1000-demo_connections-with_launchpad-2400_s.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;download-code-and-flash-it-to-launchpad&#34;&gt;Download code and flash it to Launchpad&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/res/HDC1000-HDC1000_energia.zip&#34;&gt;demo code&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
You have to copy the file &lt;span style=&#34;font-style:italic&#34;&gt;readTempHumi.ino&lt;/span&gt; (in the folder &lt;span style=&#34;font-style:italic&#34;&gt;examples&lt;/span&gt;) into the same folder as &lt;span style=&#34;font-style:italic&#34;&gt;HDC1000.h&lt;/span&gt;.
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Flash the code into Launchpad.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open &lt;em&gt;Serial Monitor&lt;/em&gt; (&lt;strong&gt;Tool&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Serial Monitor&lt;/strong&gt;) to view data detected.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/img/Grove-TemperatureAndHumidity_Sensor-HDC1000-demo_result-with_launchpad-600.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/res/Grove-TemperatureAndHumidity_Sensor-HDC1000-v1.0_sch_pcb.zip &amp;quot;File:Grove - Temperature&amp;amp;Humidity Sensor(HDC1000&#34;&gt;Grove - Temperature&amp;amp;Humidity Sensor(HDC1000) v1.0 sch pcb.zip&lt;/a&gt; v1.0 sch pcb.zip&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/res/Grove-TemperatureAndHumidity_Sensor-HDC1000-v1.0_sch.pdf &amp;quot;File:Grove - Temperature&amp;amp;Humidity Sensor(HDC1000&#34;&gt;Grove - Temperature&amp;amp;Humidity Sensor(HDC1000) v1.0 sch.pdf&lt;/a&gt; v1.0 sch.pdf&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/HDC1000&#34;&gt;Demo code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemperatureAndHumidity_Sensor-HDC1000/master/res/HDC1000.pdf&#34;&gt;HDC1000_DataSheet.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Temperature&amp;Humidity_Sensor_(HDC1000) --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Temperature&amp;Humidity Sensor (High-Accuracy &amp;Mini) v1.0</title>
      <link>http://wiki.seeed.cc/Grove-TemptureAndHumidity_Sensor-High-Accuracy_AndMini-v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-TemptureAndHumidity_Sensor-High-Accuracy_AndMini-v1/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemptureAndHumidity_Sensor-High-Accuracy_AndMini-v1.0/master/img/Grove-TemptureAndHumidity_Sensor-High-Accuracy_AndMini-.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a multifunctional sensor that gives you temperature and relative humidity information at the same time. It utilizes a TH02 sensor that can meet measurement needs of general purposes. It provides reliable readings when environment humidity condition in between 0-80% RH, and temperature condition in between 0-70°C, covering needs in most home and daily applications that don&amp;rsquo;t contain extreme conditions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-Temperature%26Humidity-Sensor-(High-Accuracy-%26-Mini)-p-1921.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Wide operating voltage range

&lt;ul&gt;
&lt;li&gt;(3.3V ~ 5V)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Low Power Consumption

&lt;ul&gt;
&lt;li&gt;350 µA during RH conversion&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;0 to 100% RH operating range&lt;/li&gt;
&lt;li&gt;Measuring Range:

&lt;ul&gt;
&lt;li&gt;Humidity: 0% - 80% RH&lt;/li&gt;
&lt;li&gt;Temperature: 0 ~ 70 °C&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Accuracy:

&lt;ul&gt;
&lt;li&gt;Humidity: ±4.5% RH&lt;/li&gt;
&lt;li&gt;Temperature: ±0.5°C&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I2C host interface&lt;/li&gt;
&lt;li&gt;Excellent long term stability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;applications&#34;&gt;Applications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Industrial HVAC/R&lt;/li&gt;
&lt;li&gt;Thermostats/humidistats&lt;/li&gt;
&lt;li&gt;Micro-environments/data centers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;p&gt;This demo is going to show you how to read temperature and humidity information from this Grove - Temperature&amp;amp;Humidity Sensor (High-Accuracy &amp;amp;Mini) Sensor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemptureAndHumidity_Sensor-High-Accuracy_AndMini-v1.0/master/img/Temperature_Sensor-xin.jpg&#34; alt=&#34;&#34; /&gt;
The Temperature and Humidity sensor is connecting to analog port I2C of Grove - Base Shield.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download &lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Temper_Humidity_TH02&#34;&gt;Grove_Temper_Humidity_TH02 library&lt;/a&gt; and install the library into Arduino libraries.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;/*
 * Demo name  ?: TH02_dev demo
 * Usage      ?: DIGITAL I2C HUMIDITY AND TEMPERATURE SENSOR
 * Author     ?: Oliver Wang from Seeed Studio
 * Version    ?: V0.1
 */

#include &amp;lt;TH02_dev.h&amp;gt;
#include &amp;quot;Arduino.h&amp;quot;
#include &amp;quot;Wire.h&amp;quot;

void setup()
{
    Serial.begin(9600);        // start serial for output

    Serial.println(&amp;quot;****TH02_dev demo by seeed studio****\n&amp;quot;);
    /* Power up,delay 150ms,until voltage is stable */
    delay(150);
    /* Reset HP20x_dev */
    TH02.begin();
    delay(100);

    /* Determine TH02_dev is available or not */
    Serial.println(&amp;quot;TH02_dev is available.\n&amp;quot;);
}


void loop()
{
    float temper = TH02.ReadTemperature();
    Serial.println(&amp;quot;Temperature: &amp;quot;);
    Serial.print(temper);
    Serial.println(&amp;quot;C\r\n&amp;quot;);

    float humidity = TH02.ReadHumidity();
    Serial.println(&amp;quot;Humidity: &amp;quot;);
    Serial.print(humidity);
    Serial.println(&amp;quot;%\r\n&amp;quot;);
    delay(1000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload it into your Arduino board and open the serial monitor to observe the temperature and relative humidity information of the environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemptureAndHumidity_Sensor-High-Accuracy_AndMini-v1.0/master/img/Result_Picture1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemptureAndHumidity_Sensor-High-Accuracy_AndMini-v1.0/master/res/Grove-TemperatureAndHumidity_Sensor-High-Accuracy_And_Mini-V1.0_sch_pcb.zip&#34;&gt;Grove - Temperature&amp;amp;Humidity Sensor (High-Accuracy &amp;amp; Mini) V1.0 sch pcb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-TemptureAndHumidity_Sensor-High-Accuracy_AndMini-v1.0/master/res/TH02_SENSOR.pdf&#34;&gt;TH02_SENSOR.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Temper_Humidity_TH02&#34;&gt;Grove_Temper_Humidity_TH02 library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Tempture&amp;Humidity_Sensor_(High-Accuracy_&amp;Mini)_v1.0 --&gt;
</description>
    </item>
    
  </channel>
</rss>