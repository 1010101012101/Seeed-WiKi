<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grove_uart Io_3v3 Io_5v Plat_duino Plat_linkit on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</title>
    <link>http://wiki.seeed.cc/tags/grove_uart-io_3v3-io_5v-plat_duino-plat_linkit/index.xml</link>
    <description>Recent content in Grove_uart Io_3v3 Io_5v Plat_duino Plat_linkit on A test config to generate mkdocs.yml frontmatter using Hugo&#39;s templating engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wiki.seeed.cc/tags/grove_uart-io_3v3-io_5v-plat_duino-plat_linkit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grove - BLE (dual model) v1.0</title>
      <link>http://wiki.seeed.cc/Grove-BLE-dual_model-v1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-BLE-dual_model-v1.0/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/Grove-BLE-dual_model-v1.0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - BLE (dual model) v1.0 uses CSR dual mode Bluetooth chip. The chip is based on ARM architecture and supports AT instructions. Users can develop flexibly according to the serial baud rate, equipment name, pairing password.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-BLE-(dual-model)-p-2407.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;BT Version: Bluetooth Specification V4.0 &amp;amp; BLE&lt;/li&gt;
&lt;li&gt;UART send and receive max bytes is 512&lt;/li&gt;
&lt;li&gt;Other device to module in SPP mode: 90 Bytes per packet&lt;/li&gt;
&lt;li&gt;Other device to module in BLE mode: 20 Bytes per packet&lt;/li&gt;
&lt;li&gt;Two data transmission mode, balance mode and high speed mode&lt;/li&gt;
&lt;li&gt;Working frequency: 2.4GHz ISM band&lt;/li&gt;
&lt;li&gt;Modulation method: GFSK(Gaussian Frequency Shift Keying)&lt;/li&gt;
&lt;li&gt;RF Power: -23dbm, -6dbm, 0dbm, 6dbm.&lt;/li&gt;
&lt;li&gt;Speed: Asynchronous: 3K Bytes&lt;/li&gt;
&lt;li&gt;Synchronous: 3K Bytes&lt;/li&gt;
&lt;li&gt;Security: Authentication and encryption&lt;/li&gt;
&lt;li&gt;Service: Slave SPP, Peripheral BLE, UUID FFE0,FFE1&lt;/li&gt;
&lt;li&gt;Power: +3.3/+5.0VDC 50mA&lt;/li&gt;
&lt;li&gt;Long range: SPP 30 meters, BLE 60 meters&lt;/li&gt;
&lt;li&gt;Power: SPP 13.5mA, BLE 9.5mA&lt;/li&gt;
&lt;li&gt;Working temperature: –5 ~ +65 Centigrade&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/Grove-BLE-dual_model-v1.0_PhotoTop.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;K2&lt;/strong&gt;: During connected status, it could be disconnected by pressing K2 button more than 100ms. During sleep mode, it could be restored through pressing K2 (factory settings) button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;U1&lt;/strong&gt;: U1 is the wireless module, it includes automatic power on reset circuit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D1&lt;/strong&gt;: The LED works in two mode: &lt;strong&gt;Sleeping&lt;/strong&gt; is indicated by flashing slowly and &lt;strong&gt;Connected&lt;/strong&gt; status indicated by continuous illumination.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;J1&lt;/strong&gt;: The standard Grove connector.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Caution&lt;/p&gt;
BLE transmission speed is slower than SPP transmission, so we selected the lower one in the design, in accordance with the speed of a BLE dual-mode product planning.
&lt;/div&gt;

&lt;h2 id=&#34;hardware-installation&#34;&gt;Hardware Installation&lt;/h2&gt;

&lt;h3 id=&#34;connecting-bluetooth-to-pc-through-uart-bee&#34;&gt;Connecting Bluetooth to PC through UART Bee&lt;/h3&gt;

&lt;p&gt;The Bluetooth provides a serial port with standard Grove socket, most USB-UART converter can be used. Here we use a &lt;a href=&#34;http://wiki.seeed.cc/UartSBee_v5&#34;&gt;UartSBee V5&lt;/a&gt; to connect Bluetooth and PC.
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/Grove-BLE-dual_model-v1.0_ConnectToPC.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;connecting-bluetooth-to-arduino&#34;&gt;Connecting Bluetooth to Arduino&lt;/h3&gt;

&lt;p&gt;Since Arduino Uno have no Grove socket, we use &lt;a href=&#34;http://wiki.seeed.cc/Seeeduino_Lotus&#34;&gt;Seeeduino Lotus&lt;/a&gt; instead. You could use Arduino with &lt;strong&gt;Grove Base Shield V2&lt;/strong&gt; as well.
As an example, D2 and D3 are used as software UART. So, plug the Grove cable into &amp;ldquo;D2&amp;rdquo; socket
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/Grove-BLE-dual_model-v1.0_ConnectToArduino.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;software-instructions&#34;&gt;Software Instructions&lt;/h2&gt;

&lt;h3 id=&#34;conventions&#34;&gt;Conventions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In EDR mode, only slave can be configured while either master or slave can be in BLE mode.&lt;/li&gt;
&lt;li&gt;Factory default setting:

&lt;ul&gt;
&lt;li&gt;EDR Name HMSoft, Slave role, PinCode 1234&lt;/li&gt;
&lt;li&gt;BLE Name HMSoft, Slave role, PinCode 000000&lt;/li&gt;
&lt;li&gt;Baud: 115200, N, 8, 1;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AT Command format:

&lt;ul&gt;
&lt;li&gt;Uppercase AT command format. string format, without any other symbol. (e.g. \r or \n).&lt;/li&gt;
&lt;li&gt;Any incorrect command would get no response.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;at-commands&#34;&gt;AT Commands&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Test Command&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT&lt;/td&gt;
&lt;td&gt;OK/ER/Disconnect link&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If module is not connected to remote device will receive: “OK”&lt;/p&gt;

&lt;p&gt;If module has an error, will receive: “ER”&lt;/p&gt;

&lt;p&gt;If Module has connected, module will disconnected from remote device, if “AT + NOTI” is setup to 1, will receive information string&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Query module EDR address&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+ADDE?&lt;/td&gt;
&lt;td&gt;OK+ Get: MAC&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;3. Query module BLE address&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+ADDB?&lt;/td&gt;
&lt;td&gt;OK+ Get: MAC&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;4. Query/Set Authentication mode&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+AUTH?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1, (Default: 0)
0 – Not authentication
1 – Must authentication

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+AUTH[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;AT+AUTH0: allow made an insecure connection.
AT+AUTH1: every connection must with authentication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Query/Set A to B mode&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+ATOB?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1, (Default: 0)
0 – Not Open ATOB
1 – Open ATOB mode

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+ATOB[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This command must work with AT+MODE0 command. When A device (SPP mode) connect to the module and B device (BLE mode) is also connect to the module, The data string from A device send to the module will send to B device. The data string from B device send to the module is also send to the A device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Query/Set baud rate&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+BAUD?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 1~7, (Default: 6).
1 - 4800
2 – 9600
3 – 19200
4 – 38400
5 – 57600
6 – 115200
7 - 230400

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+BAUD[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;7. Clear bond information&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+BONDE&lt;/td&gt;
&lt;td&gt;OK+BONDE&lt;/td&gt;
&lt;td&gt;Clear EDR bond info&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;AT+BONDB&lt;/td&gt;
&lt;td&gt;OK+BONDB&lt;/td&gt;
&lt;td&gt;Clear BLE bond info&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;BLE mode not supports it yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Clear Last Connected EDR Device Address&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+CLEAE&lt;/td&gt;
&lt;td&gt;OK+CLEAE&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;9. Clear Last Connected BLE Device Address&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+CLEAB&lt;/td&gt;
&lt;td&gt;OK+CLEAB&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;10. Query/Set Module DUAL Work Mode&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+DUAL?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1, (Default: 0)
0 – Allow dual connect.
1 – Allow one connect.

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+DUAL[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;AT+DUAL0: allow two connections at same time (SPP and BLE).
AT+DUAL1: Only allow one connection at same time (SPP or BLE)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Query/Set hardware flow control switch&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
AT+FIOW?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1,(Default: 0)
0: Hardware flow control off
1: Hardware flow control on

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
AT+FIOW[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;12. Query/Set module data transmission speed mode&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
AT+HIGH?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1,(Default: 0)
0: Balance mode
1: High speed mode

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
AT+HIGH[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;In balance mode, we balanced SPP and BLE with a steady speed.
In high speed mode, we don’t control speed, so SPP mode will got high speed.
In high speed mode, module lost RESETB pin function, but you still could use
“AT+RESET” command to reset module.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. System Help Information&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+HELP?&lt;/td&gt;
&lt;td&gt;Help Information&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;14. Query/Set module loaded notify&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
AT+INIT?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1,?, (Default: 0)
0: Loaded notify 0ff
1: Loaded notify on

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
AT+INIT[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;When “AT+INIT1” is setup, after module loaded, module will output “OK+INIT” string through UART.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Query/Set Module Work Mode&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+MODE?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1, (Default: 0)
0 – Data transmission.
1 – Remote control.

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+MODE[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[ P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;AT+MODE0: Only transfer data when connection establishment.
AT+MODE1: Transfer data and response AT commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;16. Query/Set Notify information&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+NOTI?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1, (Default: 0)
0: Don’t Notify
1: Notify

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+NOTI[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[ P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;After AT+NOTI1, module will send connect or disconnect string through
UART when module state is changed:&lt;/p&gt;

&lt;p&gt;OK+CONE ======== EDR connect&lt;/p&gt;

&lt;p&gt;OK+LSTE ========= EDR disconnect&lt;/p&gt;

&lt;p&gt;OK+CONB========= BLE connect&lt;/p&gt;

&lt;p&gt;OK+LSTB ========= BLE disconnect&lt;/p&gt;

&lt;p&gt;OK+LSTA ========= except disconnect, module will reset after 500 ms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;17. Query/Set notify mode&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+NOTP?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1; default: 0
0: without address
1: with address

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+NOTP[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[ P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This command must work with “AT+NOTI1”, if this switch is open, when the module connect to disconnect, the prompt string will include the remote address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;18. Query/Set Module EDR name&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+NAME?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: module EDR name,
Max length is 12.
Default: HMSoft

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+NAME[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[ P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;19. Query/Set Module BLE name&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+NAMB?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: module BLE name,
Max length is 12.
Default: HMSoft

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+NAMB[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[ P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;20. Query/Set PIO1 output status (System LED)e&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+PIO1?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1
0: Unconnected Output 500ms High 500ms Low, Connected output High.
1: Unconnected output Low, Connected output High.
Default: 0

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+ PIO1 [P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[ P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;21. Query/Set PIO output status&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+PIO[P1]?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1][P2]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 2~B (HM-12)
P2: 2~3 (HM-13)
0: Output Low
1: Output High
?: Query

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+ PIO[P1][P2]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1][P2]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;22. Query/Set EDR Pin Code&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+PINE?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: module EDR Code
Max length: 6
Default: 1234

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+PINE[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;23. Query/Set BLE Pin Code&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+PINB?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: module BLE Code
000000~999999
Default: 000000

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+PINB[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;24. Query/Set UART parity bit&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+PARI?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1, 2, (Default: 0)
0: Parity None
1: Parity even
2: Parity odd

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+PARI[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;25. Restore all setup value to factory setup&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+RENEW&lt;/td&gt;
&lt;td&gt;OK+RENEW&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;26. Restart module&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+RESET&lt;/td&gt;
&lt;td&gt;OK+RESET&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;27. Query BLE RSSI value&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;AT+RSSB?&lt;/td&gt;
&lt;td&gt;OK+RSSB: [P1]&lt;/td&gt;
&lt;td&gt;P1: RSSI value&lt;br /&gt;

&lt;p&gt;9999: No connection&lt;br /&gt;
9998: Try later&lt;br /&gt;
9997: Read error&lt;br /&gt;
Xxxx: RSSI value&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This command must use after “AT+MODE1” is setup. This command is only used by remote Bluetooth device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;28. Query EDR RSSI value&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;AT+RSSE?&lt;/td&gt;
&lt;td&gt;OK+RSSE: [P1]&lt;/td&gt;
&lt;td&gt;P1: RSSI value&lt;br /&gt;

&lt;p&gt;9999: No connection&lt;br /&gt;
9998: Try later&lt;br /&gt;
9997: Read error&lt;br /&gt;
Xxxx: RSSI value&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;29. Query Last Connected EDR Device Address&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+RADE?&lt;/td&gt;
&lt;td&gt;OK+Get:MAC Address&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;30. Query Last Connected BLE Device Address&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AT+RADB?&lt;/td&gt;
&lt;td&gt;OK+Get:MAC Address&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;31. Query/Set Master and Slaver Role&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
AT+ROLB?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1 (default: 0)
0: Peripheral
1: Central

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
AT+ROLB[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This command will take effect after module next power on or reset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;32. Query/Set EDR work mode&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+SCAN?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1, (Default: 0)
0: Discovery and connectable
1: Only connectable

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+SCAN[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;33. Query/Set UART stop bit&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
Send
&lt;/th&gt;
&lt;th&gt;
Receive
&lt;/th&gt;
&lt;th&gt;
Parameter
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
Q: AT+STOP?
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Get:[P1]
&lt;/td&gt;
&lt;td rowspan=&#34;2&#34; width=&#34;300&#34;&gt;
P1: 0, 1, (Default: 0)
0: 1 stop bit
1: 2 stop bits

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width=&#34;300&#34;&gt;
S: AT+STOP[P1]
&lt;/td&gt;
&lt;td width=&#34;300&#34;&gt;
OK+ Set:[P1]
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;34. Query Software Version&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Send&lt;/th&gt;
&lt;th&gt;Receive&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;AT+VERR?&lt;br /&gt;

&lt;p&gt;AT+VERS?&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;Version Information&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;programming&#34;&gt;Programming&lt;/h2&gt;

&lt;h3 id=&#34;configure-the-bluetooth-module-with-serial-under-windows&#34;&gt;Configure the Bluetooth module with Serial under Windows&lt;/h3&gt;

&lt;p&gt;This section shows how to configure Bluetooth with PC, some basic methods of setting could be learn. Set up hardware connection refer to “Hardware Installation” section. You will find the blue LED on the module flashes illustrate no connection is set up.&lt;/p&gt;

&lt;p&gt;Open a serial terminal and set Baud Rate:115200, Databits: 8, Stopbits: 1 and No Flow Control. Send “AT” to Bluetooth with the serial terminal and “OK” will be return if all goes well. The Bluetooth only respond AT commands when no connection was set up, or all commands were seen as string and sent out. You can distinguish the status through LED indicates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-AT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then some useful configurations could be sent. Here are some samples of commands and responses.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Test serial connection, send “AT”, will return “OK”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restore factory settings, send “AT+RENEW”, return “OK+RENEW”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reset baud rate of serial port, send “AT+BAUD2”, return “OK+Set:2”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable authentication, send “AT+AUTH1”, return “OK+Set:1”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reset the Bluetooth, send “AT+RESET”, return ”OK+RESET”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Query firmware version, send “AT+VERS?”, return “OK+Get:HMSoftV217”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Query MAC of EDR, send “AT+ADDE?”, return “OK+Get:000E0E002074”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Query MAC of BLE, send “AT+ADDB?”, return “OK+Get:000E0B002074”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the name of EDR, send “AT+NAMEHM-13-EDR”, return “OK+Set:HM-13-EDR”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the name of BLE, send “AT+NAMEHM-13-BLE”, return “OK+Set:HM-13-BLE”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the password of EDR, send “AT+PINE123451”, return “OK+Set:123451”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the password of BLE, send “AT+PINB123451”, return “OK+Set:123451”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable discovery and connectable, send “AT+SCAN0”, return “OK+Set:0”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable notify information of connection, send “AT+NOTI1”, return “OK+Set:1”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Notify information include address, send “AT+NOTP1”, return “OK+Set:1”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable user key, send “AT+PIO01”, return “OK+Set:1”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set to Central mode, send “AT+ROLB1”, return “AT+ROLB1”.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Or Set to Peripheral mode, send “AT+ROLB0”, return “AT+ROLB0”.&lt;/p&gt;

&lt;p&gt;We use two Bluetooth connected with PC, one was set as Central while the other is Peripheral. Several seconds later they find each other and the LED stop flash, connected!&lt;/p&gt;

&lt;h3 id=&#34;communicate-with-iphone&#34;&gt;Communicate with iPhone&lt;/h3&gt;

&lt;p&gt;This kind of Bluetooth module has two protocol: Bluetooth EDR(Enhanced Data Rate) and Bluetooth Low Energy. It can communicate with any device that has one of these protocols. Some Android phone with OS higher than 4.3 and iPhone4 or later have BLE ability. We use a iPhone to demonstrate how to use a cellphone to interact with Bluetooth.&lt;/p&gt;

&lt;p&gt;Power the Bluetooth and configure it as Peripheral role. Search LightBlue in Apple Store and install it. Launch the app, you may find “HM-13-BLE” which we just renamed. Touch it to connect, then touch “Properties” to control it. The key “Hex” on the top right is for change data format, maybe String is easy to see. Hit “Listen for notifications” to enable data receiving. Then we can send data to PC through BLE, hit “Write new value” and write some words. Also PC can transfer data to iPhone with serial terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-IMG_0108.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-IMG_0109.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-IMG_0111.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-IMG_0114.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-DialogWithIOS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;data-transmission-between-two-arduinos&#34;&gt;Data transmission between Two Arduinos&lt;/h3&gt;

&lt;p&gt;Are you ready to code? It’s time to do something after practice. Prepare a pair of Bluetooth, and Arduino or other platform to control them. Here we use two Arduino Uno. Set up the connection as mentioned in section “Hardware Installation”.&lt;/p&gt;

&lt;p&gt;The program of Central and Peripheral use the same code, the only difference is the micro define at the beginning of the program. To assign the Bluetooth to Central role, Just need to modify the text to “#define MASTER 1”, or “#define MASTER 1” if Peripheral role was assigned.&lt;/p&gt;

&lt;p&gt;The initialisation program flow please refer to the following flow chart. First of all we need to distinguish the presetting baud rate of the Bluetooth. After this, send commands to restore factory settings, and change baud rate from 115200 to 9600 since software serial will not working well at high baud rate. Then other parameters were configured to the Bluetooth with Reset command in the final.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-Init-flowchat.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the initialisation, the Central and Peripheral will do different things, the Central will send message to Peripheral interval and print what received from Peripheral while the Peripheral only responds the Central.&lt;/p&gt;

&lt;p&gt;Click &lt;a href=&#34;https://github.com/Seeed-Studio/HM-13_SW&#34;&gt;here&lt;/a&gt; to download the test code and open HM-13_SW.ino with Arduino IDE, compile and download to Arduino Uno. Remember to configure the Bluetooth to different role by modify the macro at the beginning. If you have any problem about how to start Arduino, please click &lt;a href=&#34;http://wiki.seeed.cc/Getting_Started_with_Seeeduino&#34;&gt;here&lt;/a&gt; for some help.&lt;/p&gt;

&lt;p&gt;After downloading program, open two serial terminal windows, the LEDs on Bluetooth will flash, several seconds later, they stop to flash and keep on, this indicates that they connected to each other.
According to the program is written, the Central sends message to the Peripheral continually and get feedback every time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-Debug_Output_Master.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/img/HM-13-Debug_Output_Slave.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/res/Bluetooth_HM-13_en.pdf&#34;&gt;HM-13 Bluetooth Module Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/HM-13_SW&#34;&gt;Arduino code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/res/Eagle_Grove-BLE-dual_model-v1.0_sch_pcb.zip&#34;&gt;EAGLE_Grove-BLE_(dual_model)_v1.0_sch_pcb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE-dual_model-v1.0/master/res/Grove-BLE-dual_model-v1.0.pdf&#34;&gt;PDF_Grove-BLE_(dual_model)_v1.0_sch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_BLE_(dual_model)_v1.0 --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - CO2 Sensor</title>
      <link>http://wiki.seeed.cc/Grove-CO2_Sensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-CO2_Sensor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-CO2_Sensor/master/img/Grove_CO2_Sensor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Grove - CO2 Sensor module is infrared CO2 sensor high sensitivity and high resolution. Infrared CO2 sensor MH-Z16 Is a general-purpose, small sensors, the use of non-dispersive infrared (NDIR) Present in the principle of the air CO2 Detect, with good selectivity, oxygen- dependent, long life, built-in temperature sensor, temperature compensation, with UART output, easy to use. It can be widely used in HVAC and indoor air quality monitoring, industrial process monitoring and security, agriculture and livestock production process monitoring.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-CO2-Sensor-p-1863.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Caution&lt;/p&gt;
Note that the sensor value only reflects the approximated trend of gas concentration in a permissible error range. It DOES NOT represent the exact gas concentration. The detection of certain components in the air usually requires a more precise and costly instrument, which cannot be done with a single gas sensor. If your project is aimed at obtaining the gas concentration at a very precise level, then we do not recommend this gas sensor.
&lt;/div&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Measuring the range of 0-2000 parts per million (PPM)&lt;/li&gt;
&lt;li&gt;Resolution of 1 PPM 0-2000 parts per million (PPM)&lt;/li&gt;
&lt;li&gt;Accuracy of 200 PPM&lt;/li&gt;
&lt;li&gt;A Warm - up time 3 minutes&lt;/li&gt;
&lt;li&gt;Response Time &amp;lt; 90s&lt;/li&gt;
&lt;li&gt;Operating temperature 0 to 50℃&lt;/li&gt;
&lt;li&gt;Operating Humidity 0% ~ 90% RH&lt;/li&gt;
&lt;li&gt;Storage temperature - 20-60℃&lt;/li&gt;
&lt;li&gt;Operating Voltage4.5 V to 6 V DC&lt;/li&gt;
&lt;li&gt;The Current maximum Current of less than 100 ma, the average Current of less than 50 ma&lt;/li&gt;
&lt;li&gt;Output mode UART&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;p&gt;Connect the module with Grove Shield using like following picture and use the program below to gain the voltage.&lt;/p&gt;

&lt;p&gt;Please note that the best preheat time of the sensor is about 180s. For the detailed information about the sensor, please refer to the datasheet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-CO2_Sensor/master/img/5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
  This test code is write for Arduino AVR Series(UNO, Leonardo, Mega)
  If you want to use with LinkIt ONE, please connect the module to D0/1 and modify:

  // #include &amp;lt;SoftwareSerial.h&amp;gt;
  // SoftwareSerial s_serial(2, 3);      // TX, RX

  #define sensor Serial1
*/


#include &amp;lt;SoftwareSerial.h&amp;gt;
SoftwareSerial s_serial(2, 3);      // TX, RX

#define sensor s_serial

const unsigned char cmd_get_sensor[] =
{
    0xff, 0x01, 0x86, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x79
};

unsigned char dataRevice[9];
int temperature;
int CO2PPM;
 
void setup()
{
    sensor.begin(9600);
    Serial.begin(115200);
    Serial.println(&amp;quot;get a &#39;g&#39;, begin to read from sensor!&amp;quot;);
    Serial.println(&amp;quot;********************************************************&amp;quot;);
    Serial.println();
}
 
void loop()
{
    if(dataRecieve())
    {
        Serial.print(&amp;quot;Temperature: &amp;quot;);
        Serial.print(temperature);
        Serial.print(&amp;quot;  CO2: &amp;quot;);
        Serial.print(CO2PPM);
        Serial.println(&amp;quot;&amp;quot;);
    }
    delay(1000);
}
 
bool dataRecieve(void)
{
    byte data[9];
    int i = 0;
 
    //transmit command data
    for(i=0; i&amp;lt;sizeof(cmd_get_sensor); i++)
    {
        sensor.write(cmd_get_sensor[i]);
    }
    delay(10);
    //begin reveiceing data
    if(sensor.available())
    {
        while(sensor.available())
        {
            for(int i=0;i&amp;lt;9; i++)
            {
                data[i] = sensor.read();
            }
        }
    }
 
    for(int j=0; j&amp;lt;9; j++)
    {
        Serial.print(data[j]);
        Serial.print(&amp;quot; &amp;quot;);
    }
    Serial.println(&amp;quot;&amp;quot;);
 
    if((i != 9) || (1 + (0xFF ^ (byte)(data[1] + data[2] + data[3] + data[4] + data[5] + data[6] + data[7]))) != data[8])
    {
        return false;
    }
    
    CO2PPM = (int)data[2] * 256 + (int)data[3];
    temperature = (int)data[4] - 40;
 
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-CO2_Sensor/master/img/Uart_co2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;calibration&#34;&gt;Calibration&lt;/h2&gt;

&lt;p&gt;If you need to calibrate the sensor, please upload below code to your Arduino.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Grove - Co2 Sensor calibration

#include &amp;lt;SoftwareSerial.h&amp;gt;
SoftwareSerial sensor(A5, A4);      // TX, RX


const unsigned char cmd_calibrate[] = 
{
    0xff, 0x87, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2
};

void setup()
{
    sensor.begin(9600);
    Serial.begin(115200);
    Serial.println(&amp;quot;begin to calibrate&amp;quot;);
    
    for(int i=0; i&amp;lt;sizeof(cmd_calibrate); i++)
    {
        sensor.write(cmd_calibrate[i]);
    }
    
    Serial.println(&amp;quot;calibrate done&amp;quot;);
}

void loop()
{
    // nothing to do
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!!!Warning
    Please preheat the sensor for at least 5 minutes before calibrating and make sure the sensor in fresh air.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;350~450ppm: General outdoor environment&lt;/li&gt;
&lt;li&gt;350~1000ppm：The air is fresh and breathing smooth&lt;/li&gt;
&lt;li&gt;1000~2000ppm：The air was stagnant and feel asleep&lt;/li&gt;
&lt;li&gt;5000ppm：Permissible exposure limit for an 8h work day&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-CO2_Sensor/master/res/MH-Z16_CO2.pdf&#34;&gt;MH-Z16_CO2 datasheet_ZH_CN.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-CO2_Sensor/master/res/MH-Z16_CO2_datasheet_EN.pdf&#34;&gt;MH-Z16_CO2 datasheet_EN.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.blm.gov/style/medialib/blm/wy/information/NEPA/cfodocs/howell.Par.2800.File.dat/25apxC.pdf&#34;&gt;Health Risk Evaluation for Carbon Dioxide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_CO2_Sensor --&gt;
</description>
    </item>
    
    <item>
      <title>Grove - Serial MP3 Player</title>
      <link>http://wiki.seeed.cc/Grove-Serial_MP3_Player/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-Serial_MP3_Player/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/grove-serial-mp3-player-p-1542.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Serial_MP3_Player/master/img/Mp3sensor_02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grove-Serial MP3 Player is a kind of simple MP3 player device whose design is based on a high-quality MP3 audio chip&amp;mdash;WT5001. It can support 8KHZ~44.1kHZ sampling frequency MP3 and WAV file formats. This product has several peripheral ports: a standard UART Grove interface, a dual track headphone jack, an external interface and also a Micro SD card interface. You can control the MP3 playback state by sending commands to module via serial port tools, such as switch songs, change the volume and play mode and so on. It seems a simple module, but it owns such strong function. Want to know how the sound quality is? Please come and experience it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/grove-serial-mp3-player-p-1542.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Standard Grove interface&lt;/li&gt;
&lt;li&gt;Asynchronous serial port control play mode&lt;/li&gt;
&lt;li&gt;Busy Indicator&lt;/li&gt;
&lt;li&gt;Reset Button&lt;/li&gt;
&lt;li&gt;Standard Micro SD card Interface&lt;/li&gt;
&lt;li&gt;Support FAT16 and FAT32 file system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h2 id=&#34;hardware-overview&#34;&gt;Hardware Overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Serial_MP3_Player/master/img/Mp3_interface.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;①：Left Channel Grove Interface.&lt;/li&gt;
&lt;li&gt;②：Headset Interface:3.5mm headphones&lt;/li&gt;
&lt;li&gt;③：Right Channel Grove Interface.&lt;/li&gt;
&lt;li&gt;④：WT5001&lt;/li&gt;
&lt;li&gt;⑤：LED Indicator：LED is on when music is playing.&lt;/li&gt;
&lt;li&gt;⑥：UART Grove Interface&lt;/li&gt;
&lt;li&gt;⑦：SD Card: micro SD Card(≤2GB)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;The Grove - Serial MP3 Play can be controlled by Arduino/Seeeduino. And there is a Serial_MP3 test code for you to use. I believe you can easily get started. For more detailed information, please refer to the following description. The hardware installation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connect Grove - Serial MP3 Play to the Digital 2 port of Arduino/Seeeduino, Notice that you can change the pin number as you like, just make sure corresponding changes the code. Then connect your Arduino/Seeeduino to PC with a USB cable.&lt;/li&gt;
&lt;li&gt;Plug a earphone into Grove - Serial MP3 Play. Now the hardware part has been completed.&lt;/li&gt;
&lt;li&gt;After uploading it, open serial tool to send commands.&lt;/li&gt;
&lt;li&gt;Upload the code below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following code includes play mode parameter. You only need to change the parameter to switch the play mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*****************************************************************************/
//    Function: control the seeedstudio Grove MP3 player
//      Hardware: Grove - Serial MP3 Player
/*******************************************************************************/
#include &amp;lt;SoftwareSerial.h&amp;gt;
SoftwareSerial mp3(2, 3);//modify this with the connector you are using.
void setup()
{
    mp3.begin(9600);
    Serial.begin(9600);
    delay(100);
    if (true ==SetPlayMode(0x01))
    Serial.println(&amp;quot;Set The Play Mode to 0x01, Single Loop Mode.&amp;quot;);
    else
    Serial.println(&amp;quot;Playmode Set Error&amp;quot;);
    PauseOnOffCurrentMusic();
 
}
void loop()
{
    SetPlayMode(0x01);
    delay(1000);
    SetMusicPlay(00,01);
    delay(1000);
    SetVolume(0x0E);
    while(1);
}
//Set the music index to play, the index is decided by the input sequence
//of the music;
//hbyte: the high byte of the index;
//lbyte: the low byte of the index;
boolean SetMusicPlay(uint8_t hbyte,uint8_t lbyte)
{
    mp3.write(0x7E);
    mp3.write(0x04);
    mp3.write(0xA0);
    mp3.write(hbyte);
    mp3.write(lbyte);
    mp3.write(0x7E);
    delay(10);
    while(mp3.available())
    {
        if (0xA0==mp3.read())
        return true;
        else
        return false;
    }
}
// Pause on/off  the current music
boolean PauseOnOffCurrentMusic(void)
{
    mp3.write(0x7E);
    mp3.write(0x02);
    mp3.write(0xA3);
    mp3.write(0x7E);
    delay(10);
    while(mp3.available())
    {
        if (0xA3==mp3.read())
        return true;
        else
        return false;
    }
}
 
//Set the volume, the range is 0x00 to 0x1F
boolean SetVolume(uint8_t volume)
{
    mp3.write(0x7E);
    mp3.write(0x03);
    mp3.write(0xA7);
    mp3.write(volume);
    mp3.write(0x7E);
    delay(10);
    while(mp3.available())
    {
        if (0xA7==mp3.read())
        return true;
        else
        return false;
    }
}
 
boolean SetPlayMode(uint8_t playmode)
{
    if (((playmode==0x00)|(playmode==0x01)|(playmode==0x02)|(playmode==0x03))==false)
    {
        Serial.println(&amp;quot;PlayMode Parameter Error! &amp;quot;);
        return false;
    }
    mp3.write(0x7E);
    mp3.write(0x03);
    mp3.write(0xA9);
    mp3.write(playmode);
    mp3.write(0x7E);
    delay(10);
    while(mp3.available())
    {
        if (0xA9==mp3.read())
        return true;
        else
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1. SetPlayMode(uint8_t playmode)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Function is used to set the MP3 Play Mode.&lt;/p&gt;

&lt;p&gt;uint8_t playmode: The parameter to change the play mode. Can be 0x00, 0x01, 0x02 or 0x03.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. SetVolume(uint8_t volume)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Function is used to set the MP3 Play Volume.&lt;/p&gt;

&lt;p&gt;uint8_t volume: The parameter to change the play volume. The parameter range is 0x00 to 0x1F.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. SetMusicPlay(uint8_t hbyte,uint8_t lbyte)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Function is used to set the music index to play, the index is decided by the input sequence of the music&lt;/p&gt;

&lt;p&gt;uint8_t hbyte: The high byte of the index;&lt;/p&gt;

&lt;p&gt;uint8_t lbyte: The low byte of the index;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. PauseOnOffCurrentMusic(void)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Function is used to Pause on/off the current music.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now you can hear songs stored in your SD card. And in the playing mode, the D1 indicator is on. If in the pause mode, the indicator will blink. More experience is waiting for you！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is another way to control MP3 play mode via serial tool.In this way, you need a &lt;a href=&#34;http://www.seeedstudio.com/depot/uartsbee-v4-p-688.html?cPath=63_66&#34;&gt;UartSBee&lt;/a&gt; to connect MP3 to PC. The hardware installation as shown below:
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Serial_MP3_Player/master/img/Using_UartSBee_to_Control_MP3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the connection is completed, open the serial tool to send commands. About the specific commands, please see the reference part!
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Serial_MP3_Player/master/img/Serial_tool_to_send_commands.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;More experience is waiting for you！&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;Common Command Descriptions:&lt;/p&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; width=&#34;80%&#34;&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34;&gt;
Command Name
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Command Format
&lt;/th&gt;
&lt;th scope=&#34;col&#34;&gt;
Description
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope=&#34;row&#34;&gt;
Pause
&lt;/th&gt;
&lt;td&gt;
7E 02 A3 7E
&lt;/td&gt;
&lt;td&gt;
The music will stop when you send this command at the first time. After resending this command, it will continue.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope=&#34;row&#34;&gt;
Stop
&lt;/th&gt;
&lt;td&gt;
7E 02 A4 7E
&lt;/td&gt;
&lt;td&gt;
This command is able to trigger play the next song, or trigger play the first one if the player is playing the last one.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope=&#34;row&#34;&gt;
Next
&lt;/th&gt;
&lt;td&gt;
7E 02 A5 7E
&lt;/td&gt;
&lt;td&gt;
This command is able to trigger play the next song, or trigger play the first one if the player is playing the last one.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope=&#34;row&#34;&gt;
Previous
&lt;/th&gt;
&lt;td&gt;
7E 02 A6 7E
&lt;/td&gt;
&lt;td&gt;
This command can trigger play the previous song. Sending this command can trigger playback to the last song when you are enjoying the first one.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope=&#34;row&#34;&gt;
Volume control
&lt;/th&gt;
&lt;td&gt;
7E 03 A7 1F 7E
&lt;/td&gt;
&lt;td&gt;
There are 32 volume levels from 00 to 31. 00 is mute, and 31 for the maximum volume.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;4&#34; scope=&#34;row&#34;&gt;
Assigned play mode
&lt;/th&gt;
&lt;td rowspan=&#34;4&#34;&gt;
7E 03 A9 XX 7E
&lt;/td&gt;
&lt;td&gt;
XX=00 means playing single without playback(default)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
XX=01 means the single repeated play mode
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
XX=02 means that it is all tracks repeated playback mode.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
XX=03 stands for random pattern.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Serial_MP3_Player/master/res/Grove-UART_MP3_Play_Eagle_File.zip&#34;&gt;Grove - Serial MP3 Play Eagle File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Serial_MP3_Player/master/res/Grove-Serial_MP3_Player.pdf&#34;&gt;Grove - Serial MP3 Play Schematic in PDF format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Seeed-Studio/Grove_Serial_MP3_Player&#34;&gt;Demo code on github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-Serial_MP3_Player/master/res/WT5001_datasheet_V1.5.pdf&#34;&gt;WT5001 Datasheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_-_Serial_MP3_Player --&gt;
</description>
    </item>
    
    <item>
      <title>Grove BLE v1</title>
      <link>http://wiki.seeed.cc/Grove-BLE_v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wiki.seeed.cc/Grove-BLE_v1/</guid>
      <description>

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE_v1/master/img/Grove-BLE_front.png&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE_v1/master/img/Grove-BLE_Back.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Grove - BLE v1 (Grove - Bluetooth Low Energy v1) uses a Low Energy Bluetooth module &amp;ndash; &lt;strong&gt;HM-11&lt;/strong&gt;, based on TI CC2540 chip, which has AT command support. As a Grove product it&amp;rsquo;s convenient to use Grove - BLE with Arduino board via Base Shield.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeedstudio.com/Grove-BLE-p-1929.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/common/master/Get_One_Now_Banner.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Specifications&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BT Version&lt;/td&gt;
&lt;td&gt;Bluetooth Specification V4.0 BLE&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Working frequency&lt;/td&gt;
&lt;td&gt;2.4GHz ISM band&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Modulation method&lt;/td&gt;
&lt;td&gt;GFSK(Gaussian Frequency Shift Keying)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RF Power&lt;/td&gt;
&lt;td&gt;-23dbm, -6dbm, 0dbm, 6dbm, can modify through AT Command AT+POWE&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Speed&lt;/td&gt;
&lt;td&gt;Asynchronous: 6K Bytes, Synchronous: 6K Bytes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sensitivity&lt;/td&gt;
&lt;td&gt;≤-84dBm at 0.1% BER&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Security&lt;/td&gt;
&lt;td&gt;Authentication and encryption&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Central &amp;amp; Peripheral UUID FFE0,FFE1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Supply Power&lt;/td&gt;
&lt;td&gt;3.3v - 5v&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Working temperature&lt;/td&gt;
&lt;td&gt;–5 ~ +65 Centigrade&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Size&lt;/td&gt;
&lt;td&gt;20cm x 10cm&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Working Current&lt;/td&gt;
&lt;td&gt;&amp;lt; 10 mA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sourcing Current&lt;/td&gt;
&lt;td&gt;&amp;lt; 20 mA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sleeping Current&lt;/td&gt;
&lt;td&gt;&amp;lt; 1 mA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;admonition caution&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Attention&lt;/p&gt;
The supply power of HM-11 is 3.3v, but the Grove - BLE is 3.3V to 5V.
&lt;/div&gt;

&lt;p&gt;!!!Tip
    More details about Grove modules please refer to &lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platforms-supported&#34;&gt;Platforms Supported&lt;/h2&gt;

&lt;h3 id=&#34;pinout&#34;&gt;Pinout&lt;/h3&gt;

&lt;p&gt;Grove connector has four wires: GND, VCC, RX, TX.&lt;/p&gt;

&lt;h3 id=&#34;features-of-design&#34;&gt;Features of Design&lt;/h3&gt;

&lt;p&gt;We have used TD6810 chip as the voltage regulator, so the range of the supply power can be 3.3v to 5v. Also , there&amp;rsquo;s a level shift circuit which make sure the accuracy of data transmission.&lt;/p&gt;

&lt;h3 id=&#34;at-commands&#34;&gt;AT Commands&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1）Query module address&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send： AT+ADDR?&lt;/p&gt;

&lt;p&gt;Receive：OK+LADD:address&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2） Query baud rate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+BAUD?&lt;/p&gt;

&lt;p&gt;Receive：OK+Get:[para1]&lt;/p&gt;

&lt;p&gt;Range： 0~8; 0&amp;ndash;9600，1&amp;ndash;19200，2&amp;ndash;38400，3&amp;ndash;57600，4&amp;ndash;115200，5&amp;ndash;4800，6&amp;ndash;2400，7&amp;ndash;1200，8&amp;ndash;230400&lt;/p&gt;

&lt;p&gt;Default: 0&amp;ndash;9600.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set baud rate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+BAUD[para1]&lt;/p&gt;

&lt;p&gt;Receive：OK+Set:[para1]&lt;/p&gt;

&lt;p&gt;Ex.：Send ：AT+BAUD1 ，Receive：OK+Set:1. The Baud rate has been set to 19200&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
If setup to a value 7, After next power on, module will not support any AT Commands, until PIO0 is pressed, Module will change Baud to 9600.
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3） Try connect an address&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+CON[para1]&lt;/p&gt;

&lt;p&gt;Receive：OK+CONN[para2]&lt;/p&gt;

&lt;p&gt;Range ：A,E,F&lt;/p&gt;

&lt;p&gt;Ex.：Try to connect an device which MAC address is 00:17:EA:09:09:09&lt;/p&gt;

&lt;p&gt;Send: AT+CON0017EA090909&lt;/p&gt;

&lt;p&gt;May receive a reply: OK+CONNA &amp;ndash;&amp;gt; Accept request, connecting ; OK+CONNE &amp;ndash;&amp;gt; Connect error ; OK+CONN &amp;ndash;&amp;gt; Connected , if AT+NOTI1 is setup ; OK+CONNF &amp;ndash;&amp;gt; Connect Failed , After 10 seconds&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
Only central role is used. If remote device has already connected to other device or shut down, “OK+CONNF” will received after about 10 Seconds.
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4） Clear Last Connected device address&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+CLEAR&lt;/p&gt;

&lt;p&gt;Receive：OK+CLEAR&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5） Query Module Work Mode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+MODE?&lt;/p&gt;

&lt;p&gt;Receive：OK+Get:[para]&lt;/p&gt;

&lt;p&gt;Range： 0~2;&lt;/p&gt;

&lt;p&gt;0&amp;ndash;Transmission Mode, 1&amp;ndash;PIO collection Mode + Mode 0, 2&amp;ndash;Remote Control Mode + Mode 0 .&lt;/p&gt;

&lt;p&gt;Default: 0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set Module Work Mode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+MODE[]&lt;/p&gt;

&lt;p&gt;Receive：OK+Set:[para]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6） Query Module name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+NAME?&lt;/p&gt;

&lt;p&gt;Receive：OK+NAME[para1]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set Module name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+NAME[para1]&lt;/p&gt;

&lt;p&gt;Receive：OK+Set:[para1]&lt;/p&gt;

&lt;p&gt;Ex.：Send: AT+NAMESeeed， Receive : OK+Set:Seeed&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
Name would change after next power on.
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;7） Query Pin Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+PASS?&lt;/p&gt;

&lt;p&gt;Receive：OK+PASS:[para1]&lt;/p&gt;

&lt;p&gt;Range : 000000~999999.&lt;/p&gt;

&lt;p&gt;Default : 000000.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set Pin Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send: AT+PASS[para1]&lt;/p&gt;

&lt;p&gt;Receive：OK+Set:[para1]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8） Restore all setup value to factory setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+RENEW&lt;/p&gt;

&lt;p&gt;Receive：OK+RENEW&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9） Restart module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+RESET&lt;/p&gt;

&lt;p&gt;Receive：OK+RESET&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10）Query Master and Slaver Role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send：AT+ROLE[para1]&lt;/p&gt;

&lt;p&gt;Receive：OK+Set:[para1]&lt;/p&gt;

&lt;p&gt;Range : 0~1;&lt;/p&gt;

&lt;p&gt;0&amp;ndash;Peripheral : 1&amp;ndash;Central : Default: 0.&lt;/p&gt;

&lt;p&gt;More AT commands please refer to the Datasheet of BLE module.&lt;/p&gt;

&lt;h2 id=&#34;softwareserial-communication&#34;&gt;SoftwareSerial Communication&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE_v1/master/img/Grove-BLE_connection1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grove - BLE can be used as a master or slave, you can use the one via different demos.&lt;strong&gt;If you are going to use the following SoftwareSerial program, please refer to the way of connection in the previous pic. TX&amp;ndash;&amp;gt;D2, RX&amp;ndash;&amp;gt;D3.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open Arduino IDE, copy the following program and upload it onto the Arduino/Seeeduino board. And then two BLE modules can communicate with each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo : BLE Slave&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #include &amp;lt;SoftwareSerial.h&amp;gt;   //Software Serial Port
    #define RxD 2
    #define TxD 3
     
    #define DEBUG_ENABLED  1
     
    SoftwareSerial BLE(RxD,TxD);
     
    void setup() 
    { 
      Serial.begin(9600);
      pinMode(RxD, INPUT);
      pinMode(TxD, OUTPUT);
      setupBleConnection();
     
    } 
     
    void loop() 
    { 
      char recvChar;
      while(1){
        if(BLE.available()){//check if there&#39;s any data sent from the remote BLE 
          recvChar = BLE.read();
          Serial.print(recvChar);
        }
        if(Serial.available()){//check if there&#39;s any data sent from the local serial terminal, you can add the other applications here
          recvChar  = Serial.read();
          BLE.print(recvChar);
        }
      }
    } 
     
    void setupBleConnection()
    {
      BLE.begin(9600); //Set BLE BaudRate to default baud rate 9600
      BLE.print(&amp;quot;AT+CLEAR&amp;quot;); //clear all previous setting
      BLE.print(&amp;quot;AT+ROLE0&amp;quot;); //set the bluetooth name as a slaver
      BLE.print(&amp;quot;AT+SAVE1&amp;quot;);  //don&#39;t save the connect information
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Demo : BLE Master&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #include &amp;lt;SoftwareSerial.h&amp;gt;   //Software Serial Port
    #define RxD 2
    #define TxD 3
     
    #define DEBUG_ENABLED  1
     
    SoftwareSerial BLE(RxD,TxD);
     
    void setup() 
    { 
      Serial.begin(9600);
      pinMode(RxD, INPUT);
      pinMode(TxD, OUTPUT);
      setupBleConnection();
     
    } 
     
    void loop() 
    { 
      char recvChar;
      while(1){
        if(BLE.available()){//check if there&#39;s any data sent from the remote BLE
          recvChar = BLE.read();
          Serial.print(recvChar);
        }
        if(Serial.available()){//check if there&#39;s any data sent from the local serial terminal, you can add the other applications here
          recvChar  = Serial.read();
          BLE.print(recvChar);
        }
      }
    } 
     
    void setupBleConnection()
    {
      BLE.begin(9600); //Set BLE BaudRate to default baud rate 9600
      BLE.print(&amp;quot;AT+CLEAR&amp;quot;); //clear all previous setting
      BLE.print(&amp;quot;AT+ROLE1&amp;quot;); //set the bluetooth name as a master
      BLE.print(&amp;quot;AT+SAVE1&amp;quot;);  //don&#39;t save the connect information
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE_v1/master/res/HMBLEComAssistant.rar&#34;&gt;BLE_apk_for_Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE_v1/master/res/Bluetooth4_en.pdf&#34;&gt;Datasheet of BLE module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeeedDocument/Grove-BLE_v1/master/res/Grove-BLE_v1.0.zip&#34;&gt;Schematic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- This Markdown file was created from http://www.seeedstudio.com/wiki/Grove_BLE_v1 --&gt;
</description>
    </item>
    
  </channel>
</rss>